// Decompiled with JetBrains decompiler
// Type: Kvartplata.Forms.FrmClientCard
// Assembly: Kvartplata, Version=1.16.3.10, Culture=neutral, PublicKeyToken=null
// MVID: 07D514F7-94DF-4C8B-8A8A-7DDC3C754113
// Assembly location: S:\soft-work\kor-jkx\kvartplata\Kvartplata.exe

using Counters;
using FastReport;
using Kvartplata.Classes;
using Kvartplata.Forms.Controls;
using Kvartplata.Properties;
using Kvartplata.StaticResourse;
using NHibernate;
using NHibernate.Criterion;
using SaveSettings;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Windows.Forms;
using System.Windows.Forms.Layout;

namespace Kvartplata.Forms
{
  public class FrmClientCard : Form
  {
    private int SelectedIndexClientParam = -1;
    private int SelectedIndexLsService = -1;
    private int SelectedIndexMsp = -1;
    private Kvartplata.Classes.FormStateSaver fss = new Kvartplata.Classes.FormStateSaver(FrmClientCard.ic);
    private bool Arhiv = false;
    protected GridSettings MySettingsLsService = new GridSettings();
    protected GridSettings MySettingsLsParam = new GridSettings();
    protected GridSettings MySettingsLsMsp = new GridSettings();
    protected GridSettings MySettingsLsPersons = new GridSettings();
    protected GridSettings MySettingsLsOwners = new GridSettings();
    protected GridSettings MySettingsLsAbs = new GridSettings();
    protected GridSettings MySettingsLsCounters = new GridSettings();
    protected GridSettings MySettingsLsEvidence = new GridSettings();
    protected GridSettings MySettingsDetailEvidence = new GridSettings();
    protected GridSettings MySettingsLsServiceParam = new GridSettings();
    protected GridSettings MySettingsFrFamily = new GridSettings();
    protected GridSettings MySettingsMessage = new GridSettings();
    protected GridSettings MySettingsAudit = new GridSettings();
    protected GridSettings MySettingsSeal = new GridSettings();
    protected GridSettings MySettingsBalance = new GridSettings();
    protected GridSettings MySettingsPeni = new GridSettings();
    protected GridSettings MySettingsSocSaldo = new GridSettings();
    protected GridSettings MySettingsSupplierClient = new GridSettings();
    protected GridSettings MySettingsNoteBook = new GridSettings();
    protected GridSettings MySettingsArenda = new GridSettings();
    protected GridSettings MySettingsPersonsWork = new GridSettings();
    protected GridSettings MySettingsBond = new GridSettings();
    protected GridSettings MySettingsParamForeign = new GridSettings();
    private int setupPeriod = 1201;
    private int setupValue = 0;
    private string slg = "";
    private IContainer components = (IContainer) null;
    public Kvartplata.Classes.LsClient Client;
    private int ClientId;
    private ISession session;
    private Kvartplata.Classes.Period CurrentPeriod;
    private bool PastTime;
    private bool PastTimeLsSupplier;
    private bool PastTimeLsService;
    private readonly Kvartplata.Classes.Period MonthClosed;
    private Kvartplata.Classes.Period NextMonthClosed;
    private bool CreateComboBoxField;
    private ClientParam OldClientParam;
    private IList<ClientParam> OldListClientParam;
    private bool InitGrid;
    private bool InsertRecord;
    private DateTime LastDayMonthClosed;
    private int CompanyId;
    private IList<Person> lodgers;
    private DataGridViewComboBoxColumn comboboxColumn;
    private IList<Owner> owners;
    private LsService OldLsService;
    private IList<LsService> OldListLsService;
    private IList<LsService> CurrentListLsService;
    private int CompanyIdNorm;
    private LsMSPGku oldLsMspGku;
    private IList<LsMSPGku> oldListLsMspGku;
    private FrFamily oldFrFamily;
    private IList<FrFamily> oldListFrFamily;
    private static IContainer ic;
    private IList<Kvartplata.Classes.Counter> countersList;
    private IList<Kvartplata.Classes.Evidence> evidencesList;
    private IList<Kvartplata.Classes.CounterRelation> cr;
    private IList listRent;
    private bool handMadeMSP;
    private Transfer transfer;
    private bool fCounter;
    private bool reloadList;
    private OwnerDoc copyOwnerDoc;
    private LsAbsence copyAbsence;
    private bool editEvidence;
    private IList<Kvartplata.Classes.Period> evidencePeriods;
    private bool evidenceDateEdit;
    private DateTime dateArchive;
    private Owner oldOwner;
    private IList<SupplierClient> oldListSupplierClient;
    private SupplierClient oldSupplierClient;
    private IList<Kvartplata.Classes.Evidence> oldListEvidence;
    private Kvartplata.Classes.Evidence oldEvidence;
    private IList<Kvartplata.Classes.CounterRelation> oldListCounterRelation;
    private Kvartplata.Classes.CounterRelation oldCounterRelation;
    private IList<Audit> oldListAudit;
    private Audit oldAudit;
    private IList<Seal> oldListSeal;
    private Seal oldSeal;
    private IList<HomesPhones> oldListMessage;
    private HomesPhones oldMessage;
    private IList<NoteBook> oldListNoteBook;
    private NoteBook oldNoteBook;
    private IList<LsAbsence> oldListAbsence;
    private LsAbsence oldAbsence;
    private LsQuality oldQuality;
    private IList<LsQuality> oldListQuality;
    private LsServiceParam oldServiceParam;
    private IList<LsServiceParam> oldListServiceParam;
    private int city;
    private LsArenda lsArenda;
    private DogPeriod oldDogPeriod;
    private IList<DogPeriod> oldListDogPeriod;
    private bool changeText;
    private string org;
    private IList<BaseOrg> listOrgs;
    private int indexOrg;
    private bool changeDogovor;
    private bool changeNum;
    private Kvartplata.Classes.Address address;
    private IList<Bond> oldBonds;
    private Bond oldBond;
    private const short LsClientParamType = 3;
    private const short CommonParamType = 0;
    private bool InitService;
    private Panel pnButton;
    private Button btnExit;
    private Button btnSave;
    private Button btnAddRecord;
    private Button btnDelRecord;
    private ToolStrip ts;
    private Panel pnUp;
    private Label lblMonthCLosed;
    private Label lblClosed;
    private ContextMenuStrip contextMenuStrip1;
    private ToolStripMenuItem tsmiCopyRecord;
    private TabControl tcntrl;
    private TabPage tpTitul;
    private TabPage tpOptions;
    private DataGridView dgvParams;
    private TabPage tpService;
    private TabPage tpSaldo;
    private TabPage tpLodgers;
    private ToolStripButton tsbKvit;
    private Button btnLast;
    private Button btnFirst;
    private Button btnNext;
    private Button btnPreview;
    private TabPage tpOwners;
    private TabPage tpQuality;
    private DataGridView dgvQuality;
    private TabPage tpAbsence;
    private DataGridView dgvAbsence;
    private ProgressBar progressBar1;
    private TabPage tpMSP;
    private TabPage tpCounters;
    private DataGridView dgvMsp;
    private TabControl tcntrlMsp;
    private TabPage tpMSPRecipient;
    private TabPage tpFamily;
    private TabPage tpMspDocument;
    private DataGridView dgvMspDocPers;
    private FlowLayoutPanel flwlpMspDocument;
    private Panel pnMSPDoc;
    private Button btnDeletePersDoc;
    private Button btnAddPersDoc;
    private ToolStripButton tsbPayment;
    private ToolStripDropDownButton tsbFind;
    private ContextMenuStrip cmsFind;
    private ToolStripMenuItem tsmiPersonalSearch;
    private ToolStripMenuItem tsmiFlatSearch;
    private TabControl tcntrlBalance;
    private TabPage tpBalance;
    private TabPage tpBalancePeni;
    private Label lblp3Address;
    private Label lblp3FIO;
    private Label lblp3LsClient;
    private ToolStripDropDownButton tsbMultiPastTime;
    private ContextMenuStrip cmLsService;
    private ToolStripMenuItem tsmiLsService;
    private ToolStripMenuItem tsmiLsSupplier;
    private TabPage tpPensDoc;
    private Panel pnPensDoc;
    private Button btnDelPensDoc;
    private Button btnAddPensDoc;
    private DataGridView dgvPensDocPers;
    private DataGridView dgvOwners;
    private Panel pnOwners;
    private Button btnDelOwner;
    private Button btnAddOwner;
    private Button btnSaveOwner;
    private Label lblOwnerDoc;
    private DataGridView dgvOwnerDoc;
    private FlowLayoutPanel flpnPensDoc;
    private FlowLayoutPanel flpnPFR;
    private ContextMenuStrip cmLodgers;
    private ToolStripMenuItem tsmiPutDownStatusOwner;
    private ToolStripMenuItem tsmiRemoveStatusOwner;
    private ContextMenuStrip cmOwners;
    private ToolStripMenuItem tsmiSelectOwners;
    private ContextMenuStrip cmBalance;
    private ToolStripMenuItem tsmiHandChangesCharges;
    private ToolStripMenuItem tsmiHandChangesBenefits;
    private ToolStripDropDownButton tsbClient;
    private ToolStripMenuItem tsmiCreateClientsNum;
    private Panel pnFIO;
    private ComboBox cbFlat;
    private Label lbl5;
    private Label lbl4;
    private TextBox tbSurFlat;
    private Panel pnNumers;
    private TextBox tbFamily;
    private Label lbl1;
    private System.Windows.Forms.Timer tmr;
    private Label lblPastTime;
    private ToolStripButton tsbCalc;
    private TextBox tbEntrance;
    private Label label3;
    private Panel pnInfo;
    private TextBox tbPhone;
    private Label label4;
    private Panel pnRemark;
    private TextBox tbRemark;
    private TextBox tbFloor;
    private Label label6;
    private TextBox tbOldId;
    private Label label5;
    private Label label7;
    private ToolStripDropDownButton tsbDictionary;
    private ToolStripMenuItem tsmiTariff;
    private ToolStripMenuItem tsmiFacilities;
    private ToolStripMenuItem tsmiAbsence;
    private ToolStripMenuItem tsmiQuality;
    private ToolStripMenuItem tsmiSourcesPayments;
    private ToolStripMenuItem tsmiPurposePayment;
    private ToolStripMenuItem tsmiParameters;
    private ToolStripMenuItem tsmiTypeDocuments;
    private ToolStripMenuItem tsmiTypeCounters;
    private ToolStripMenuItem tsmiSuppliers;
    private ToolStripMenuItem tsmiReceipt;
    private ToolStripMenuItem tsmiServiceOrganizations;
    private CheckBox chbArhiv;
    private ToolStripMenuItem tsmiDeleteRecord;
    private ToolStripMenuItem tsmiService;
    private Button btnPinCode;
    private Panel pnBalance;
    private Label lblOut;
    private Label lblRentText;
    private Label lblInText;
    private Label lblPayment;
    private Label lblMSPPast;
    private Label lblMSP;
    private Label lblRentPast;
    private Label lblRent;
    private Label lblIn;
    private DataGridView dgvBalance;
    private Label lblMSPText;
    private Label lblPastText;
    private Label lblOutText;
    private Label lblPayText;
    private Label lblPastMSPText;
    private Kvartplata.Classes.MonthPicker mpCurrentPeriod;
    private ToolStripMenuItem tsmiUpdateRecord;
    private DataGridView dgvPeni;
    private Panel pnPeni;
    private Label label1;
    private Label label2;
    private Label label10;
    private Label lblOutPeni;
    private Label label12;
    private Label label13;
    private Label lblPayPeni;
    private Label lblCorrectPeni;
    private Label lblRentPeni;
    private Label lblInPeni;
    private Button btnCorrect;
    private Panel pnLsFamily;
    private DataGridView dgvLsFamily;
    private Panel pnBtnLsFamily;
    private Button btnDelLsFamily;
    private Button btnAddLsFamily;
    private Button btnSaveLsFamily;
    private DataGridView dgvFrFamily;
    private Panel pnBtnFrFamily;
    private Button btnDelFrFamily;
    private Button btnAddFrFamily;
    private Button btnSaveFrFamily;
    private Label lblPastTimeLsService;
    private System.Windows.Forms.Timer tmrLsService;
    private Button btnMainCorrect;
    private ToolStripDropDownButton tsbReport;
    private ToolStripMenuItem tsmiDischarge;
    private ToolStripMenuItem tsmiDetailAccounts;
    private ToolStripMenuItem tsmiLibraryReport;
    private ToolStripMenuItem сВыборкойПениToolStripMenuItem;
    private ToolStripMenuItem сНачислениемПениToolStripMenuItem;
    private DataGridView dgvLodgers;
    private Panel pnLodgers;
    private Label lblLodgers;
    private TextBox txtVrJil;
    private TextBox txtJil;
    private Label lblVrJil;
    private Label lblJil;
    private Label lblOverText;
    private Label lblOverpay;
    private Label lblOverPeniText;
    private Label lblOverPeni;
    private Label lblRentMonth;
    private Label lblRentMonthText;
    private TabControl tcntrlService;
    private TabPage tpLSService;
    private DataGridView dgvLsService;
    private Panel pnLsService;
    private Button btnPastTimeLsService;
    private Button btnDelLsService;
    private Button btnAddLsService;
    private Button btnSaveLsService;
    private UCLsSupplier ucLsSupplier1;
    private TabPage tpServiceParam;
    private Panel pnServiceParam;
    private Label lblService;
    private ComboBox cmbService;
    private DataGridView dgvServiceParam;
    private ToolStripMenuItem tsmiDeleteClient;
    private ToolStripDropDownButton tsbCounter;
    private ContextMenuStrip cmOwnerDoc;
    private ToolStripMenuItem tsmiCopyRec;
    private ToolStripMenuItem tsmiInsertRecord;
    private ContextMenuStrip cmCopyToPasttime;
    private ToolStripMenuItem tsmiCopyRecordInPastTime;
    private Label lblSubsText;
    private Label lblSubs;
    private TabPage tpSocSaldo;
    private DataGridView dgvSocSaldo;
    private Panel pnSocSaldo;
    private Panel pnUslSoc;
    private ComboBox cmbPersonMSP;
    private ComboBox cmbPerson;
    private Label lblPersonMSP;
    private Label lblPerson;
    private Label label9;
    private Label label11;
    private Label label14;
    private Label label15;
    private Label lblOutSoc;
    private Label label17;
    private Label label18;
    private Label lblPaySoc;
    private Label lblCorrSoc;
    private Label lblPastSoc;
    private Label lblRentSoc;
    private Label lblInSoc;
    private ToolStripMenuItem tsmiDivide;
    private ToolStripMenuItem tsmiUnit;
    private HelpProvider hp;
    private TabPage tpMessage;
    private DataGridView dgvMessage;
    private ToolStripMenuItem tsmiTypeLocationCounter;
    private ToolStripMenuItem tsmiTypeSeals;
    private Label lblComp;
    private Label lblCompText;
    private Label lblEdit;
    private System.Windows.Forms.Timer tmrEvidence;
    private MonthCalendar mcArchive;
    private ToolStripButton tsbStack;
    private Label label16;
    private Label lblRentFull;
    private ToolStripMenuItem tsmiBanks;
    private ToolStripMenuItem tsmiOrganizations;
    private ToolStripMenuItem tsmiInPastTime;
    private ToolStripMenuItem tsmiClose;
    private Panel pnInfoLsClinent;
    private Label lblTempNumJilec;
    private Label lbl8T;
    private Label lblNumJilec;
    private Label lbl7T;
    private Label lblStatusT;
    private Label lblRightDocT;
    private Label lblFlatCategoryT;
    private Label lbl6T;
    private Label lbl5T;
    private Label lbl4T;
    private Label lblJilSquareT;
    private Label lblAllSquareT;
    private Label lbl3T;
    private Label lbl2T;
    private Label lblMspT;
    private Label lbl1T;
    private DataGridView dgvSupplierClient;
    private Label label19;
    private CheckBox cbShowAnotherOrg;
    private Button btnNoteBook;
    private ToolStripMenuItem tsmiTypeBindingServices;
    private ToolStripMenuItem tsmiBindingServices;
    private ContextMenuStrip cmDetail;
    private ToolStripMenuItem tsmiDetailCorrectRent;
    private ContextMenuStrip cmsEntrance;
    private ToolStripMenuItem tsmiTypeNoteBook;
    private TextBox txbDebt;
    private Label label20;
    private TabPage tpArenda;
    private CheckBox cbArenda;
    private Panel pnDogovor;
    private Label lblOrg;
    private TextBox txbNum;
    private Label lblDate;
    private Label lblNum;
    private TextBox txbKumiNum;
    private DateTimePicker dtpKumiDate;
    private Label lblBuiltIn;
    private Label lblKumiDate;
    private Label lblKumiNum;
    private DateTimePicker dtpDate;
    private ComboBox cmbBuiltIn;
    private Panel pnBill;
    private ToolStripMenuItem tsmiContractSearch;
    private ComboBox cmbOrganization;
    private ListBox lbOrg;
    private Button btnOrgInfo;
    private MaskedTextBox mtbKumiDate;
    private MaskedTextBox mtbDate;
    private MaskedTextBox mtbDEnd;
    private Label lblDEnd;
    private MaskedTextBox mtbDBeg;
    private Label lblDBeg;
    private Label lblRentPrior;
    private TextBox txbRentPrior;
    private TextBox txbAdres;
    private Label lblAdres;
    private ToolStripMenuItem tsmiLsKvartplata;
    private ToolStripMenuItem tsmiLsArenda;
    private ComboBox cmbArFlat;
    private Label lblArFlat;
    private TextBox txbArPhone;
    private Label lblArPhone;
    private Label lblArNote;
    private TextBox txbArNote;
    private TextBox txbArFloor;
    private Label lblFloor;
    private TextBox txbArEntrance;
    private Label lblArEntrance;
    private Label lblNDS;
    private Label lblNDSText;
    private Label lblBill;
    private DataGridView dgvBill;
    private ToolStripMenuItem tsmiDogovor;
    private TextBox txbArNumberRoom;
    private Label lblArNumberRoom;
    private Panel pnPolicy;
    private FastReport.Report reportPolicy;
    private ContextMenuStrip cmsCounters;
    private ToolStripMenuItem miCopy;
    private TabPage tpUZP;
    private Panel pnPersonsWork;
    private Button btnDelPerson;
    private Button btnAddPerson;
    private Button btnSavePerson;
    private DataGridView dgvPersonsWork;
    private ToolStripMenuItem tsmiGuilds;
    private Label lblContract;
    private DataGridView dgvBond;
    private ToolStripMenuItem tsmiContractOrganization;
    private Button btnAgreement;
    private Button btnMspCorrect;
    private TabPage tpRentMSP;
    private DataGridView dgvParamForeign;
    private Label lblArError;
    private System.Windows.Forms.Timer tmrArError;
    private Button btnPinCodeAr;
    private ToolStripMenuItem tsmiDetailAllRent;
    private Panel pnFilterPeniReceiptType;
    private ComboBox cbPeniReceiptType;
    private Label lblPeniReceiptType;
    private Panel pnFilterReceiptType;
    private ComboBox cbReceiptType;
    private Label lbReceiptType;
    private DataGridViewTextBoxColumn dataGridViewTextBoxColumn1;
    private DataGridViewTextBoxColumn dataGridViewTextBoxColumn2;
    private DataGridViewTextBoxColumn dataGridViewTextBoxColumn3;
    private DataGridViewTextBoxColumn dataGridViewTextBoxColumn4;
    private DataGridViewTextBoxColumn dataGridViewTextBoxColumn5;
    private DataGridViewTextBoxColumn dataGridViewTextBoxColumn6;
    private DataGridViewTextBoxColumn dataGridViewTextBoxColumn7;
    private DataGridViewTextBoxColumn dataGridViewTextBoxColumn8;
    private ComboBox cbMSPReceiptType;
    private Label lblMSPReceiptType;
    private DataGridViewTextBoxColumn dataGridViewTextBoxColumn9;
    private DataGridViewTextBoxColumn dataGridViewTextBoxColumn10;
    private DataGridViewTextBoxColumn dataGridViewTextBoxColumn11;
    private DataGridViewTextBoxColumn dataGridViewTextBoxColumn12;
    private DataGridViewTextBoxColumn dataGridViewTextBoxColumn13;
    private DataGridViewTextBoxColumn dataGridViewTextBoxColumn14;
    private DataGridViewTextBoxColumn dataGridViewTextBoxColumn15;
    private DataGridViewTextBoxColumn dataGridViewTextBoxColumn16;
    private DataGridViewTextBoxColumn dataGridViewTextBoxColumn17;
    private DataGridViewTextBoxColumn dataGridViewTextBoxColumn18;
    private Button btnTypeDelivery;
    private ComboBox cmbDocumentType;
    private Label lblTypeDocument;
    private TabControl tcntrlCounters;
    private TabPage tpEvidence;
    private DataGridView dgvEvidence;
    private Panel pnPeriod;
    private Label lblFiltrService;
    private ComboBox cmbFiltrService;
    private ComboBox cmbPeriod;
    private Label lblPeriod;
    private Panel pnEvidence;
    private Button btnLoad;
    private Button btnEdit;
    private TabPage tpNumCounters;
    private DataGridView dgvCounters;
    private Panel pnCounter;
    private Button btnDelCounter;
    private CheckBox chbCounterArchive;
    private Label lblMainCounters;
    private Button btnAddCounter;
    private Button btnSaveCounter;
    private Button btnArchive;
    private DataGridView dgvMainCounters;
    private TabPage tpAudit;
    private DataGridView dgvAudit;
    private TabPage tpSeal;
    private DataGridView dgvSeal;
    private TabPage tpDetailEvidence;
    private DataGridView dgvDetailEvidence;
    private Panel pnDetailPeriod;
    private Label lblFiltrDetailService;
    private ComboBox cmbFiltrDetailService;
    private ComboBox cmbDetailPeriod;
    private Label lblDetailPeriod;
    private TabPage tpWorkDistribute;
    private DataGridView dgvWorkPayRent;
    private Counters.Classes.MaskDateColumn PeriodPR;
    private DataGridViewComboBoxColumn RecipientPR;
    private DataGridViewComboBoxColumn PerformerPR;
    private DataGridViewTextBoxColumn BalanceIn;
    private DataGridViewTextBoxColumn RentPercent;
    private DataGridViewTextBoxColumn RentDept;
    private DataGridViewTextBoxColumn RentPR;
    private DataGridViewTextBoxColumn BalanceOut;
    private DataGridViewTextBoxColumn RentComission;
    private DataGridViewTextBoxColumn Pay;
    private DataGridViewTextBoxColumn PayDept;
    private DataGridViewTextBoxColumn PayPersent;
    private DataGridViewTextBoxColumn PayComission;
    private Panel pnWDButtons;
    private ToolStripMenuItem tsmiLsOverhaul;
    private ToolStripDropDownButton tsbKvit2;
    private ToolStripMenuItem tsmiOldReceipt;
    private ToolStripMenuItem tsmiNewReceipt;
    private DataGridViewTextBoxColumn dataGridViewTextBoxColumn19;
    private DataGridViewTextBoxColumn dataGridViewTextBoxColumn20;
    private SplitContainer splitContainer1;
    private DataGridView dvgArendaLS;
    private Label label8;
    private Panel panWDDataGrid;
    private SplitContainer splitContainerWD;
    private Label lblTypeOwn;
    private Label label21;
    private Button butFileCLient;
    private Button btnTypeDelivery2;
    private DataGridView dgvWorkDistribute;
    private Counters.Classes.MaskDateColumn Period;
    private DataGridViewComboBoxColumn Service;
    private DataGridViewComboBoxColumn Recipient;
    private DataGridViewComboBoxColumn Performer;
    private DataGridViewTextBoxColumn rents;
    private DataGridViewTextBoxColumn ParamValue;
    private DataGridViewTextBoxColumn Scheme;
    private DataGridViewTextBoxColumn MonthCnt;
    private DataGridViewTextBoxColumn Rate;
    private DataGridViewTextBoxColumn Comission;
    private DataGridViewTextBoxColumn RentCorrect;
    private DataGridViewTextBoxColumn RentPercentCorrect;
    private DataGridViewTextBoxColumn UName;
    private DataGridViewTextBoxColumn DEdit;
    private Panel pnWDFilters;
    private Label lblWDService;
    private ComboBox cmbWDServiceFilter;
    private ComboBox cmbWDPeriod;
    private Label lblWDPeriod;
    private TabPage tpPayWork;
    private Button butDownloadDocHome;

    public short Receipt_id { get; set; }

    public int ReceiptPeni_id { get; set; }

    public int ReceiptMSP_id { get; set; }

    public bool ReloadList
    {
      get
      {
        return this.reloadList;
      }
    }

    public FrmClientCard()
    {
      this.InitializeComponent();
      if (Kvartplata.Classes.Options.PrefixWindow != "")
      {
        this.Name = Kvartplata.Classes.Options.PrefixWindow + "_" + this.Name;
        this.Text = Kvartplata.Classes.Options.PrefixWindow + "_" + this.Text;
      }
      this.fss.ParentForm = (Form) this;
      this.SetGridConfigValueSettings();
      this.ShowHideArenda();
    }

    public FrmClientCard(Kvartplata.Classes.LsClient clientLs)
    {
      this.fss.ParentForm = (Form) this;
      this.ClientId = clientLs.ClientId;
      this.CurrentPeriod = new Kvartplata.Classes.Period();
      this.CurrentPeriod = Kvartplata.Classes.Options.Period;
      this.session = Kvartplata.Domain.CurrentSession;
      this.Client = this.session.Get<Kvartplata.Classes.LsClient>((object) clientLs.ClientId);
      this.PastTime = false;
      this.PastTimeLsSupplier = false;
      this.PastTimeLsService = false;
      this.MonthClosed = new Kvartplata.Classes.Period();
      this.MonthClosed = Kvartplata.Classes.KvrplHelper.GetKvrClose(clientLs.ClientId, Kvartplata.Classes.Options.ComplexPasp, Kvartplata.Classes.Options.ComplexPrior);
      this.NextMonthClosed = new Kvartplata.Classes.Period();
      this.NextMonthClosed = Kvartplata.Classes.KvrplHelper.GetNextPeriod(this.MonthClosed);
      this.LastDayMonthClosed = new DateTime();
      this.LastDayMonthClosed = Kvartplata.Classes.KvrplHelper.GetLastDayPeriod(this.MonthClosed.PeriodName.Value);
      this.InitializeComponent();
      this.CreateComboBoxField = true;
      this.CompanyId = (int) this.session.Get<Kvartplata.Classes.LsClient>((object) this.ClientId).Company.CompanyId;
      this.btnAddRecord.Enabled = true;
      this.btnSave.Enabled = true;
      this.btnDelRecord.Enabled = true;
      ToolTip toolTip = new ToolTip();
      toolTip.SetToolTip((Control) this.btnAddLsFamily, "Добавить новую семью");
      toolTip.SetToolTip((Control) this.btnDelLsFamily, "Удалить текущую семью");
      toolTip.SetToolTip((Control) this.btnSaveLsFamily, "Сохранить изменения");
      toolTip.SetToolTip((Control) this.btnAddFrFamily, "Добавить нового члена семьи");
      toolTip.SetToolTip((Control) this.btnDelFrFamily, "Удалить текущего члена семьи");
      toolTip.SetToolTip((Control) this.btnSaveFrFamily, "Сохранить изменения");
      toolTip.SetToolTip((Control) this.btnAddPersDoc, "Добавить документ");
      toolTip.SetToolTip((Control) this.btnDeletePersDoc, "Удалить документ");
      toolTip.SetToolTip((Control) this.btnNext, "Следующая карточка");
      toolTip.SetToolTip((Control) this.btnPreview, "Предыдущая карточка");
      toolTip.SetToolTip((Control) this.btnFirst, "Первая карточка");
      toolTip.SetToolTip((Control) this.btnLast, "Последняя карточка");
      toolTip.SetToolTip((Control) this.btnAddLsService, "Добавить услугу");
      toolTip.SetToolTip((Control) this.btnDelLsService, "Удалить услугу");
      toolTip.SetToolTip((Control) this.btnSaveLsService, "Сохранить изменения");
      this.dgvLsService.ContextMenuStrip = this.contextMenuStrip1;
      this.chbArhiv.Visible = false;
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(38, 1, this.Client.Company, false))
      {
        if (!Kvartplata.Classes.KvrplHelper.CheckProxy(77, 2, this.Client.Company, false))
          this.tpTitul.Dispose();
        this.tpArenda.Dispose();
        this.tpMessage.Dispose();
      }
      this.tsbClient.Enabled = Kvartplata.Classes.KvrplHelper.CheckProxy(38, 2, this.Client.Company, false);
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(34, 1, this.Client.Company, false))
      {
        this.tsbReport.Enabled = false;
        this.tsbKvit.Enabled = false;
        this.tsbKvit2.Enabled = false;
      }
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(41, 1, this.Client.Company, false))
        this.tsbPayment.Enabled = false;
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(42, 1, this.Client.Company, false))
      {
        this.tpCounters.Dispose();
        this.tsbCounter.Enabled = false;
      }
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(43, 1, this.Client.Company, false))
        this.tpQuality.Dispose();
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(44, 1, this.Client.Company, false))
        this.tpAbsence.Dispose();
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(46, 1, this.Client.Company, false))
        this.tpMSP.Dispose();
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(47, 1, this.Client.Company, false))
      {
        this.tpLodgers.Dispose();
        this.tpOwners.Dispose();
      }
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(35, 1, this.Client.Company, false))
        this.tpSaldo.Dispose();
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(35, 2, this.Client.Company, false))
        this.tsbCalc.Enabled = false;
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(39, 1, this.Client.Company, false))
        this.tpOptions.Dispose();
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(40, 1, this.Client.Company, false))
        this.tpService.Dispose();
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(43, 1, this.Client.Company, false))
        this.tpQuality.Dispose();
      try
      {
        this.ShowHideArenda();
      }
      catch
      {
      }
      if (!Kvartplata.Classes.Options.Kvartplata || !Kvartplata.Classes.Options.Arenda)
      {
        this.tsmiLsArenda.Visible = false;
        this.tsmiLsKvartplata.Visible = false;
      }
      if (!Kvartplata.Classes.Options.Arenda)
        this.tsmiContractSearch.Visible = false;
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(61, 1, this.Client.Company, false))
        this.btnPinCode.Enabled = false;
      else
        this.btnPinCode.Enabled = true;
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(64, 1, this.Client.Company, false))
        this.tsbStack.Visible = false;
      this.city = Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(1, this.Client.Company));
      if (this.city == 0)
        this.city = Kvartplata.Classes.Options.City;
      if (this.city != 23 && this.city != 24 && this.city != 16)
        this.tpUZP.Dispose();
      if (!Kvartplata.Classes.Options.RentMSP)
        this.tpRentMSP.Dispose();
      Size primaryMonitorSize = SystemInformation.PrimaryMonitorSize;
      int width = primaryMonitorSize.Width;
      primaryMonitorSize = SystemInformation.PrimaryMonitorSize;
      int height = primaryMonitorSize.Height;
      if (width == 800 && height == 600)
      {
        this.tsbMultiPastTime.Image = (Image) Resources.time_32;
        this.tsbKvit.Image = (Image) Resources.notepad_32;
        this.tsbKvit2.Image = (Image) Resources.notepad_32;
        this.tsbPayment.Image = (Image) Resources.money_32;
        this.tsbFind.Image = (Image) Resources.Search_32;
        this.tsbClient.Image = (Image) Resources.home_32;
        this.tsbCalc.Image = (Image) Resources.calc_32;
        this.tsbReport.Image = (Image) Resources.file_text_32;
        this.tsbDictionary.Image = (Image) Resources.dic_32;
        this.tsbCounter.Image = (Image) Resources.counter_32;
        this.tsbStack.Image = (Image) Resources.network32;
        this.dgvMainCounters.Height = 110;
      }
      Kvartplata.Classes.Options.Company = this.Client.Company;
      this.reloadList = false;
      this.SetGridConfigValueSettings();
    }

    public void SetGridConfigValueSettings()
    {
      this.MySettingsLsParam.ConfigFile = Kvartplata.Classes.Options.PathProfileAppData + "\\State\\config.xml";
      this.MySettingsLsService.ConfigFile = Kvartplata.Classes.Options.PathProfileAppData + "\\State\\config.xml";
      this.MySettingsLsMsp.ConfigFile = Kvartplata.Classes.Options.PathProfileAppData + "\\State\\config.xml";
      this.MySettingsLsPersons.ConfigFile = Kvartplata.Classes.Options.PathProfileAppData + "\\State\\config.xml";
      this.MySettingsLsOwners.ConfigFile = Kvartplata.Classes.Options.PathProfileAppData + "\\State\\config.xml";
      this.MySettingsLsAbs.ConfigFile = Kvartplata.Classes.Options.PathProfileAppData + "\\State\\config.xml";
      this.MySettingsLsCounters.ConfigFile = Kvartplata.Classes.Options.PathProfileAppData + "\\State\\config.xml";
      this.MySettingsLsEvidence.ConfigFile = Kvartplata.Classes.Options.PathProfileAppData + "\\State\\config.xml";
      this.MySettingsLsServiceParam.ConfigFile = Kvartplata.Classes.Options.PathProfileAppData + "\\State\\config.xml";
      this.MySettingsFrFamily.ConfigFile = Kvartplata.Classes.Options.PathProfileAppData + "\\State\\config.xml";
      this.MySettingsMessage.ConfigFile = Kvartplata.Classes.Options.PathProfileAppData + "\\State\\config.xml";
      this.MySettingsAudit.ConfigFile = Kvartplata.Classes.Options.PathProfileAppData + "\\State\\config.xml";
      this.MySettingsSeal.ConfigFile = Kvartplata.Classes.Options.PathProfileAppData + "\\State\\config.xml";
      this.MySettingsDetailEvidence.ConfigFile = Kvartplata.Classes.Options.PathProfileAppData + "\\State\\config.xml";
      this.MySettingsBalance.ConfigFile = Kvartplata.Classes.Options.PathProfileAppData + "\\State\\config.xml";
      this.MySettingsPeni.ConfigFile = Kvartplata.Classes.Options.PathProfileAppData + "\\State\\config.xml";
      this.MySettingsPeni.ConfigFile = Kvartplata.Classes.Options.PathProfileAppData + "\\State\\config.xml";
      this.MySettingsSocSaldo.ConfigFile = Kvartplata.Classes.Options.PathProfileAppData + "\\State\\config.xml";
      this.MySettingsSupplierClient.ConfigFile = Kvartplata.Classes.Options.PathProfileAppData + "\\State\\config.xml";
      this.MySettingsNoteBook.ConfigFile = Kvartplata.Classes.Options.PathProfileAppData + "\\State\\config.xml";
      this.MySettingsPersonsWork.ConfigFile = Kvartplata.Classes.Options.PathProfileAppData + "\\State\\config.xml";
      this.MySettingsBond.ConfigFile = Kvartplata.Classes.Options.PathProfileAppData + "\\State\\config.xml";
      this.MySettingsParamForeign.ConfigFile = Kvartplata.Classes.Options.PathProfileAppData + "\\State\\config.xml";
    }

    private void FrmClientCard_Load(object sender, EventArgs e)
    {
      this.LoadUpPanel();
      this.LoadArenda();
      this.LoadTitul((short) 1);
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(38, 2, this.Client.Company, false))
        this.TitulSetReadOnly(Kvartplata.Classes.KvrplHelper.CheckProxy(77, 2, this.Client.Company, false));
      else
        this.TitulSetReadOnly(false);
    }

    private void FrmClientCard_FormClosing(object sender, FormClosingEventArgs e)
    {
    }

    private void FrmClientCard_KeyDown(object sender, KeyEventArgs e)
    {
      if (e.KeyCode == Keys.F12 && Kvartplata.Classes.KvrplHelper.CheckProxy(42, 2, (Kvartplata.Classes.Company) null, true))
        new FrmMain(Kvartplata.Classes.Options.Provider, Kvartplata.Classes.Options.BaseName, Kvartplata.Classes.Options.Host, Kvartplata.Classes.Options.Login, Kvartplata.Classes.Options.Pwd, Convert.ToInt16(Kvartplata.Classes.Options.Complex.ComplexId)).Show();
      if (e.KeyCode != Keys.F11 || this.city != 28)
        return;
      FrmQuickPay frmQuickPay = new FrmQuickPay(this.Client);
      int num = (int) frmQuickPay.ShowDialog();
      frmQuickPay.Dispose();
    }

    private void FrmClientCard_Shown(object sender, EventArgs e)
    {
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(78, 1, this.Client.Company, false) || !Kvartplata.Classes.Options.CollectiveDevice)
        this.tpPayWork.Parent = (Control) null;
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(78, 2, this.Client.Company, false))
        this.dgvWorkDistribute.ReadOnly = true;
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(78, 1, this.Client.Company, false) && !Kvartplata.Classes.KvrplHelper.CheckProxy(79, 1, this.Client.Company, false))
        this.tpPayWork.Parent = (Control) null;
      if (this.city != 23 && this.city != 24)
        return;
      this.cbMSPReceiptType.Visible = true;
      this.lblMSPReceiptType.Visible = true;
    }

    public void LoadSettingsLsService()
    {
      this.MySettingsLsService.Load();
      foreach (DataGridViewColumn column in (BaseCollection) this.dgvLsService.Columns)
        this.MySettingsLsService.GetMySettings(column);
    }

    private void LoadService()
    {
      this.InsertRecord = false;
      this.btnAddLsService.Enabled = true;
      this.btnDelLsService.Enabled = true;
      this.btnSaveLsService.Enabled = false;
      this.tsbMultiPastTime.Enabled = false;
      this.cbShowAnotherOrg.Enabled = true;
      this.InitService = true;
      string str1 = "";
      string str2 = "";
      str1 = !(Kvartplata.Classes.Options.SortService == " s.ServiceId") ? "Service.ServiceName" : "Service.ServiceId";
      if (!this.cbShowAnotherOrg.Checked)
        str2 = " and ls.Service.ServiceId not in (select Service_id from ServiceParam where Company_id={3} and Complex.IdFk={4} and SendRent=1)";
      this.session.CreateQuery("from Service").List();
      IList<LsService> lsServiceList1 = (IList<LsService>) new List<LsService>();
      IQuery query;
      if (!this.PastTimeLsService)
      {
        if (this.Arhiv)
          query = this.session.CreateQuery(string.Format("select ls from LsService ls,Service s where ls.Service=s and ls.Client.ClientId={0} and ls.Period.PeriodId=0 and ls.Service.ServiceId<>0 and ls.Complex.IdFk={1} " + str2 + " order by " + Kvartplata.Classes.Options.SortService + ",ls.DBeg", (object) this.Client.ClientId, (object) Kvartplata.Classes.Options.Complex.IdFk, (object) 0, (object) this.Client.Company.CompanyId, (object) this.Client.Complex.IdFk));
        else
          query = this.session.CreateQuery(string.Format("select ls from LsService ls left join fetch ls.Tariff,Service s where ls.Service=s and ls.Client.ClientId={0} and ls.Period.PeriodId=0 and ls.DEnd>='{1}' and ls.Service.ServiceId<>0 and ls.Complex.IdFk={2} " + str2 + " order by " + Kvartplata.Classes.Options.SortService + ",ls.DBeg", (object) this.Client.ClientId, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(this.NextMonthClosed.PeriodName.Value), (object) Kvartplata.Classes.Options.Complex.IdFk, (object) this.Client.Company.CompanyId, (object) this.Client.Complex.IdFk));
      }
      else if (this.Arhiv)
        query = this.session.CreateQuery(string.Format("select ls from LsService ls,Service s where ls.Service=s and ls.Client.ClientId={0} and ls.Period.PeriodId!={1} and ls.Service.ServiceId<>0 and ls.Complex.IdFk={2} " + str2 + " order by " + Kvartplata.Classes.Options.SortService + ",ls.DBeg", (object) this.Client.ClientId, (object) 0, (object) Kvartplata.Classes.Options.Complex.IdFk, (object) this.Client.Company.CompanyId, (object) this.Client.Complex.IdFk));
      else
        query = this.session.CreateQuery(string.Format("select ls from LsService ls,Service s where ls.Service=s and ls.Client.ClientId={0} and ls.Period.PeriodId={1} and ls.Service.ServiceId<>0 and ls.Complex.IdFk={2} " + str2 + " order by " + Kvartplata.Classes.Options.SortService + ",ls.DBeg", (object) this.Client.ClientId, (object) Kvartplata.Classes.Options.Period.PeriodId, (object) Kvartplata.Classes.Options.Complex.IdFk, (object) this.Client.Company.CompanyId, (object) this.Client.Complex.IdFk));
      this.OldListLsService = (IList<LsService>) new List<LsService>();
      this.OldListLsService = query.List<LsService>();
      this.session.Clear();
      IList<LsService> lsServiceList2 = query.List<LsService>();
      this.dgvLsService.Columns.Clear();
      this.dgvLsService.DataSource = (object) null;
      this.dgvLsService.DataSource = (object) lsServiceList2;
      int index = 0;
      foreach (LsService lsService in (List<LsService>) this.dgvLsService.DataSource)
      {
        lsService.IsEdit = false;
        lsService.OldHashCode = lsService.GetHashCode();
        lsService.IsInsert = false;
        this.OldListLsService[index].IsEdit = false;
        this.OldListLsService[index].IsInsert = false;
        this.OldListLsService[index].OldHashCode = lsService.OldHashCode;
        ++index;
      }
      DateTime now1 = DateTime.Now;
      this.dgvLsServiceLoadComboBoxFieldG();
      DateTime now2 = DateTime.Now;
      string executablePath = Application.ExecutablePath;
      StreamWriter streamWriter = new StreamWriter(executablePath.Remove(executablePath.LastIndexOf("\\"), executablePath.Length - executablePath.LastIndexOf("\\")) + "\\debug.log", true, Encoding.Default);
      streamWriter.WriteLine(string.Format("service {0}", (object) (now1 - now2)));
      streamWriter.Close();
      this.InitService = false;
      this.MySettingsLsService.GridName = "LsService";
      this.LoadSettingsLsService();
      this.ucLsSupplier1.LsClient = this.Client;
      if (this.dgvLsService.CurrentRow == null)
        return;
      this.LoadLsSupplier(this.dgvLsService.CurrentRow.Index);
    }

    private void dgvLsServiceLoadComboBoxField()
    {
      Kvartplata.Classes.MaskDateColumn maskDateColumn1 = new Kvartplata.Classes.MaskDateColumn();
      maskDateColumn1.Name = "MDBeg";
      maskDateColumn1.HeaderText = "Новая Дата начала";
      this.dgvLsService.Columns.Add((DataGridViewColumn) maskDateColumn1);
      Kvartplata.Classes.MaskDateColumn maskDateColumn2 = new Kvartplata.Classes.MaskDateColumn();
      maskDateColumn2.Name = "MDEnd";
      maskDateColumn2.HeaderText = "Новая Дата окончания";
      this.dgvLsService.Columns.Add((DataGridViewColumn) maskDateColumn2);
      IList<Kvartplata.Classes.Service> serviceList = this.session.CreateQuery(string.Format("select s from Service s,ServiceParam sp where sp.Service_id=s.ServiceId and s.Root=0 and s.ServiceId<>0 and sp.Company_id={0} and sp.Complex.IdFk={1} order by " + Kvartplata.Classes.Options.SortService, (object) this.Client.Company.CompanyId, (object) this.Client.Complex.IdFk)).List<Kvartplata.Classes.Service>();
      DataGridViewComboBoxCell viewComboBoxCell1 = new DataGridViewComboBoxCell();
      viewComboBoxCell1.DisplayStyleForCurrentCellOnly = true;
      viewComboBoxCell1.ValueMember = "ServiceId";
      viewComboBoxCell1.DisplayMember = "ServiceName";
      viewComboBoxCell1.DataSource = (object) serviceList;
      DataGridViewColumn dataGridViewColumn1 = (DataGridViewColumn) new DataGridViewComboBoxColumn();
      dataGridViewColumn1.CellTemplate = (DataGridViewCell) viewComboBoxCell1;
      dataGridViewColumn1.HeaderText = "Наименование услуги";
      dataGridViewColumn1.Name = "SName";
      this.dgvLsService.Columns.Add(dataGridViewColumn1);
      DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn) new DataGridViewTextBoxColumn();
      dataGridViewColumn2.HeaderText = "Номер варианта";
      dataGridViewColumn2.Name = "TId";
      dataGridViewColumn2.ReadOnly = true;
      this.dgvLsService.Columns.Add(dataGridViewColumn2);
      DataGridViewColumn dataGridViewColumn3 = (DataGridViewColumn) new DataGridViewComboBoxColumn();
      dataGridViewColumn3.HeaderText = "Вариант услуги";
      dataGridViewColumn3.Name = "TName";
      dataGridViewColumn3.ReadOnly = true;
      this.dgvLsService.Columns.Add(dataGridViewColumn3);
      DataGridViewColumn dataGridViewColumn4 = (DataGridViewColumn) new DataGridViewTextBoxColumn();
      dataGridViewColumn4.HeaderText = "Номер норматива";
      dataGridViewColumn4.Name = "NId";
      dataGridViewColumn4.ReadOnly = true;
      this.dgvLsService.Columns.Add(dataGridViewColumn4);
      DataGridViewColumn dataGridViewColumn5 = (DataGridViewColumn) new DataGridViewComboBoxColumn();
      dataGridViewColumn5.HeaderText = "Наименование норматива";
      dataGridViewColumn5.Name = "NName";
      dataGridViewColumn5.ReadOnly = true;
      this.dgvLsService.Columns.Add(dataGridViewColumn5);
      DataGridViewColumn dataGridViewColumn6 = (DataGridViewColumn) new DataGridViewTextBoxColumn();
      dataGridViewColumn6.HeaderText = "Тариф";
      dataGridViewColumn6.Name = "TariffValue";
      this.dgvLsService.Columns.Add(dataGridViewColumn6);
      DataGridViewColumn dataGridViewColumn7 = (DataGridViewColumn) new DataGridViewTextBoxColumn();
      dataGridViewColumn7.HeaderText = "Норматив";
      dataGridViewColumn7.Name = "NormValue";
      this.dgvLsService.Columns.Add(dataGridViewColumn7);
      this.progressBar1.Visible = true;
      this.progressBar1.Value = 0;
      this.progressBar1.Step = 1;
      this.progressBar1.Minimum = 0;
      this.progressBar1.Maximum = this.dgvLsService.Rows.Count;
      CmpParam mainCompanyParam1 = this.GetMainCompanyParam(201);
      CmpParam mainCompanyParam2 = this.GetMainCompanyParam(204);
      this.CompanyIdNorm = Convert.ToInt32((object) mainCompanyParam2.Param_value);
      foreach (DataGridViewRow row in (IEnumerable) this.dgvLsService.Rows)
      {
        this.progressBar1.Value = this.progressBar1.Value + 1;
        row.Cells["MDBeg"].Value = (object) ((LsService) row.DataBoundItem).DBeg.ToShortDateString();
        row.Cells["MDEnd"].Value = (object) ((LsService) row.DataBoundItem).DEnd.ToShortDateString();
        if (((LsService) row.DataBoundItem).Service != null && serviceList.IndexOf(((LsService) row.DataBoundItem).Service) != -1)
          row.Cells["SName"].Value = (object) ((LsService) row.DataBoundItem).Service.ServiceId;
        IList<Tariff> tariffList = (IList<Tariff>) new List<Tariff>();
        DateTime? periodName;
        if (((LsService) row.DataBoundItem).Service != null)
        {
          ISession session = this.session;
          string format = "select t from Tariff t, cmpTariffCost c where c.Tariff_id = t.Tariff_id  and t.Service.ServiceId = {0} and c.Company_id = {1} and t.Service.ServiceId= c.Service.ServiceId";
          object[] objArray = new object[4]{ (object) ((LsService) row.DataBoundItem).Service.ServiceId, (object) Convert.ToInt32((object) mainCompanyParam1.Param_value), null, null };
          int index1 = 2;
          periodName = Kvartplata.Classes.Options.Period.PeriodName;
          // ISSUE: variable of a boxed type
          DateTime local1 = Kvartplata.Classes.KvrplHelper.LastDay(periodName.Value);
          objArray[index1] = (object) local1;
          int index2 = 3;
          periodName = Kvartplata.Classes.Options.Period.PeriodName;
          // ISSUE: variable of a boxed type
          DateTime local2 = periodName.Value;
          objArray[index2] = (object) local2;
          string queryString = string.Format(format, objArray);
          tariffList = session.CreateQuery(queryString).List<Tariff>();
        }
        DataGridViewComboBoxCell viewComboBoxCell2 = new DataGridViewComboBoxCell();
        viewComboBoxCell2.DisplayStyleForCurrentCellOnly = true;
        viewComboBoxCell2.ValueMember = "Tariff_id";
        viewComboBoxCell2.DisplayMember = "Tariff_name";
        viewComboBoxCell2.DataSource = (object) tariffList;
        IList<Norm> normList = (IList<Norm>) new List<Norm>();
        if (((LsService) row.DataBoundItem).Service != null)
        {
          ISession session = this.session;
          string format = "select n from Norm n, CmpNorm c where c.Norm.Norm_id = n.Norm_id  and n.Service.ServiceId = {0} and c.Company_id = {1}";
          object[] objArray = new object[4]{ (object) ((LsService) row.DataBoundItem).Service.ServiceId, (object) Convert.ToInt32((object) mainCompanyParam2.Param_value), null, null };
          int index1 = 2;
          periodName = Kvartplata.Classes.Options.Period.PeriodName;
          // ISSUE: variable of a boxed type
          DateTime local1 = Kvartplata.Classes.KvrplHelper.LastDay(periodName.Value);
          objArray[index1] = (object) local1;
          int index2 = 3;
          periodName = Kvartplata.Classes.Options.Period.PeriodName;
          // ISSUE: variable of a boxed type
          DateTime local2 = periodName.Value;
          objArray[index2] = (object) local2;
          string queryString = string.Format(format, objArray);
          normList = session.CreateQuery(queryString).List<Norm>();
        }
        DataGridViewComboBoxCell viewComboBoxCell3 = new DataGridViewComboBoxCell();
        viewComboBoxCell3.DisplayStyleForCurrentCellOnly = true;
        viewComboBoxCell3.ValueMember = "Norm_id";
        viewComboBoxCell3.DisplayMember = "Norm_name";
        viewComboBoxCell3.DataSource = (object) normList;
        DataGridViewTextBoxCell gridViewTextBoxCell1 = new DataGridViewTextBoxCell();
        DataGridViewTextBoxCell gridViewTextBoxCell2 = new DataGridViewTextBoxCell();
        row.Cells["TariffValue"] = (DataGridViewCell) gridViewTextBoxCell1;
        row.Cells["NormValue"] = (DataGridViewCell) gridViewTextBoxCell2;
        row.Cells["TName"] = (DataGridViewCell) viewComboBoxCell2;
        bool flag1 = false;
        foreach (Tariff tariff in (IEnumerable<Tariff>) tariffList)
        {
          if (((LsService) row.DataBoundItem).Tariff != null && tariff.Tariff_id == ((LsService) row.DataBoundItem).Tariff.Tariff_id)
          {
            flag1 = true;
            break;
          }
        }
        if (((((LsService) row.DataBoundItem).Tariff == null ? 0 : (tariffList.Count > 0 ? 1 : 0)) & (flag1 ? 1 : 0)) != 0)
        {
          row.Cells["TName"].Value = (object) ((LsService) row.DataBoundItem).Tariff.Tariff_id;
          IList<cmpTariffCost> cmpTariffCostList1 = this.session.CreateCriteria(typeof (cmpTariffCost)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Tariff_id", (object) ((LsService) row.DataBoundItem).Tariff.Tariff_id)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Company_id", (object) Convert.ToInt32((object) mainCompanyParam1.Param_value))).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Period.PeriodId", (object) 0)).Add((ICriterion) NHibernate.Criterion.Restrictions.Le("Dbeg", (object) Kvartplata.Classes.KvrplHelper.LastDay(this.NextMonthClosed.PeriodName.Value))).Add((ICriterion) NHibernate.Criterion.Restrictions.Ge("Dend", (object) this.NextMonthClosed.PeriodName.Value)).List<cmpTariffCost>();
          if (cmpTariffCostList1.Count > 0)
          {
            row.Cells["TariffValue"].Value = (object) cmpTariffCostList1[0].Cost;
            row.Cells["TId"].Value = (object) this.session.Get<Tariff>((object) cmpTariffCostList1[0].Tariff_id).Tariff_num;
          }
          else
          {
            IList<cmpTariffCost> cmpTariffCostList2 = this.session.CreateQuery(string.Format("from cmpTariffCost where Tariff_id={0} and Company_id={1} and Period.PeriodId = 0", (object) ((LsService) row.DataBoundItem).Tariff.Tariff_id, (object) Convert.ToInt32((object) mainCompanyParam1.Param_value))).List<cmpTariffCost>();
            if (cmpTariffCostList2.Count > 0)
              row.Cells["TId"].Value = (object) this.session.Get<Tariff>((object) cmpTariffCostList2[0].Tariff_id).Tariff_num;
          }
        }
        row.Cells["NName"] = (DataGridViewCell) viewComboBoxCell3;
        bool flag2 = false;
        foreach (Norm norm in (IEnumerable<Norm>) normList)
        {
          if (((LsService) row.DataBoundItem).Norm != null && norm.Norm_id == ((LsService) row.DataBoundItem).Norm.Norm_id)
          {
            flag2 = true;
            break;
          }
        }
        if (((((LsService) row.DataBoundItem).Norm == null ? 0 : (normList.Count > 0 ? 1 : 0)) & (flag2 ? 1 : 0)) != 0)
        {
          row.Cells["NName"].Value = (object) ((LsService) row.DataBoundItem).Norm.Norm_id;
          ICriteria criteria = this.session.CreateCriteria(typeof (CmpNorm)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Norm.Norm_id", (object) ((LsService) row.DataBoundItem).Norm.Norm_id)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Company_id", (object) Convert.ToInt32((object) mainCompanyParam2.Param_value))).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Period.PeriodId", (object) 0)).Add((ICriterion) NHibernate.Criterion.Restrictions.Le("Dbeg", (object) Kvartplata.Classes.KvrplHelper.LastDay(this.NextMonthClosed.PeriodName.Value)));
          string propertyName = "Dend";
          periodName = this.NextMonthClosed.PeriodName;
          // ISSUE: variable of a boxed type
          DateTime local = periodName.Value;
          SimpleExpression simpleExpression = NHibernate.Criterion.Restrictions.Ge(propertyName, (object) local);
          IList<CmpNorm> cmpNormList1 = criteria.Add((ICriterion) simpleExpression).List<CmpNorm>();
          if (cmpNormList1.Count > 0)
          {
            row.Cells["NormValue"].Value = (object) cmpNormList1[0].Norm_value;
            row.Cells["NId"].Value = (object) this.session.Get<Norm>((object) cmpNormList1[0].Norm.Norm_id).Norm_num;
          }
          else
          {
            IList<CmpNorm> cmpNormList2 = this.session.CreateQuery(string.Format("from CmpNorm where Norm.Norm_id={0} and Company_id={1} and Period.PeriodId = 0", (object) ((LsService) row.DataBoundItem).Norm.Norm_id, (object) Convert.ToInt32((object) mainCompanyParam2.Param_value))).List<CmpNorm>();
            if (cmpNormList2.Count > 0)
              row.Cells["NId"].Value = (object) this.session.Get<Norm>((object) cmpNormList2[0].Norm.Norm_id).Norm_num;
          }
        }
      }
      this.progressBar1.Visible = false;
      if (this.SelectedIndexLsService == -1 || this.SelectedIndexLsService >= this.dgvLsService.Rows.Count)
        return;
      this.dgvLsService.Rows[this.SelectedIndexLsService].Selected = true;
      this.dgvLsService.CurrentCell = this.dgvLsService.Rows[this.SelectedIndexLsService].Cells[0];
    }

    private void dgvLsServiceLoadComboBoxFieldG()
    {
      IList<Kvartplata.Classes.Service> serviceList = this.session.CreateQuery(string.Format("select new Service(s.ServiceId,s.ServiceName) from Service s,ServiceParam sp where sp.Service_id=s.ServiceId and s.Root=0 and s.ServiceId<>0 and sp.Company_id={0} and sp.Complex.IdFk={1} order by " + Kvartplata.Classes.Options.SortService, (object) this.Client.Company.CompanyId, (object) this.Client.Complex.IdFk)).List<Kvartplata.Classes.Service>();
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvLsService, 0, "Дата начала", "MDBeg");
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvLsService, 1, "Дата окончания", "MDEnd");
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvLsService, 1, (IList) serviceList, "ServiceId", "ServiceName", "Наименование услуги", "SName", 7, 150);
      Kvartplata.Classes.KvrplHelper.AddTextBoxColumn(this.dgvLsService, 2, "Номер варианта", "TId", 80, true);
      Kvartplata.Classes.KvrplHelper.AddTextBoxColumn(this.dgvLsService, 3, "Вариант услуги", "TName", 120, true);
      Kvartplata.Classes.KvrplHelper.AddTextBoxColumn(this.dgvLsService, 5, "Номер норматива", "NId", 80, true);
      Kvartplata.Classes.KvrplHelper.AddTextBoxColumn(this.dgvLsService, 6, "Наименование норматива", "NName", 120, true);
      Kvartplata.Classes.KvrplHelper.AddTextBoxColumn(this.dgvLsService, 7, "Тариф", "TariffValue", 100, true);
      Kvartplata.Classes.KvrplHelper.AddTextBoxColumn(this.dgvLsService, 8, "Норматив", "NormValue", 100, true);
      DataGridViewColumn dataGridViewColumn1 = (DataGridViewColumn) new DataGridViewTextBoxColumn();
      dataGridViewColumn1.HeaderText = "";
      dataGridViewColumn1.Name = "TariffId";
      dataGridViewColumn1.Visible = false;
      this.dgvLsService.Columns.Add(dataGridViewColumn1);
      DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn) new DataGridViewTextBoxColumn();
      dataGridViewColumn2.HeaderText = "";
      dataGridViewColumn2.Name = "NormId";
      dataGridViewColumn2.Visible = false;
      this.dgvLsService.Columns.Add(dataGridViewColumn2);
      this.dgvLsService.Columns["Uname"].DisplayIndex = 9;
      this.dgvLsService.Columns["Dedit"].DisplayIndex = 10;
      int index1 = 0;
      if (this.dgvLsService.Rows.Count > 0 && this.dgvLsService.CurrentRow != null)
        index1 = this.dgvLsService.CurrentRow.Index;
      Kvartplata.Classes.KvrplHelper.ViewEdit(this.dgvLsService);
      if (this.dgvLsService.Rows.Count > 0)
        this.dgvLsService.CurrentCell = this.dgvLsService.Rows[index1].Cells[0];
      this.progressBar1.Visible = true;
      this.progressBar1.Value = 0;
      this.progressBar1.Step = 1;
      this.progressBar1.Minimum = 0;
      this.progressBar1.Maximum = this.dgvLsService.Rows.Count;
      CmpParam mainCompanyParam1 = this.GetMainCompanyParam(201);
      CmpParam mainCompanyParam2 = this.GetMainCompanyParam(204);
      this.CompanyIdNorm = Convert.ToInt32((object) mainCompanyParam2.Param_value);
      foreach (DataGridViewRow row in (IEnumerable) this.dgvLsService.Rows)
      {
        this.progressBar1.Value = this.progressBar1.Value + 1;
        DataGridViewCell cell1 = row.Cells["MDBeg"];
        DateTime dateTime = ((LsService) row.DataBoundItem).DBeg;
        string shortDateString1 = dateTime.ToShortDateString();
        cell1.Value = (object) shortDateString1;
        DataGridViewCell cell2 = row.Cells["MDEnd"];
        dateTime = ((LsService) row.DataBoundItem).DEnd;
        string shortDateString2 = dateTime.ToShortDateString();
        cell2.Value = (object) shortDateString2;
        if (((LsService) row.DataBoundItem).Service != null && serviceList.IndexOf(((LsService) row.DataBoundItem).Service) != -1)
          row.Cells["SName"].Value = (object) ((LsService) row.DataBoundItem).Service.ServiceId;
        DataGridViewTextBoxCell gridViewTextBoxCell1 = new DataGridViewTextBoxCell();
        DataGridViewTextBoxCell gridViewTextBoxCell2 = new DataGridViewTextBoxCell();
        DataGridViewTextBoxCell gridViewTextBoxCell3 = new DataGridViewTextBoxCell();
        DataGridViewTextBoxCell gridViewTextBoxCell4 = new DataGridViewTextBoxCell();
        DataGridViewTextBoxCell gridViewTextBoxCell5 = new DataGridViewTextBoxCell();
        DataGridViewTextBoxCell gridViewTextBoxCell6 = new DataGridViewTextBoxCell();
        row.Cells["TariffValue"] = (DataGridViewCell) gridViewTextBoxCell3;
        row.Cells["NormValue"] = (DataGridViewCell) gridViewTextBoxCell4;
        row.Cells["TName"] = (DataGridViewCell) gridViewTextBoxCell1;
        row.Cells["TariffId"] = (DataGridViewCell) gridViewTextBoxCell5;
        DateTime? periodName;
        if (((LsService) row.DataBoundItem).Tariff != null)
        {
          row.Cells["TName"].Value = (object) ((LsService) row.DataBoundItem).Tariff.Tariff_name;
          row.Cells["TariffId"].Value = (object) ((LsService) row.DataBoundItem).Tariff.Tariff_id;
          string str = "";
          ISession session1 = this.session;
          string format1 = "select new ClientParam(c.ParamValue) from ClientParam c, Param p where c.Param.ParamId=p.ParamId and  c.ClientId={0} and c.Period.PeriodId={1} and (p.Param_type={2} or p.Param_type={3})  and c.DEnd >= '{4}' and c.Param.ParamId=104  order by p.Sorter, c.DBeg ";
          object[] objArray1 = new object[5]{ (object) this.Client.ClientId, (object) 0, (object) (short) 3, (object) (short) 0, null };
          int index2 = 4;
          periodName = this.CurrentPeriod.PeriodName;
          string baseFormat1 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(periodName.Value);
          objArray1[index2] = (object) baseFormat1;
          string queryString1 = string.Format(format1, objArray1);
          IList<ClientParam> clientParamList = session1.CreateQuery(queryString1).List<ClientParam>();
          if (clientParamList.Count > 0 && Convert.ToDouble(clientParamList[0].ParamValue) != 2.0 && (Convert.ToDouble(clientParamList[0].ParamValue) != 5.0 && Convert.ToDouble(clientParamList[0].ParamValue) != 6.0) && (Convert.ToDouble(clientParamList[0].ParamValue) != 7.0 && Convert.ToDouble(clientParamList[0].ParamValue) != 8.0 && (Convert.ToDouble(clientParamList[0].ParamValue) != 12.0 && Convert.ToDouble(clientParamList[0].ParamValue) != 14.0)) && (Convert.ToDouble(clientParamList[0].ParamValue) != 15.0 && Convert.ToDouble(clientParamList[0].ParamValue) != 17.0 && (Convert.ToDouble(clientParamList[0].ParamValue) != 18.0 && Convert.ToDouble(clientParamList[0].ParamValue) != 21.0) && Convert.ToDouble(clientParamList[0].ParamValue) != 25.0) && Convert.ToDouble(clientParamList[0].ParamValue) != 59.0)
            str = "and Scheme<>3";
          ISession session2 = this.session;
          string format2 = "select if '" + this.PastTimeLsService.ToString() + "'='true' and exists(select * from cmpTariff c where c.Tariff_id={0} and c.Company_id={1} and c.Period_Id={6} and Service_Id<>{2} and c.DBeg<=(if '{4}'<='{5}' then '{3}' else '{5}' endif) and c.DEnd>=(if '{4}'<='{5}' then '{3}' else '{5}' endif)) then (select sum(Cost) from cmpTariff where Tariff_id={0} and Company_id={1} and Period_Id={6} and Service_Id<>{2} and DBeg<=(if '{4}'<='{5}' then '{3}' else '{5}' endif) and DEnd>=(if '{4}'<='{5}' then '{3}' else '{5}' endif)) else (select sum(Cost) from cmpTariff where Tariff_id={0} and Company_id={1} and Period_Id=0 and Service_Id<>{2} and DBeg<=(if '{4}'<='{5}' then '{3}' else '{5}' endif) and DEnd>=(if '{4}'<='{5}' then '{3}' else '{5}' endif)" + str + ") endif ";
          object[] objArray2 = new object[7];
          objArray2[0] = (object) ((LsService) row.DataBoundItem).Tariff.Tariff_id;
          objArray2[1] = (object) Convert.ToInt32((object) mainCompanyParam1.Param_value);
          objArray2[2] = (object) ((LsService) row.DataBoundItem).Service.ServiceId;
          int index3 = 3;
          periodName = this.NextMonthClosed.PeriodName;
          string baseFormat2 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.KvrplHelper.LastDay(periodName.Value));
          objArray2[index3] = (object) baseFormat2;
          int index4 = 4;
          periodName = this.NextMonthClosed.PeriodName;
          string baseFormat3 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(periodName.Value);
          objArray2[index4] = (object) baseFormat3;
          int index5 = 5;
          string baseFormat4 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(((LsService) row.DataBoundItem).DEnd);
          objArray2[index5] = (object) baseFormat4;
          int index6 = 6;
          // ISSUE: variable of a boxed type
          int periodId = Kvartplata.Classes.Options.Period.PeriodId;
          objArray2[index6] = (object) periodId;
          string queryString2 = string.Format(format2, objArray2);
          double num = Convert.ToDouble(session2.CreateSQLQuery(queryString2).List()[0]);
          if (num > 0.0)
          {
            row.Cells["TariffValue"].Value = (object) num;
            row.Cells["TId"].Value = (object) this.session.Get<Tariff>((object) ((LsService) row.DataBoundItem).Tariff.Tariff_id).Tariff_num;
          }
          else
          {
            IList<cmpTariffCost> cmpTariffCostList = this.session.CreateQuery(string.Format("select new cmpTariffCost(tc.Tariff_id) from cmpTariffCost tc where tc.Company_id={1} and tc.Period.PeriodId = 0 and tc.Tariff_id={0}", (object) ((LsService) row.DataBoundItem).Tariff.Tariff_id, (object) Convert.ToInt32((object) mainCompanyParam1.Param_value))).List<cmpTariffCost>();
            if (cmpTariffCostList.Count > 0)
              row.Cells["TId"].Value = (object) this.session.Get<Tariff>((object) cmpTariffCostList[0].Tariff_id).Tariff_num;
          }
        }
        row.Cells["NName"] = (DataGridViewCell) gridViewTextBoxCell2;
        row.Cells["NormId"] = (DataGridViewCell) gridViewTextBoxCell6;
        if (((LsService) row.DataBoundItem).Norm != null)
        {
          row.Cells["NName"].Value = (object) ((LsService) row.DataBoundItem).Norm.Norm_name;
          row.Cells["NormId"].Value = (object) ((LsService) row.DataBoundItem).Norm.Norm_id;
          ICriteria criteria1 = this.session.CreateCriteria(typeof (CmpNorm)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Norm.Norm_id", (object) ((LsService) row.DataBoundItem).Norm.Norm_id)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Company_id", (object) Convert.ToInt32((object) mainCompanyParam2.Param_value))).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Period.PeriodId", (object) 0));
          string propertyName1 = "Dbeg";
          periodName = this.NextMonthClosed.PeriodName;
          // ISSUE: variable of a boxed type
          DateTime local1 = Kvartplata.Classes.KvrplHelper.LastDay(periodName.Value);
          SimpleExpression simpleExpression1 = NHibernate.Criterion.Restrictions.Le(propertyName1, (object) local1);
          ICriteria criteria2 = criteria1.Add((ICriterion) simpleExpression1);
          string propertyName2 = "Dend";
          periodName = this.NextMonthClosed.PeriodName;
          // ISSUE: variable of a boxed type
          DateTime local2 = periodName.Value;
          SimpleExpression simpleExpression2 = NHibernate.Criterion.Restrictions.Ge(propertyName2, (object) local2);
          IList<CmpNorm> cmpNormList1 = criteria2.Add((ICriterion) simpleExpression2).List<CmpNorm>();
          if (cmpNormList1.Count > 0)
          {
            row.Cells["NormValue"].Value = (object) cmpNormList1[0].Norm_value;
            row.Cells["NId"].Value = (object) this.session.Get<Norm>((object) cmpNormList1[0].Norm.Norm_id).Norm_num;
          }
          else
          {
            IList<CmpNorm> cmpNormList2 = this.session.CreateQuery(string.Format("select new CmpNorm(n.Norm) from CmpNorm n where n.Norm.Norm_id={0} and n.Company_id={1} and n.Period.PeriodId = 0", (object) ((LsService) row.DataBoundItem).Norm.Norm_id, (object) Convert.ToInt32((object) mainCompanyParam2.Param_value))).List<CmpNorm>();
            if (cmpNormList2.Count > 0)
              row.Cells["NId"].Value = (object) this.session.Get<Norm>((object) cmpNormList2[0].Norm.Norm_id).Norm_num;
          }
        }
      }
      this.progressBar1.Visible = false;
      if (this.SelectedIndexLsService == -1 || this.SelectedIndexLsService >= this.dgvLsService.Rows.Count)
        return;
      this.dgvLsService.Rows[this.SelectedIndexLsService].Selected = true;
      this.dgvLsService.CurrentCell = this.dgvLsService.Rows[this.SelectedIndexLsService].Cells[0];
    }

    private void dgvLsServiceLoadComboBoxFieldNew()
    {
      Kvartplata.Classes.MaskDateColumn maskDateColumn1 = new Kvartplata.Classes.MaskDateColumn();
      maskDateColumn1.Name = "MDBeg";
      maskDateColumn1.HeaderText = "Новая Дата начала";
      this.dgvLsService.Columns.Add((DataGridViewColumn) maskDateColumn1);
      Kvartplata.Classes.MaskDateColumn maskDateColumn2 = new Kvartplata.Classes.MaskDateColumn();
      maskDateColumn2.Name = "MDEnd";
      maskDateColumn2.HeaderText = "Новая Дата окончания";
      this.dgvLsService.Columns.Add((DataGridViewColumn) maskDateColumn2);
      IList<Kvartplata.Classes.Service> serviceList = this.session.CreateQuery(string.Format("select s from Service s,ServiceParam sp where sp.Service_id=s.ServiceId and s.Root=0 and s.ServiceId<>0 and sp.Company_id={0} and sp.Complex.IdFk={1} order by " + Kvartplata.Classes.Options.SortService, (object) this.Client.Company.CompanyId, (object) this.Client.Complex.IdFk)).List<Kvartplata.Classes.Service>();
      DataGridViewComboBoxCell viewComboBoxCell1 = new DataGridViewComboBoxCell();
      viewComboBoxCell1.DisplayStyleForCurrentCellOnly = true;
      viewComboBoxCell1.ValueMember = "ServiceId";
      viewComboBoxCell1.DisplayMember = "ServiceName";
      viewComboBoxCell1.DataSource = (object) serviceList;
      DataGridViewColumn dataGridViewColumn1 = (DataGridViewColumn) new DataGridViewComboBoxColumn();
      dataGridViewColumn1.CellTemplate = (DataGridViewCell) viewComboBoxCell1;
      dataGridViewColumn1.HeaderText = "Наименование услуги";
      dataGridViewColumn1.Name = "SName";
      this.dgvLsService.Columns.Add(dataGridViewColumn1);
      DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn) new DataGridViewTextBoxColumn();
      dataGridViewColumn2.HeaderText = "Номер варианта";
      dataGridViewColumn2.Name = "TId";
      dataGridViewColumn2.ReadOnly = true;
      this.dgvLsService.Columns.Add(dataGridViewColumn2);
      DataGridViewColumn dataGridViewColumn3 = (DataGridViewColumn) new DataGridViewComboBoxColumn();
      dataGridViewColumn3.HeaderText = "Вариант услуги";
      dataGridViewColumn3.Name = "TName";
      dataGridViewColumn3.ReadOnly = true;
      this.dgvLsService.Columns.Add(dataGridViewColumn3);
      DataGridViewColumn dataGridViewColumn4 = (DataGridViewColumn) new DataGridViewTextBoxColumn();
      dataGridViewColumn4.HeaderText = "Номер норматива";
      dataGridViewColumn4.Name = "NId";
      dataGridViewColumn4.ReadOnly = true;
      this.dgvLsService.Columns.Add(dataGridViewColumn4);
      DataGridViewColumn dataGridViewColumn5 = (DataGridViewColumn) new DataGridViewComboBoxColumn();
      dataGridViewColumn5.HeaderText = "Наименование норматива";
      dataGridViewColumn5.Name = "NName";
      dataGridViewColumn5.ReadOnly = true;
      this.dgvLsService.Columns.Add(dataGridViewColumn5);
      DataGridViewColumn dataGridViewColumn6 = (DataGridViewColumn) new DataGridViewTextBoxColumn();
      dataGridViewColumn6.HeaderText = "Тариф";
      dataGridViewColumn6.Name = "TariffValue";
      this.dgvLsService.Columns.Add(dataGridViewColumn6);
      DataGridViewColumn dataGridViewColumn7 = (DataGridViewColumn) new DataGridViewTextBoxColumn();
      dataGridViewColumn7.HeaderText = "Норматив";
      dataGridViewColumn7.Name = "NormValue";
      this.dgvLsService.Columns.Add(dataGridViewColumn7);
      this.progressBar1.Visible = true;
      this.progressBar1.Value = 0;
      this.progressBar1.Step = 1;
      this.progressBar1.Minimum = 0;
      this.progressBar1.Maximum = this.dgvLsService.Rows.Count;
      CmpParam mainCompanyParam1 = this.GetMainCompanyParam(201);
      CmpParam mainCompanyParam2 = this.GetMainCompanyParam(204);
      this.CompanyIdNorm = Convert.ToInt32((object) mainCompanyParam2.Param_value);
      IList<Tariff> tariffList = (IList<Tariff>) new List<Tariff>();
      IList<Tariff> source1 = this.session.CreateQuery(string.Format("select t from Tariff t, cmpTariffCost c where c.Tariff_id = t.Tariff_id  and c.Company_id = {1} and t.Service.ServiceId= c.Service.ServiceId", (object) "", (object) Convert.ToInt32((object) mainCompanyParam1.Param_value), (object) Kvartplata.Classes.KvrplHelper.LastDay(Kvartplata.Classes.Options.Period.PeriodName.Value), (object) Kvartplata.Classes.Options.Period.PeriodName.Value)).List<Tariff>();
      IList<Norm> normList = (IList<Norm>) new List<Norm>();
      IList<Norm> source2 = this.session.CreateQuery(string.Format("select n from Norm n, CmpNorm c where c.Norm.Norm_id = n.Norm_id and c.Company_id = {1}", (object) "", (object) Convert.ToInt32((object) mainCompanyParam2.Param_value), (object) Kvartplata.Classes.KvrplHelper.LastDay(Kvartplata.Classes.Options.Period.PeriodName.Value), (object) Kvartplata.Classes.Options.Period.PeriodName.Value)).List<Norm>();
      this.session.CreateQuery("from Service").List();
      IList<cmpTariffCost> source3 = this.session.CreateQuery(string.Format("from cmpTariffCost where Company_id={0} and Period.PeriodId={1} and Dbeg <= '{2}' and Dend >= '{3}'", (object) Convert.ToInt32((object) mainCompanyParam1.Param_value), (object) 0, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.KvrplHelper.LastDay(this.NextMonthClosed.PeriodName.Value)), (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(this.NextMonthClosed.PeriodName.Value))).List<cmpTariffCost>();
      IList<cmpTariffCost> cmpTariffCostList = this.session.CreateQuery(string.Format("from cmpTariffCost where  Company_id={1} and Period.PeriodId = 0", (object) "", (object) Convert.ToInt32((object) mainCompanyParam1.Param_value))).List<cmpTariffCost>();
      IList<CmpNorm> source4 = this.session.CreateCriteria(typeof (CmpNorm)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Company_id", (object) Convert.ToInt32((object) mainCompanyParam2.Param_value))).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Period.PeriodId", (object) 0)).Add((ICriterion) NHibernate.Criterion.Restrictions.Le("Dbeg", (object) Kvartplata.Classes.KvrplHelper.LastDay(this.NextMonthClosed.PeriodName.Value))).Add((ICriterion) NHibernate.Criterion.Restrictions.Ge("Dend", (object) this.NextMonthClosed.PeriodName.Value)).List<CmpNorm>();
      IList<CmpNorm> cmpNormList = this.session.CreateQuery(string.Format("from CmpNorm where  Company_id={1} and Period.PeriodId = 0", (object) "", (object) Convert.ToInt32((object) mainCompanyParam2.Param_value))).List<CmpNorm>();
      foreach (DataGridViewRow row1 in (IEnumerable) this.dgvLsService.Rows)
      {
        DataGridViewRow row = row1;
        this.progressBar1.Value = this.progressBar1.Value + 1;
        row.Cells["MDBeg"].Value = (object) ((LsService) row.DataBoundItem).DBeg.ToShortDateString();
        row.Cells["MDEnd"].Value = (object) ((LsService) row.DataBoundItem).DEnd.ToShortDateString();
        if (((LsService) row.DataBoundItem).Service != null && serviceList.IndexOf(((LsService) row.DataBoundItem).Service) != -1)
          row.Cells["SName"].Value = (object) ((LsService) row.DataBoundItem).Service.ServiceId;
        DataGridViewComboBoxCell viewComboBoxCell2 = new DataGridViewComboBoxCell();
        viewComboBoxCell2.DisplayStyleForCurrentCellOnly = true;
        viewComboBoxCell2.ValueMember = "Tariff_id";
        viewComboBoxCell2.DisplayMember = "Tariff_name";
        viewComboBoxCell2.DataSource = (object) source1;
        DataGridViewComboBoxCell viewComboBoxCell3 = new DataGridViewComboBoxCell();
        viewComboBoxCell3.DisplayStyleForCurrentCellOnly = true;
        viewComboBoxCell3.ValueMember = "Norm_id";
        viewComboBoxCell3.DisplayMember = "Norm_name";
        viewComboBoxCell3.DataSource = (object) source2;
        DataGridViewTextBoxCell gridViewTextBoxCell1 = new DataGridViewTextBoxCell();
        DataGridViewTextBoxCell gridViewTextBoxCell2 = new DataGridViewTextBoxCell();
        row.Cells["TariffValue"] = (DataGridViewCell) gridViewTextBoxCell1;
        row.Cells["NormValue"] = (DataGridViewCell) gridViewTextBoxCell2;
        row.Cells["TName"] = (DataGridViewCell) viewComboBoxCell2;
        bool flag1 = false;
        foreach (Tariff tariff in (IEnumerable<Tariff>) source1)
        {
          if (((LsService) row.DataBoundItem).Tariff != null && tariff.Tariff_id == ((LsService) row.DataBoundItem).Tariff.Tariff_id)
          {
            flag1 = true;
            break;
          }
        }
        if (((((LsService) row.DataBoundItem).Tariff == null ? 0 : (source1.Count > 0 ? 1 : 0)) & (flag1 ? 1 : 0)) != 0)
        {
          row.Cells["TName"].Value = (object) ((LsService) row.DataBoundItem).Tariff.Tariff_id;
          if (source3.Where<cmpTariffCost>((Func<cmpTariffCost, bool>) (t1 => t1.Tariff_id == ((LsService) row.DataBoundItem).Tariff.Tariff_id)).ToList<cmpTariffCost>().Count > 0)
          {
            row.Cells["TariffValue"].Value = (object) source3.Where<cmpTariffCost>((Func<cmpTariffCost, bool>) (t1 => t1.Tariff_id == ((LsService) row.DataBoundItem).Tariff.Tariff_id)).ToList<cmpTariffCost>()[0].Cost;
            row.Cells["TId"].Value = (object) source1.Where<Tariff>((Func<Tariff, bool>) (t1 => t1.Tariff_id == ((LsService) row.DataBoundItem).Tariff.Tariff_id)).ToList<Tariff>()[0].Tariff_num;
          }
          else if (cmpTariffCostList.Count > 0)
            row.Cells["TId"].Value = (object) source1.Where<Tariff>((Func<Tariff, bool>) (t1 => t1.Tariff_id == ((LsService) row.DataBoundItem).Tariff.Tariff_id)).ToList<Tariff>()[0].Tariff_num;
        }
        row.Cells["NName"] = (DataGridViewCell) viewComboBoxCell3;
        bool flag2 = false;
        foreach (Norm norm in (IEnumerable<Norm>) source2)
        {
          if (((LsService) row.DataBoundItem).Norm != null && norm.Norm_id == ((LsService) row.DataBoundItem).Norm.Norm_id)
          {
            flag2 = true;
            break;
          }
        }
        if (((((LsService) row.DataBoundItem).Norm == null ? 0 : (source2.Count > 0 ? 1 : 0)) & (flag2 ? 1 : 0)) != 0)
        {
          row.Cells["NName"].Value = (object) ((LsService) row.DataBoundItem).Norm.Norm_id;
          if (source4.Where<CmpNorm>((Func<CmpNorm, bool>) (n1 => n1.Norm.Norm_id == ((LsService) row.DataBoundItem).Norm.Norm_id)).ToList<CmpNorm>().Count > 0)
          {
            row.Cells["NormValue"].Value = (object) source4.Where<CmpNorm>((Func<CmpNorm, bool>) (n1 => n1.Norm.Norm_id == ((LsService) row.DataBoundItem).Norm.Norm_id)).ToList<CmpNorm>()[0].Norm_value;
            row.Cells["NId"].Value = (object) source2.Where<Norm>((Func<Norm, bool>) (n1 => n1.Norm_id == ((LsService) row.DataBoundItem).Norm.Norm_id)).ToList<Norm>()[0].Norm_num;
          }
          else if (cmpNormList.Count > 0)
            row.Cells["NId"].Value = (object) source2.Where<Norm>((Func<Norm, bool>) (n1 => n1.Norm_id == ((LsService) row.DataBoundItem).Norm.Norm_id)).ToList<Norm>()[0].Norm_num;
        }
      }
      this.progressBar1.Visible = false;
      if (this.SelectedIndexLsService == -1 || this.SelectedIndexLsService >= this.dgvLsService.Rows.Count)
        return;
      this.dgvLsService.Rows[this.SelectedIndexLsService].Selected = true;
      this.dgvLsService.CurrentCell = this.dgvLsService.Rows[this.SelectedIndexLsService].Cells[0];
    }

    private void InsertService()
    {
      LsService lsService1 = new LsService();
      lsService1.Client = this.Client;
      lsService1.IsInsert = true;
      lsService1.IsEdit = true;
      if (this.PastTimeLsService)
      {
        lsService1.Period = this.CurrentPeriod;
        LsService lsService2 = lsService1;
        DateTime? periodName = this.MonthClosed.PeriodName;
        DateTime dateTime = periodName.Value;
        lsService2.DBeg = dateTime;
        LsService lsService3 = lsService1;
        periodName = this.MonthClosed.PeriodName;
        DateTime lastDayPeriod = Kvartplata.Classes.KvrplHelper.GetLastDayPeriod(periodName.Value);
        lsService3.DEnd = lastDayPeriod;
      }
      else
      {
        lsService1.Period = this.session.Get<Kvartplata.Classes.Period>((object) 0);
        lsService1.DBeg = !(this.CurrentPeriod.PeriodName.Value <= this.MonthClosed.PeriodName.Value) ? this.CurrentPeriod.PeriodName.Value : this.NextMonthClosed.PeriodName.Value.Date;
        lsService1.DEnd = Convert.ToDateTime("31.12.2999");
        if (this.Client.Complex.IdFk == Kvartplata.Classes.Options.ComplexArenda.IdFk)
        {
          IList<LsArenda> lsArendaList = this.session.CreateCriteria(typeof (LsArenda)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient.ClientId", (object) this.Client.ClientId)).List<LsArenda>();
          if (lsArendaList.Count > 0)
          {
            if (lsArendaList[0].DBeg <= lsService1.DBeg && lsArendaList[0].DEnd >= lsService1.DBeg)
              lsService1.DEnd = lsArendaList[0].DEnd;
            else if (lsArendaList[0].DBeg > lsService1.DBeg)
            {
              lsService1.DEnd = lsArendaList[0].DEnd;
              lsService1.DBeg = lsArendaList[0].DBeg;
            }
          }
        }
      }
      if (this.dgvLsService.CurrentRow != null && this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].Cells["SName"].Value != null)
        lsService1.Service = this.session.Get<Kvartplata.Classes.Service>(this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].Cells["SName"].Value);
      IList<LsService> lsServiceList = (IList<LsService>) new List<LsService>();
      if ((uint) this.dgvLsService.Rows.Count > 0U)
        lsServiceList = (IList<LsService>) (this.dgvLsService.DataSource as List<LsService>);
      lsServiceList.Add(lsService1);
      this.dgvLsService.Columns.Clear();
      this.dgvLsService.DataSource = (object) null;
      this.dgvLsService.DataSource = (object) lsServiceList;
      this.dgvLsServiceLoadComboBoxFieldG();
      this.dgvLsService.Rows[this.dgvLsService.Rows.Count - 1].Selected = true;
      this.InsertRecord = true;
      this.dgvLsService.CurrentCell = this.dgvLsService.Rows[this.dgvLsService.Rows.Count - 1].Cells[0];
      this.LoadSettingsLsService();
    }

    private void SaveAllServices()
    {
      bool flag = false;
      foreach (DataGridViewRow row in (IEnumerable) this.dgvLsService.Rows)
      {
        if (((LsService) row.DataBoundItem).IsEdit)
        {
          this.OldLsService = new LsService();
          foreach (LsService lsService in (IEnumerable<LsService>) this.OldListLsService)
          {
            if (lsService.OldHashCode == ((LsService) row.DataBoundItem).OldHashCode)
            {
              this.OldLsService = lsService;
              break;
            }
          }
          this.InsertRecord = ((LsService) row.DataBoundItem).IsInsert;
          this.dgvLsService.Rows[row.Index].Selected = true;
          this.dgvLsService.CurrentCell = row.Cells[0];
          Application.DoEvents();
          if (!this.SaveService())
            flag = true;
          else
            ((LsService) row.DataBoundItem).IsEdit = false;
        }
      }
      if (flag)
        return;
      this.LoadService();
    }

    private bool SaveService()
    {
      if (this.dgvLsService.CurrentRow == null)
        return true;
      this.session.Clear();
      DataGridViewRow dataGridViewRow = new DataGridViewRow();
      DataGridViewRow row = this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index];
      LsService lsService = new LsService();
      lsService.Client = this.Client;
      lsService.Uname = Kvartplata.Classes.Options.Login;
      lsService.Dedit = DateTime.Now.Date;
      lsService.Complex = Kvartplata.Classes.Options.Complex;
      lsService.Period = !this.PastTimeLsService ? this.session.Get<Kvartplata.Classes.Period>((object) 0) : this.CurrentPeriod;
      if (this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].Cells["SName"].Value != null)
      {
        lsService.Service = (Kvartplata.Classes.Service) this.session.CreateQuery(string.Format("from Service where ServiceId={0}", this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].Cells["SName"].Value)).UniqueResult();
        if (this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].Cells["TariffId"].Value != null)
          lsService.Tariff = this.session.Get<Tariff>(this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].Cells["TariffId"].Value);
        else if (this.PastTimeLsService)
        {
          lsService.Tariff = (Tariff) null;
        }
        else
        {
          int num = (int) MessageBox.Show("Нельзя сохранить услугу без варианта в настоящем времени! Если Вы хотите закрыть услугу проставьте дату окончания.", "Внимание", MessageBoxButtons.OK);
          return false;
        }
        lsService.Norm = this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].Cells["NormId"].Value == null ? (Norm) null : this.session.Get<Norm>(this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].Cells["NormId"].Value);
        try
        {
          lsService.DBeg = Convert.ToDateTime(row.Cells["MDBeg"].Value);
        }
        catch
        {
          int num = (int) MessageBox.Show("Некорректный формат даты!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          return false;
        }
        try
        {
          lsService.DEnd = Convert.ToDateTime(row.Cells["MDEnd"].Value);
        }
        catch
        {
          int num = (int) MessageBox.Show("Некорректный формат даты!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          return false;
        }
        if (lsService.DBeg > lsService.DEnd)
        {
          int num = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. дата начала больше даты окончания", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          return !this.InsertRecord;
        }
        DateTime? periodName;
        if (!this.PastTimeLsService)
        {
          if (!this.InsertRecord && lsService.DBeg <= this.LastDayMonthClosed && lsService.DBeg != this.OldLsService.DBeg)
          {
            int num = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            this.session.Clear();
            this.session = Kvartplata.Domain.CurrentSession;
            return true;
          }
          if (!this.InsertRecord && (this.OldLsService.DBeg < this.LastDayMonthClosed && this.OldLsService.DEnd < this.LastDayMonthClosed))
          {
            int num = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            this.session.Clear();
            this.session = Kvartplata.Domain.CurrentSession;
            return true;
          }
          if (!this.InsertRecord && (this.OldLsService.DBeg < this.LastDayMonthClosed && (this.OldLsService.DBeg != lsService.DBeg || (int) this.OldLsService.Service.ServiceId != (int) lsService.Service.ServiceId || (this.OldLsService.Tariff != null ? this.OldLsService.Tariff.Tariff_id : 0) != (lsService.Tariff != null ? lsService.Tariff.Tariff_id : 0) || (this.OldLsService.Norm != null ? this.OldLsService.Norm.Norm_id : 0) != (lsService.Norm != null ? lsService.Norm.Norm_id : 0)) || this.OldLsService.DEnd < this.LastDayMonthClosed && (this.OldLsService.DEnd != lsService.DEnd || (int) this.OldLsService.Service.ServiceId != (int) lsService.Service.ServiceId || (this.OldLsService.Tariff != null ? this.OldLsService.Tariff.Tariff_id : 0) != (lsService.Tariff != null ? lsService.Tariff.Tariff_id : 0) || (this.OldLsService.Norm != null ? this.OldLsService.Norm.Norm_id : 0) != (lsService.Norm != null ? lsService.Norm.Norm_id : 0))))
          {
            int num = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            this.session.Clear();
            this.session = Kvartplata.Domain.CurrentSession;
            return true;
          }
          if (lsService.DEnd < this.LastDayMonthClosed)
          {
            int num = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. дата окончания принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            this.session.Clear();
            this.session = Kvartplata.Domain.CurrentSession;
            return !this.InsertRecord;
          }
          int num1;
          if (this.InsertRecord)
          {
            DateTime dbeg = lsService.DBeg;
            periodName = this.NextMonthClosed.PeriodName;
            num1 = periodName.HasValue ? (dbeg < periodName.GetValueOrDefault() ? 1 : 0) : 0;
          }
          else
            num1 = 0;
          if (num1 != 0)
          {
            int num2 = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            this.session.Clear();
            this.session = Kvartplata.Domain.CurrentSession;
            return false;
          }
        }
        else
        {
          DateTime dbeg = lsService.DBeg;
          periodName = this.MonthClosed.PeriodName;
          DateTime lastDayPeriod1 = Kvartplata.Classes.KvrplHelper.GetLastDayPeriod(periodName.Value);
          int num1;
          if (!(dbeg > lastDayPeriod1))
          {
            DateTime dend = lsService.DEnd;
            periodName = this.MonthClosed.PeriodName;
            DateTime lastDayPeriod2 = Kvartplata.Classes.KvrplHelper.GetLastDayPeriod(periodName.Value);
            num1 = dend > lastDayPeriod2 ? 1 : 0;
          }
          else
            num1 = 1;
          if (num1 != 0)
          {
            int num2 = (int) MessageBox.Show("Не могу сохранить текущую запись! Проверьте корректность введённых дат", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            this.session.Clear();
            this.session = Kvartplata.Domain.CurrentSession;
            return !this.InsertRecord;
          }
          periodName = this.CurrentPeriod.PeriodName;
          DateTime dateTime = periodName.Value;
          periodName = this.MonthClosed.PeriodName;
          DateTime lastDayPeriod3 = Kvartplata.Classes.KvrplHelper.GetLastDayPeriod(periodName.Value);
          if (dateTime < lastDayPeriod3)
          {
            int num2 = (int) MessageBox.Show("Не могу сохранить текущую запись! Проверьте корректность введённых дат", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            this.session.Clear();
            this.session = Kvartplata.Domain.CurrentSession;
            return !this.InsertRecord;
          }
          periodName = this.MonthClosed.PeriodName;
          if (Kvartplata.Classes.KvrplHelper.GetLastDayPeriod(periodName.Value) - lsService.DBeg > new TimeSpan(730, 0, 0, 0) && MessageBox.Show("Дата начала отличается от даты закрытого периода более, чем на 2 года. Продолжить сохранение? ", "Внимание", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.No)
          {
            this.session.Clear();
            this.session = Kvartplata.Domain.CurrentSession;
            return false;
          }
        }
        if (lsService.Norm == null)
        {
          int num1;
          if (((this.OldLsService.Service != null ? (int) this.OldLsService.Service.ServiceId : 0) != (int) lsService.Service.ServiceId || (this.OldLsService.Tariff != null ? this.OldLsService.Tariff.Tariff_id : 0) != (lsService.Tariff != null ? lsService.Tariff.Tariff_id : 0) || (this.OldLsService.Norm != null ? this.OldLsService.Norm.Norm_id : 0) != (lsService.Norm != null ? lsService.Norm.Norm_id : 0)) && lsService.Tariff != null)
          {
            int count;
            if (this.PastTime)
            {
              count = this.session.CreateQuery(string.Format("from CmpNorm c, Norm n where c.Norm.Norm_id = n.Norm_id  and n.Service.ServiceId = {0} and c.Company_id = {1}  and c.Dbeg = (select max(cc.Dbeg) from CmpNorm cc where cc.Norm.Norm_id = c.Norm_id and cc.Company_id=c.Company_id) ", (object) lsService.Service.ServiceId, (object) this.CompanyIdNorm)).List().Count;
            }
            else
            {
              ISession session = this.session;
              string format = "from CmpNorm c, Norm n where c.Norm.Norm_id = n.Norm_id  and n.Service.ServiceId = {0} and c.Company_id = {1}  and Dbeg <= '{2}' and Dend >= '{3}'";
              object[] objArray = new object[4]{ (object) lsService.Service.ServiceId, (object) this.CompanyIdNorm, null, null };
              int index1 = 2;
              periodName = this.NextMonthClosed.PeriodName;
              string baseFormat1 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.KvrplHelper.LastDay(periodName.Value));
              objArray[index1] = (object) baseFormat1;
              int index2 = 3;
              periodName = this.NextMonthClosed.PeriodName;
              string baseFormat2 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(periodName.Value);
              objArray[index2] = (object) baseFormat2;
              string queryString = string.Format(format, objArray);
              count = session.CreateQuery(queryString).List().Count;
            }
            int num2 = 0;
            num1 = (uint) count > (uint) num2 ? 1 : 0;
          }
          else
            num1 = 0;
          if (num1 != 0 && MessageBox.Show("На текущей записи не заполнен норматив! Сохранить запись?", "Внимание", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
            return false;
        }
        if (this.InsertRecord)
        {
          using (ITransaction transaction = this.session.BeginTransaction())
          {
            try
            {
              this.session.Save((object) lsService);
              this.session.Flush();
              transaction.Commit();
              if (this.PastTimeLsService && Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(32, this.Client.Company)) == 1)
              {
                if (Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(1, this.Client.Company)) == 28)
                {
                  if (MessageBox.Show("Внести основание?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
                  {
                    FrmArgument frmArgument = new FrmArgument();
                    int num1 = (int) frmArgument.ShowDialog();
                    LsService service = lsService;
                    int num2 = 1;
                    string notetext = frmArgument.Argument();
                    int num3 = this.PastTimeLsService ? 1 : 0;
                    periodName = this.MonthClosed.PeriodName;
                    DateTime monthClosed = periodName.Value;
                    Kvartplata.Classes.KvrplHelper.SaveServiceToNoteBook(service, (short) num2, notetext, num3 != 0, monthClosed);
                    frmArgument.Dispose();
                  }
                }
                else
                {
                  LsService service = lsService;
                  int num1 = 1;
                  string notetext = "";
                  int num2 = this.PastTimeLsService ? 1 : 0;
                  periodName = this.MonthClosed.PeriodName;
                  DateTime monthClosed = periodName.Value;
                  Kvartplata.Classes.KvrplHelper.SaveServiceToNoteBook(service, (short) num1, notetext, num2 != 0, monthClosed);
                }
              }
            }
            catch (Exception ex)
            {
              this.session.Clear();
              this.session = Kvartplata.Domain.CurrentSession;
              int num = (int) MessageBox.Show("Не могу сохранить текущую запись", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
              Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
              transaction.Rollback();
              return true;
            }
          }
        }
        if (this.OldLsService != null && !this.InsertRecord)
        {
          try
          {
            this.session.CreateSQLQuery(string.Format("update DBA.LsService set  service_id=:service_id,  dbeg=:dbeg, dend=:dend, tariff_id={1}, norm_id={0},  uname=:uname, dedit=:dedit  where client_id=:client_id and period_id=:period_id and service_id=:service1_id and dbeg=:dbeg1", lsService.Norm != null ? (object) lsService.Norm.Norm_id.ToString() : (object) "null", lsService.Tariff != null ? (object) lsService.Tariff.Tariff_id.ToString() : (object) "null")).SetParameter<short>("service_id", lsService.Service.ServiceId).SetParameter<string>("dbeg", Kvartplata.Classes.KvrplHelper.DateToBaseFormat(lsService.DBeg)).SetParameter<string>("dend", Kvartplata.Classes.KvrplHelper.DateToBaseFormat(lsService.DEnd)).SetParameter<string>("uname", Kvartplata.Classes.Options.Login).SetParameter<string>("dedit", Kvartplata.Classes.KvrplHelper.DateToBaseFormat(DateTime.Now)).SetParameter<int>("client_id", lsService.Client.ClientId).SetParameter<int>("period_id", lsService.Period.PeriodId).SetParameter<short>("service1_id", this.OldLsService.Service.ServiceId).SetParameter<DateTime>("dbeg1", this.OldLsService.DBeg).ExecuteUpdate();
            if (Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(32, this.Client.Company)) == 1)
            {
              LsService service = lsService;
              LsService oldLsService = this.OldLsService;
              int num1 = 2;
              int num2 = this.PastTimeLsService ? 1 : 0;
              periodName = this.MonthClosed.PeriodName;
              DateTime monthClosed = periodName.Value;
              Kvartplata.Classes.KvrplHelper.ChangeServiceToNoteBook(service, oldLsService, (short) num1, num2 != 0, monthClosed);
            }
          }
          catch (Exception ex)
          {
            this.session.Clear();
            this.session = Kvartplata.Domain.CurrentSession;
            int num = (int) MessageBox.Show("Не могу сохранить текущую запись", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
            return true;
          }
        }
        this.InsertRecord = false;
        return true;
      }
      int num4 = (int) MessageBox.Show("Поле услуга не заполнено!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
      return false;
    }

    private bool DelService()
    {
      if (this.dgvLsService.Rows.Count <= 0 || this.dgvLsService.CurrentRow.Index < 0 || MessageBox.Show("Вы уверены, что хотите удалить запись", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) != DialogResult.OK)
        return false;
      DataGridViewRow dataGridViewRow = new DataGridViewRow();
      DataGridViewRow row1 = this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index];
      LsService lsService = new LsService();
      LsService dataBoundItem = (LsService) row1.DataBoundItem;
      int index = this.dgvLsService.CurrentRow.Index;
      bool flag = true;
      foreach (DataGridViewRow row2 in (IEnumerable) this.dgvLsService.Rows)
      {
        if (row2.Index != index && dataBoundItem.DBeg == Convert.ToDateTime(row2.Cells["MDBeg"].Value) && (int) dataBoundItem.Service.ServiceId == (int) Convert.ToInt16(row2.Cells["SName"].Value))
        {
          flag = false;
          break;
        }
      }
      if (flag)
      {
        if (!this.PastTimeLsService)
        {
          if (dataBoundItem.DBeg <= this.LastDayMonthClosed || dataBoundItem.DEnd <= this.LastDayMonthClosed)
          {
            int num = (int) MessageBox.Show("Не могу удалить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            this.session.Clear();
            this.session = Kvartplata.Domain.CurrentSession;
            return false;
          }
        }
        else if (this.CurrentPeriod.PeriodName.Value <= this.MonthClosed.PeriodName.Value)
        {
          int num = (int) MessageBox.Show("Не могу удалить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          return false;
        }
        this.session.Clear();
        this.session = Kvartplata.Domain.CurrentSession;
        dataBoundItem.Period = this.PastTimeLsService ? this.session.Get<Kvartplata.Classes.Period>((object) this.CurrentPeriod.PeriodId) : this.session.Get<Kvartplata.Classes.Period>((object) 0);
        using (ITransaction transaction = this.session.BeginTransaction())
        {
          try
          {
            this.session.Delete((object) dataBoundItem);
            this.session.Flush();
            transaction.Commit();
            if (Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(32, this.Client.Company)) == 1)
              Kvartplata.Classes.KvrplHelper.DeleteServiceFromNoteBook(dataBoundItem, (short) 3, this.PastTimeLsService, this.MonthClosed.PeriodName.Value);
          }
          catch (Exception ex)
          {
            int num = (int) MessageBox.Show("Не могу удалить текущую запись!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
            this.session.Clear();
            this.session = Kvartplata.Domain.CurrentSession;
            transaction.Rollback();
            return false;
          }
        }
        this.session.Clear();
      }
      return true;
    }

    private CmpParam GetMainCompanyParam(int paramId)
    {
      CmpParam cmpParam1 = new CmpParam();
      cmpParam1.Company_id = 0;
      try
      {
        ISession session = this.session;
        string format = " from CmpParam cm where cm.Company_id = {0} and cm.Period.PeriodName=(select max(c.Period.PeriodName) from CmpParam c where c.Period.PeriodId <> 0  and c.Param_id={2} and c.Dbeg <= '{3}' and c.Dend >= '{4}'  and Period.PeriodName >= '{4}')  and cm.Param_id={2} and cm.Dbeg <= '{3}' and cm.Dend >= '{4}' ";
        object[] objArray = new object[5]{ (object) this.Client.Company.CompanyId, (object) 0, (object) paramId, null, null };
        int index1 = 3;
        DateTime? periodName = this.NextMonthClosed.PeriodName;
        string baseFormat1 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.KvrplHelper.LastDay(periodName.Value));
        objArray[index1] = (object) baseFormat1;
        int index2 = 4;
        periodName = this.NextMonthClosed.PeriodName;
        string baseFormat2 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(periodName.Value);
        objArray[index2] = (object) baseFormat2;
        string queryString = string.Format(format, objArray);
        IList<CmpParam> cmpParamList = session.CreateQuery(queryString).List<CmpParam>();
        CmpParam cmpParam2;
        if (cmpParamList.Count <= 0)
          cmpParam2 = this.session.CreateQuery(string.Format(" from CmpParam where Company_id = {0} and Period.PeriodId={1}  and Param_id={2} and Dbeg <= '{3}' and Dend >= '{4}'", (object) this.Client.Company.CompanyId, (object) 0, (object) paramId, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.KvrplHelper.LastDay(this.NextMonthClosed.PeriodName.Value)), (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(this.NextMonthClosed.PeriodName.Value))).List<CmpParam>()[0];
        else
          cmpParam2 = cmpParamList[0];
        cmpParam1 = cmpParam2;
      }
      catch (Exception ex)
      {
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
      }
      return cmpParam1;
    }

    private void dgvLsService_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
    {
      if (e.RowIndex == -1 || e.ColumnIndex == -1 || this.dgvLsService.Rows[e.RowIndex].Cells["SName"].Value == null)
        return;
      if (e.ColumnIndex == 3)
      {
        this.session = Kvartplata.Domain.CurrentSession;
        DateTime? dbeg;
        try
        {
          dbeg = new DateTime?(Convert.ToDateTime(this.dgvLsService.Rows[e.RowIndex].Cells["MDBeg"].Value));
        }
        catch
        {
          dbeg = new DateTime?();
        }
        FrmClientCardChoose clientCardChoose = new FrmClientCardChoose(this.session.Get<Kvartplata.Classes.Service>(this.dgvLsService.Rows[e.RowIndex].Cells["SName"].Value), ((LsService) this.dgvLsService.Rows[e.RowIndex].DataBoundItem).Tariff, this.CompanyId, dbeg);
        clientCardChoose.PastTime = this.PastTimeLsService;
        int num = (int) clientCardChoose.ShowDialog();
        if (clientCardChoose.Id != -1)
        {
          this.dgvLsService.Rows[e.RowIndex].Cells[e.ColumnIndex].Value = (object) this.session.Get<Tariff>((object) clientCardChoose.Id).Tariff_name;
          this.dgvLsService.Rows[e.RowIndex].Cells["TariffId"].Value = (object) clientCardChoose.Id;
          this.dgvLsService.Rows[e.RowIndex].Cells["TId"].Value = (object) clientCardChoose.Num;
          this.dgvLsService.Rows[e.RowIndex].Cells["TariffValue"].Value = (object) clientCardChoose.Value;
          LsService dataBoundItem = (LsService) this.dgvLsService.CurrentRow.DataBoundItem;
          dataBoundItem.IsEdit = true;
          dataBoundItem.Tariff = this.session.Get<Tariff>((object) clientCardChoose.Id);
        }
        clientCardChoose.Dispose();
      }
      if (e.ColumnIndex == 6)
      {
        this.session = Kvartplata.Domain.CurrentSession;
        DateTime? dbeg;
        try
        {
          dbeg = new DateTime?(Convert.ToDateTime(this.dgvLsService.Rows[e.RowIndex].Cells["MDBeg"].Value));
        }
        catch
        {
          dbeg = new DateTime?();
        }
        FrmClientCardChoose clientCardChoose = new FrmClientCardChoose(this.session.Get<Kvartplata.Classes.Service>(this.dgvLsService.Rows[e.RowIndex].Cells["SName"].Value), ((LsService) this.dgvLsService.Rows[e.RowIndex].DataBoundItem).Norm, this.CompanyId, dbeg);
        clientCardChoose.PastTime = this.PastTimeLsService;
        int num = (int) clientCardChoose.ShowDialog();
        if (clientCardChoose.Id != -1)
        {
          this.dgvLsService.Rows[e.RowIndex].Cells[e.ColumnIndex].Value = (object) this.session.Get<Norm>((object) clientCardChoose.Id).Norm_name;
          this.dgvLsService.Rows[e.RowIndex].Cells["NormId"].Value = (object) clientCardChoose.Id;
          this.dgvLsService.Rows[e.RowIndex].Cells["NId"].Value = (object) clientCardChoose.Num;
          this.dgvLsService.Rows[e.RowIndex].Cells["NormValue"].Value = (object) clientCardChoose.Value;
          LsService dataBoundItem = (LsService) this.dgvLsService.CurrentRow.DataBoundItem;
          dataBoundItem.IsEdit = true;
          dataBoundItem.Norm = this.session.Get<Norm>((object) clientCardChoose.Id);
        }
        clientCardChoose.Dispose();
      }
      this.SelectedIndexLsService = e.RowIndex;
      this.LoadLsSupplier(e.RowIndex);
    }

    private void btnPastTimeLsService_Click(object sender, EventArgs e)
    {
      if (!this.PastTimeLsService)
      {
        this.lblPastTimeLsService.Visible = true;
        this.PastTimeLsService = true;
        this.btnPastTimeLsService.BackColor = Color.DarkOrange;
        this.lblPastTimeLsService.ForeColor = Color.DarkOrange;
        this.tmrLsService.Start();
      }
      else
      {
        this.PastTimeLsService = false;
        this.lblPastTimeLsService.Visible = false;
        this.btnPastTimeLsService.BackColor = this.pnLsService.BackColor;
        this.lblPastTimeLsService.ForeColor = this.pnUp.BackColor;
        this.tmrLsService.Stop();
      }
      this.LoadService();
      this.tsmiInPastTime.Visible = !this.PastTimeLsService;
    }

    private void tmrLsService_Tick(object sender, EventArgs e)
    {
      if (this.PastTimeLsService)
      {
        if (this.lblPastTimeLsService.ForeColor == Color.DarkOrange)
          this.lblPastTimeLsService.ForeColor = this.pnUp.BackColor;
        else
          this.lblPastTimeLsService.ForeColor = Color.DarkOrange;
      }
      else
        this.lblPastTimeLsService.ForeColor = Color.Transparent;
    }

    private void LoadLsSupplier(int RowIndex)
    {
      this.ucLsSupplier1.Clear();
      this.ucLsSupplier1.LsService = (LsService) this.dgvLsService.Rows[RowIndex].DataBoundItem;
      this.ucLsSupplier1.CurrentPeriod = this.CurrentPeriod;
      this.ucLsSupplier1.LsClient = this.Client;
      this.ucLsSupplier1.LoadLsSupplier();
    }

    private void dgvLsService_CurrentCellDirtyStateChanged(object sender, EventArgs e)
    {
      if (!this.dgvLsService.IsCurrentCellDirty)
        return;
      this.dgvLsService.CommitEdit(DataGridViewDataErrorContexts.Commit);
      if (this.dgvLsService.CurrentCell.ColumnIndex == this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].Cells["SName"].ColumnIndex)
      {
        DataGridViewTextBoxCell gridViewTextBoxCell1 = new DataGridViewTextBoxCell();
        DataGridViewTextBoxCell gridViewTextBoxCell2 = new DataGridViewTextBoxCell();
        this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].Cells["TName"] = (DataGridViewCell) gridViewTextBoxCell1;
        this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].Cells["NName"] = (DataGridViewCell) gridViewTextBoxCell2;
        this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].Cells["TId"].Value = (object) null;
        this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].Cells["NId"].Value = (object) null;
        this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].Cells["TariffId"].Value = (object) null;
        this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].Cells["NormId"].Value = (object) null;
      }
    }

    private void dgvLsService_CellValueChanged(object sender, DataGridViewCellEventArgs e)
    {
      if (this.dgvLsService.Rows.Count <= 0 || this.dgvLsService.CurrentRow == null || this.dgvLsService.CurrentRow.Index < 0 || this.InitService)
        return;
      DateTime? periodName;
      if (e.ColumnIndex == this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].Cells["TName"].ColumnIndex)
      {
        CmpParam mainCompanyParam = this.GetMainCompanyParam(201);
        IList<cmpTariffCost> cmpTariffCostList1 = (IList<cmpTariffCost>) new List<cmpTariffCost>();
        IList<cmpTariffCost> cmpTariffCostList2;
        if (((LsService) this.dgvLsService.CurrentRow.DataBoundItem).Tariff == null)
        {
          cmpTariffCostList2 = cmpTariffCostList1;
        }
        else
        {
          ICriteria criteria = this.session.CreateCriteria(typeof (cmpTariffCost)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Tariff_id", (object) ((LsService) this.dgvLsService.CurrentRow.DataBoundItem).Tariff.Tariff_id)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Company_id", (object) Convert.ToInt32((object) mainCompanyParam.Param_value))).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Period.PeriodId", (object) 0)).Add((ICriterion) NHibernate.Criterion.Restrictions.Le("Dbeg", (object) Kvartplata.Classes.KvrplHelper.LastDay(this.NextMonthClosed.PeriodName.Value)));
          string propertyName = "Dend";
          periodName = this.NextMonthClosed.PeriodName;
          // ISSUE: variable of a boxed type
          DateTime local = periodName.Value;
          SimpleExpression simpleExpression = NHibernate.Criterion.Restrictions.Ge(propertyName, (object) local);
          cmpTariffCostList2 = criteria.Add((ICriterion) simpleExpression).List<cmpTariffCost>();
        }
        IList<cmpTariffCost> cmpTariffCostList3 = cmpTariffCostList2;
        if (cmpTariffCostList3.Count > 0)
        {
          this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].Cells["TariffValue"].Value = (object) cmpTariffCostList3[0].Cost;
          this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].Cells["TId"].Value = (object) this.session.Get<Tariff>((object) cmpTariffCostList3[0].Tariff_id).Tariff_num;
        }
        this.dgvLsService_CellBeginEdit((object) null, (DataGridViewCellCancelEventArgs) null);
      }
      if (e.ColumnIndex == this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].Cells["NName"].ColumnIndex)
      {
        CmpParam mainCompanyParam = this.GetMainCompanyParam(204);
        IList<CmpNorm> cmpNormList1 = (IList<CmpNorm>) new List<CmpNorm>();
        IList<CmpNorm> cmpNormList2;
        if (((LsService) this.dgvLsService.CurrentRow.DataBoundItem).Norm == null)
        {
          cmpNormList2 = cmpNormList1;
        }
        else
        {
          ICriteria criteria1 = this.session.CreateCriteria(typeof (CmpNorm)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Norm.Norm_id", (object) ((LsService) this.dgvLsService.CurrentRow.DataBoundItem).Norm.Norm_id)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Company_id", (object) Convert.ToInt32((object) mainCompanyParam.Param_value))).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Period.PeriodId", (object) 0));
          string propertyName1 = "Dbeg";
          periodName = this.NextMonthClosed.PeriodName;
          // ISSUE: variable of a boxed type
          DateTime local1 = Kvartplata.Classes.KvrplHelper.LastDay(periodName.Value);
          SimpleExpression simpleExpression1 = NHibernate.Criterion.Restrictions.Le(propertyName1, (object) local1);
          ICriteria criteria2 = criteria1.Add((ICriterion) simpleExpression1);
          string propertyName2 = "Dend";
          periodName = this.NextMonthClosed.PeriodName;
          // ISSUE: variable of a boxed type
          DateTime local2 = periodName.Value;
          SimpleExpression simpleExpression2 = NHibernate.Criterion.Restrictions.Ge(propertyName2, (object) local2);
          cmpNormList2 = criteria2.Add((ICriterion) simpleExpression2).List<CmpNorm>();
        }
        IList<CmpNorm> cmpNormList3 = cmpNormList2;
        if (cmpNormList3.Count > 0)
        {
          this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].Cells["NormValue"].Value = (object) cmpNormList3[0].Norm_value;
          this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].Cells["NId"].Value = (object) this.session.Get<Norm>((object) cmpNormList3[0].Norm.Norm_id).Norm_num;
        }
        this.dgvLsService_CellBeginEdit((object) null, (DataGridViewCellCancelEventArgs) null);
      }
      this.btnDelLsService.Enabled = false;
    }

    private void dgvLsService_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
    {
      if (this.dgvLsService.CurrentRow == null)
        return;
      this.OldLsService = new LsService();
      this.OldLsService.Client = ((LsService) this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].DataBoundItem).Client;
      this.OldLsService.DBeg = ((LsService) this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].DataBoundItem).DBeg;
      this.OldLsService.DEnd = ((LsService) this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].DataBoundItem).DEnd;
      this.OldLsService.Period = ((LsService) this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].DataBoundItem).Period;
      this.OldLsService.Service = ((LsService) this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].DataBoundItem).Service;
      this.OldLsService.Tariff = ((LsService) this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].DataBoundItem).Tariff;
      this.OldLsService.Norm = ((LsService) this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].DataBoundItem).Norm;
      this.OldLsService.Uname = ((LsService) this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].DataBoundItem).Uname;
      this.btnSaveLsService.Enabled = true;
      ((LsService) this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].DataBoundItem).IsEdit = true;
    }

    private void dgvLsService_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
    {
      if (this.dgvLsService.DataSource == null)
        return;
      DataGridViewRow row = (sender as DataGridView).Rows[e.RowIndex];
      DateTime dbeg = ((LsService) row.DataBoundItem).DBeg;
      DateTime? periodName = this.NextMonthClosed.PeriodName;
      DateTime dateTime1 = Kvartplata.Classes.KvrplHelper.LastDay(periodName.Value);
      int num;
      if (dbeg <= dateTime1)
      {
        DateTime dend = ((LsService) row.DataBoundItem).DEnd;
        periodName = this.NextMonthClosed.PeriodName;
        DateTime dateTime2 = periodName.Value;
        num = dend >= dateTime2 ? 1 : 0;
      }
      else
        num = 0;
      if (num != 0)
      {
        row.DefaultCellStyle.BackColor = Color.PapayaWhip;
        row.DefaultCellStyle.ForeColor = Color.Black;
      }
      else
      {
        row.DefaultCellStyle.BackColor = Color.FromArgb((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
        row.DefaultCellStyle.ForeColor = Color.Gray;
      }
    }

    private void btnAddLsService_Click(object sender, EventArgs e)
    {
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(40, 2, this.Client.Company, true))
        return;
      this.InsertService();
    }

    private void btnDelLsService_Click(object sender, EventArgs e)
    {
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(40, 2, this.Client.Company, true) || !this.DelService())
        return;
      this.LoadService();
    }

    private void btnSaveLsService_Click(object sender, EventArgs e)
    {
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(40, 2, this.Client.Company, true))
        return;
      this.SaveAllServices();
    }

    private void dgvLsService_CellMouseDown(object sender, DataGridViewCellMouseEventArgs e)
    {
      if (e == null || e.RowIndex == -1 || e.ColumnIndex == -1)
        return;
      this.dgvLsService.Rows[e.RowIndex].Selected = true;
      this.dgvLsService.CurrentCell = this.dgvLsService.Rows[e.RowIndex].Cells[e.ColumnIndex];
      this.SelectedIndexLsService = this.dgvLsService.Rows[e.RowIndex].Index;
    }

    private void dgvLsService_KeyUp(object sender, KeyEventArgs e)
    {
      if (this.dgvLsService.Rows.Count <= 0 || ((LsService) this.dgvLsService.CurrentRow.DataBoundItem).Service == null)
        return;
      this.LoadLsSupplier(this.dgvLsService.CurrentRow.Index);
    }

    private void dgvLsService_ColumnWidthChanged(object sender, DataGridViewColumnEventArgs e)
    {
      if (this.MySettingsLsService.FindByName(e.Column.Name) < 0)
        return;
      this.MySettingsLsService.Columns[this.MySettingsLsService.FindByName(e.Column.Name)].Width = e.Column.Width;
      this.MySettingsLsService.Save();
    }

    private void dgvLsService_CellEndEdit(object sender, DataGridViewCellEventArgs e)
    {
      if (this.dgvLsService.CurrentRow == null)
        return;
      LsService dataBoundItem = (LsService) this.dgvLsService.CurrentRow.DataBoundItem;
      dataBoundItem.IsEdit = true;
      if (this.dgvLsService.CurrentCell.Value != null)
      {
        try
        {
          string name = this.dgvLsService.Columns[e.ColumnIndex].Name;
          if (!(name == "SName"))
          {
            if (name == "TName")
              dataBoundItem.Tariff = this.session.Get<Tariff>(this.dgvLsService.CurrentRow.Cells["TariffId"].Value);
          }
          else
            dataBoundItem.Service = this.session.Get<Kvartplata.Classes.Service>(this.dgvLsService.CurrentRow.Cells["SName"].Value);
        }
        catch (Exception ex)
        {
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
        }
      }
    }

    private void BeforeLoadServiceParam()
    {
      IList<Kvartplata.Classes.Service> serviceList1 = (IList<Kvartplata.Classes.Service>) new List<Kvartplata.Classes.Service>();
      IList<Kvartplata.Classes.Service> serviceList2 = this.session.CreateQuery(string.Format("select s from Service s,ServiceParam sp where sp.Service_id=s.ServiceId and s.Root=0 and s.ServiceId<>0 and sp.Company_id={0}  and sp.Complex.IdFk={1} order by " + Kvartplata.Classes.Options.SortService, (object) this.Client.Company.CompanyId, (object) this.Client.Complex.IdFk)).List<Kvartplata.Classes.Service>();
      serviceList2.Insert(0, new Kvartplata.Classes.Service((short) 0, "Общая услуга"));
      serviceList2.Insert(0, new Kvartplata.Classes.Service((short) -1, ""));
      this.cmbService.DataSource = (object) serviceList2;
      this.cmbService.ValueMember = "ServiceId";
      this.cmbService.DisplayMember = "ServiceName";
    }

    private void LoadServiceParam()
    {
      this.btnAddRecord.Enabled = true;
      this.btnDelRecord.Enabled = true;
      this.btnSave.Enabled = false;
      this.tsbMultiPastTime.DropDown = (ToolStripDropDown) null;
      this.tsbMultiPastTime.Enabled = true;
      this.chbArhiv.Visible = true;
      this.cbShowAnotherOrg.Enabled = true;
      this.InsertRecord = false;
      this.session.Clear();
      this.session = Kvartplata.Domain.CurrentSession;
      IList<LsServiceParam> lsServiceParamList = (IList<LsServiceParam>) new List<LsServiceParam>();
      string str1 = "";
      string str2 = "";
      string str3 = "";
      if ((Kvartplata.Classes.Service) this.cmbService.SelectedItem != null && (int) ((Kvartplata.Classes.Service) this.cmbService.SelectedItem).ServiceId != -1)
        str1 = " and sp.Service.ServiceId={1}";
      if (!this.cbShowAnotherOrg.Checked)
        str2 = " and sp.Service.ServiceId not in (select Service_id from ServiceParam where Company_id={3} and Complex.IdFk={4} and SendRent=1)";
      if (this.Client.Complex.IdFk == Kvartplata.Classes.Options.Complex.IdFk)
        str3 = "and p.Param_type=4";
      if (this.Client.Complex.IdFk == Kvartplata.Classes.Options.ComplexArenda.IdFk)
        str3 = "and p.Param_type in (4,6)";
      IQuery query;
      if (!this.PastTime)
      {
        if (!this.Arhiv)
          query = this.session.CreateQuery(string.Format("select sp from LsServiceParam sp,Param p where sp.Param.ParamId=p.ParamId and sp.LsClient.ClientId={0} and sp.Period.PeriodId=0 " + str3 + str1 + str2 + " and sp.DEnd>='{2}' order by p.Sorter,sp.DBeg", (object) this.Client.ClientId, (object) ((Kvartplata.Classes.Service) this.cmbService.SelectedItem).ServiceId, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(this.NextMonthClosed.PeriodName.Value), (object) this.Client.Company.CompanyId, (object) this.Client.Complex.IdFk));
        else
          query = this.session.CreateQuery(string.Format("select sp from LsServiceParam sp,Param p where sp.Param.ParamId=p.ParamId and sp.LsClient.ClientId={0} and sp.Period.PeriodId=0 " + str3 + str1 + str2 + " order by p.Sorter,sp.DBeg", (object) this.Client.ClientId, (object) ((Kvartplata.Classes.Service) this.cmbService.SelectedItem).ServiceId, (object) 0, (object) this.Client.Company.CompanyId, (object) this.Client.Complex.IdFk));
      }
      else
        query = this.session.CreateQuery(string.Format("select sp from LsServiceParam sp,Param p where sp.Param.ParamId=p.ParamId and sp.LsClient.ClientId={0} " + str1 + str2 + " and sp.Period.PeriodId={2} " + str3 + " order by p.Sorter,sp.DBeg", (object) this.Client.ClientId, (object) ((Kvartplata.Classes.Service) this.cmbService.SelectedItem).ServiceId, (object) Kvartplata.Classes.Options.Period.PeriodId, (object) this.Client.Company.CompanyId, (object) this.Client.Complex.IdFk));
      this.dgvServiceParam.Columns.Clear();
      this.dgvServiceParam.DataSource = (object) null;
      this.dgvServiceParam.DataSource = (object) query.List<LsServiceParam>();
      this.session.Clear();
      this.oldListServiceParam = (IList<LsServiceParam>) new List<LsServiceParam>();
      this.oldListServiceParam = query.List<LsServiceParam>();
      int index = 0;
      foreach (LsServiceParam lsServiceParam in (List<LsServiceParam>) this.dgvServiceParam.DataSource)
      {
        lsServiceParam.IsEdit = false;
        lsServiceParam.OldHashCode = lsServiceParam.GetHashCode();
        this.oldListServiceParam[index].IsEdit = false;
        this.oldListServiceParam[index].OldHashCode = lsServiceParam.OldHashCode;
        ++index;
      }
      this.SetViewServiceParam();
      this.dgvServiceParam.Focus();
      this.MySettingsLsServiceParam.GridName = "LsServiceParam";
      this.LoadSettingsLsServiceParam();
    }

    private void LoadSettingsLsServiceParam()
    {
      this.MySettingsLsServiceParam.Load();
      foreach (DataGridViewColumn column in (BaseCollection) this.dgvServiceParam.Columns)
        this.MySettingsLsServiceParam.GetMySettings(column);
    }

    public void SetViewServiceParam()
    {
      this.session = Kvartplata.Domain.CurrentSession;
      IList<Param> objList1 = (IList<Param>) new List<Param>();
      IList<Param> objList2 = this.Client.Complex.IdFk != Kvartplata.Classes.Options.Complex.IdFk ? this.session.CreateCriteria(typeof (Param)).Add((ICriterion) NHibernate.Criterion.Restrictions.Or((ICriterion) NHibernate.Criterion.Restrictions.Eq("Param_type", (object) (short) 4), (ICriterion) NHibernate.Criterion.Restrictions.Eq("Param_type", (object) (short) 6))).AddOrder(Order.Asc("Sorter")).List<Param>() : this.session.CreateCriteria(typeof (Param)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Param_type", (object) (short) 4)).AddOrder(Order.Asc("Sorter")).List<Param>();
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvServiceParam, 0, "Дата начала", "DBeg");
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvServiceParam, 1, "Дата окончания", "DEnd");
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvServiceParam, 2, (IList) objList2, "ParamId", "ParamName", "Наименование", "PName", 7, 300);
      Kvartplata.Classes.KvrplHelper.AddTextBoxColumn(this.dgvServiceParam, 3, "Значение", "PValue", 300, false);
      this.dgvServiceParam.Columns["UName"].DisplayIndex = 4;
      this.dgvServiceParam.Columns["DEdit"].DisplayIndex = 5;
      Kvartplata.Classes.KvrplHelper.ViewEdit(this.dgvServiceParam);
      if ((Kvartplata.Classes.Service) this.cmbService.SelectedItem == null || (int) ((Kvartplata.Classes.Service) this.cmbService.SelectedItem).ServiceId == -1)
      {
        IList<Kvartplata.Classes.Service> serviceList = this.session.CreateQuery(string.Format("select s from Service s,ServiceParam sp where sp.Service_id=s.ServiceId and s.Root=0 and s.ServiceId<>0 and sp.Company_id={0}  and sp.Complex.IdFk={1} order by " + Kvartplata.Classes.Options.SortService, (object) this.Client.Company.CompanyId, (object) this.Client.Complex.IdFk)).List<Kvartplata.Classes.Service>();
        serviceList.Insert(0, new Kvartplata.Classes.Service((short) 0, "Общая услуга"));
        Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvServiceParam, 2, (IList) serviceList, "ServiceId", "ServiceName", "Услуга", "Service", 7, 200);
      }
      this.progressBar1.Visible = true;
      this.progressBar1.Value = 0;
      this.progressBar1.Step = 1;
      this.progressBar1.Minimum = 0;
      this.progressBar1.Maximum = this.dgvServiceParam.Rows.Count;
      IList<CmpNorm> cmpNormList1 = (IList<CmpNorm>) new List<CmpNorm>();
      foreach (DataGridViewRow row in (IEnumerable) this.dgvServiceParam.Rows)
      {
        row.Cells["DBeg"].Value = (object) ((LsServiceParam) row.DataBoundItem).DBeg.ToShortDateString();
        row.Cells["DEnd"].Value = (object) ((LsServiceParam) row.DataBoundItem).DEnd.ToShortDateString();
        this.progressBar1.Value = this.progressBar1.Value + 1;
        if ((int) ((Kvartplata.Classes.Service) this.cmbService.SelectedItem).ServiceId == -1 && ((LsServiceParam) row.DataBoundItem).Service != null)
          row.Cells["Service"].Value = (object) ((LsServiceParam) row.DataBoundItem).Service.ServiceId;
        if (((LsServiceParam) row.DataBoundItem).Param != null)
        {
          row.Cells["PName"].Value = (object) ((LsServiceParam) row.DataBoundItem).Param.ParamId;
          IList<AdmTbl> admTblList = this.session.CreateQuery(string.Format("select s from AdmTbl s,ParamRelation r where s.TableId=r.TableId and r.ParamId={0}", (object) ((LsServiceParam) row.DataBoundItem).Param.ParamId)).List<AdmTbl>();
          if (admTblList.Count > 0)
          {
            if (admTblList[0].ClassName != null)
            {
              try
              {
                if (admTblList[0].ClassName != "CmpNorm")
                {
                  DataGridViewComboBoxCell viewComboBoxCell = new DataGridViewComboBoxCell();
                  viewComboBoxCell.DisplayStyleForCurrentCellOnly = true;
                  viewComboBoxCell.ValueMember = admTblList[0].ClassNameId;
                  viewComboBoxCell.DisplayMember = admTblList[0].ClassNameName;
                  string str = "";
                  if ((int) ((LsServiceParam) row.DataBoundItem).Param.ParamId == 405)
                    str = " where SchemeType=6 order by SchemeId";
                  if ((int) ((LsServiceParam) row.DataBoundItem).Param.ParamId == 403)
                    str = " where SchemeType=16 order by SchemeId";
                  if ((int) ((LsServiceParam) row.DataBoundItem).Param.ParamId == 410)
                    str = " where SchemeType=17 order by SchemeId";
                  viewComboBoxCell.DataSource = (object) this.session.CreateQuery(string.Format("from {0}" + str, (object) admTblList[0].ClassName)).List();
                  viewComboBoxCell.ValueType = typeof (short);
                  row.Cells["PValue"] = (DataGridViewCell) viewComboBoxCell;
                  row.Cells["PValue"].Value = (object) (short) ((LsServiceParam) row.DataBoundItem).ParamValue;
                }
                else
                {
                  DataGridViewComboBoxCell viewComboBoxCell = new DataGridViewComboBoxCell();
                  viewComboBoxCell.DisplayStyleForCurrentCellOnly = true;
                  CmpParam mainCompanyParam = this.GetMainCompanyParam(204);
                  viewComboBoxCell.ValueMember = "NormId";
                  viewComboBoxCell.DisplayMember = "AllInfo";
                  DateTime dt;
                  DateTime dend;
                  if (this.NextMonthClosed.PeriodName.Value <= ((LsServiceParam) row.DataBoundItem).DEnd)
                  {
                    DateTime? periodName = this.NextMonthClosed.PeriodName;
                    dt = Kvartplata.Classes.KvrplHelper.LastDay(periodName.Value);
                    periodName = this.NextMonthClosed.PeriodName;
                    dend = periodName.Value;
                  }
                  else
                  {
                    dt = ((LsServiceParam) row.DataBoundItem).DEnd;
                    dend = ((LsServiceParam) row.DataBoundItem).DEnd;
                  }
                  string str;
                  if (!this.PastTime)
                    str = " and c.Period.PeriodId=0";
                  else
                    str = string.Format(" and ((c.Period.PeriodId=0 and isnull((select Norm.Norm_id from CmpNorm where Company_id=c.Company_id and Period.PeriodId>{0} and Period.PeriodId<={1} and Norm.Norm_id=c.Norm.Norm_id and Dbeg<='{2}'  and Dend>='{3}'),0)=0) or (c.Period.PeriodId>{0} and c.Period.PeriodId<={1}))", (object) this.MonthClosed.PeriodId, (object) Kvartplata.Classes.Options.Period.PeriodId, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(dt), (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(dend));
                  IList<CmpNorm> cmpNormList2 = this.session.CreateQuery(string.Format("select new CmpNorm(c.Norm,c.Norm_value,' ('||n.Norm_num||' '||n.Norm_name||')') from {0} c,Norm n where c.Norm.Norm_id=n.Norm_id and c.Company_id={1} " + str + " and n.Service.ServiceId={2} and c.Dbeg<='{3}'  and c.Dend>='{4}'", (object) admTblList[0].ClassName, (object) Convert.ToInt32((object) mainCompanyParam.Param_value), (object) ((LsServiceParam) row.DataBoundItem).Service.ServiceId, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(dt), (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(dend))).List<CmpNorm>();
                  viewComboBoxCell.DataSource = (object) cmpNormList2;
                  row.Cells["PValue"] = (DataGridViewCell) viewComboBoxCell;
                  row.Cells["PValue"].Value = (object) (int) ((LsServiceParam) row.DataBoundItem).ParamValue;
                }
              }
              catch (Exception ex)
              {
                Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
              }
            }
          }
          else
            row.Cells["PValue"].Value = (object) ((LsServiceParam) row.DataBoundItem).ParamValue;
        }
        this.session.Clear();
      }
      this.progressBar1.Visible = false;
    }

    private void dgvServiceParam_CurrentCellDirtyStateChanged(object sender, EventArgs e)
    {
      if (!this.dgvServiceParam.IsCurrentCellDirty)
        return;
      this.dgvServiceParam.CommitEdit(DataGridViewDataErrorContexts.Commit);
      if (this.dgvServiceParam.CurrentCell.ColumnIndex == this.dgvServiceParam.Rows[this.dgvServiceParam.CurrentRow.Index].Cells["PName"].ColumnIndex)
      {
        if (Convert.ToInt32(this.dgvServiceParam.Rows[this.dgvServiceParam.CurrentRow.Index].Cells["PName"].Value) == 405)
        {
          short num1 = 0;
          if ((int) ((Kvartplata.Classes.Service) this.cmbService.SelectedItem).ServiceId != -1)
            num1 = ((Kvartplata.Classes.Service) this.cmbService.SelectedItem).ServiceId;
          else if (this.dgvServiceParam.CurrentRow.Cells["Service"].Value != null)
            num1 = Convert.ToInt16(this.dgvServiceParam.CurrentRow.Cells["Service"].Value);
          if (this.session.CreateQuery(string.Format("select c from Counter c where c.LsClient.ClientId={0} and c.Service.ServiceId={1} and isnull(c.ArchivesDate,'2999-12-31')>='{2}'", (object) this.Client.ClientId, (object) num1, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Convert.ToDateTime(this.dgvServiceParam.Rows[this.dgvServiceParam.CurrentRow.Index].Cells["DEnd"].Value)))).List<Kvartplata.Classes.Counter>().Count == 0 && this.session.CreateQuery(string.Format("select cn from Counter cn, CounterRelation r where r.Counter=cn and r.LsClient.ClientId={0} and cn.Service.ServiceId={1} and isnull(cn.ArchivesDate, '2999-12-31')>='{2}'", (object) this.Client.ClientId, (object) num1, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Convert.ToDateTime(this.dgvServiceParam.Rows[this.dgvServiceParam.CurrentRow.Index].Cells["DEnd"].Value)))).List<Kvartplata.Classes.Counter>().Count == 0)
          {
            this.dgvServiceParam.CurrentRow.Cells["PValue"].Value = (object) null;
            ((LsServiceParam) this.dgvServiceParam.CurrentRow.DataBoundItem).Param = (Param) null;
            ((LsServiceParam) this.dgvServiceParam.CurrentRow.DataBoundItem).Service = this.session.Get<Kvartplata.Classes.Service>((object) num1);
            int num2 = (int) MessageBox.Show("Нет счетчика по данной услуге", "Внимание", MessageBoxButtons.OK);
            IList<LsServiceParam> lsServiceParamList = (IList<LsServiceParam>) new List<LsServiceParam>();
            if ((uint) this.dgvServiceParam.Rows.Count > 0U)
              lsServiceParamList = (IList<LsServiceParam>) (this.dgvServiceParam.DataSource as List<LsServiceParam>);
            this.dgvServiceParam.Columns.Clear();
            this.dgvServiceParam.DataSource = (object) null;
            this.dgvServiceParam.DataSource = (object) lsServiceParamList;
            this.SetViewServiceParam();
            return;
          }
        }
        IList<AdmTbl> admTblList = this.session.CreateQuery(string.Format("select s from AdmTbl s,ParamRelation r where s.TableId=r.TableId and r.ParamId={0}", this.dgvServiceParam.Rows[this.dgvServiceParam.CurrentRow.Index].Cells["PName"].Value)).List<AdmTbl>();
        if (admTblList.Count > 0)
        {
          if (admTblList[0].ClassName != null)
          {
            try
            {
              if (admTblList[0].ClassName != "CmpNorm")
              {
                DataGridViewComboBoxCell viewComboBoxCell = new DataGridViewComboBoxCell();
                viewComboBoxCell.DisplayStyleForCurrentCellOnly = true;
                viewComboBoxCell.ValueMember = admTblList[0].ClassNameId;
                viewComboBoxCell.DisplayMember = admTblList[0].ClassNameName;
                string str = "";
                if (Convert.ToInt32(this.dgvServiceParam.Rows[this.dgvServiceParam.CurrentRow.Index].Cells["PName"].Value) == 405)
                  str = " where SchemeType=6";
                if (Convert.ToInt32(this.dgvServiceParam.Rows[this.dgvServiceParam.CurrentRow.Index].Cells["PName"].Value) == 403)
                  str = " where SchemeType=16";
                if (Convert.ToInt32(this.dgvServiceParam.Rows[this.dgvServiceParam.CurrentRow.Index].Cells["PName"].Value) == 410)
                  str = " where SchemeType=17";
                viewComboBoxCell.DataSource = (object) this.session.CreateQuery(string.Format("from {0}" + str, (object) admTblList[0].ClassName)).List();
                viewComboBoxCell.ValueType = typeof (short);
                this.dgvServiceParam.CurrentRow.Cells["PValue"] = (DataGridViewCell) viewComboBoxCell;
              }
              else
              {
                DataGridViewComboBoxCell viewComboBoxCell = new DataGridViewComboBoxCell();
                viewComboBoxCell.DisplayStyleForCurrentCellOnly = true;
                CmpParam mainCompanyParam = this.GetMainCompanyParam(204);
                viewComboBoxCell.ValueMember = "NormId";
                viewComboBoxCell.DisplayMember = "AllInfo";
                DateTime dt;
                DateTime dend;
                if (this.NextMonthClosed.PeriodName.Value <= ((LsServiceParam) this.dgvServiceParam.CurrentRow.DataBoundItem).DEnd)
                {
                  dt = Kvartplata.Classes.KvrplHelper.LastDay(this.NextMonthClosed.PeriodName.Value);
                  dend = this.NextMonthClosed.PeriodName.Value;
                }
                else
                {
                  dt = ((LsServiceParam) this.dgvServiceParam.CurrentRow.DataBoundItem).DEnd;
                  dend = ((LsServiceParam) this.dgvServiceParam.CurrentRow.DataBoundItem).DEnd;
                }
                string str;
                if (!this.PastTime)
                  str = " and c.Period.PeriodId=0";
                else
                  str = string.Format(" and ((c.Period.PeriodId=0 and isnull((select Norm.Norm_id from CmpNorm where Company_id=c.Company_id and Period.PeriodId>{0} and Period.PeriodId<={1} and Norm.Norm_id=c.Norm.Norm_id and Dbeg<='{2}'  and Dend>='{3}'),0)=0) or (c.Period.PeriodId>{0} and c.Period.PeriodId<={1}))", (object) this.MonthClosed.PeriodId, (object) Kvartplata.Classes.Options.Period.PeriodId, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(dt), (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(dend));
                IList<CmpNorm> cmpNormList = this.session.CreateQuery(string.Format("select new CmpNorm(c.Norm,c.Norm_value,' ('||n.Norm_num||' '||n.Norm_name||')') from {0} c,Norm n where c.Norm.Norm_id=n.Norm_id and c.Company_id={1} " + str + " and n.Service.ServiceId={2} and c.Dbeg<='{3}'  and c.Dend>='{4}'", (object) admTblList[0].ClassName, (object) Convert.ToInt32((object) mainCompanyParam.Param_value), (object) ((LsServiceParam) this.dgvServiceParam.CurrentRow.DataBoundItem).Service.ServiceId, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(dt), (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(dend))).List<CmpNorm>();
                viewComboBoxCell.DataSource = (object) cmpNormList;
                this.dgvServiceParam.CurrentRow.Cells["PValue"] = (DataGridViewCell) viewComboBoxCell;
                this.dgvServiceParam.CurrentRow.Cells["PValue"].Value = (object) (int) ((LsServiceParam) this.dgvServiceParam.CurrentRow.DataBoundItem).ParamValue;
              }
            }
            catch (Exception ex)
            {
              Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
            }
          }
        }
        else
          this.dgvServiceParam.Rows[this.dgvServiceParam.CurrentRow.Index].Cells["PValue"] = (DataGridViewCell) new DataGridViewTextBoxCell();
      }
    }

    private void InsertServiceParam()
    {
      LsServiceParam lsServiceParam1 = new LsServiceParam();
      lsServiceParam1.LsClient = this.Client;
      lsServiceParam1.IsEdit = true;
      if (!this.PastTime)
      {
        DateTime dateTime1 = this.CurrentPeriod.PeriodName.Value;
        DateTime? periodName = this.MonthClosed.PeriodName;
        DateTime dateTime2 = periodName.Value;
        if (dateTime1 <= dateTime2)
        {
          LsServiceParam lsServiceParam2 = lsServiceParam1;
          periodName = this.NextMonthClosed.PeriodName;
          DateTime date = periodName.Value.Date;
          lsServiceParam2.DBeg = date;
        }
        else
        {
          LsServiceParam lsServiceParam2 = lsServiceParam1;
          periodName = this.CurrentPeriod.PeriodName;
          DateTime dateTime3 = periodName.Value;
          lsServiceParam2.DBeg = dateTime3;
        }
        lsServiceParam1.DEnd = Convert.ToDateTime("31.12.2999");
        lsServiceParam1.Period = this.session.Get<Kvartplata.Classes.Period>((object) 0);
        if (this.Client.Complex.IdFk == Kvartplata.Classes.Options.ComplexArenda.IdFk)
        {
          IList<LsArenda> lsArendaList = this.session.CreateCriteria(typeof (LsArenda)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient.ClientId", (object) this.Client.ClientId)).List<LsArenda>();
          if (lsArendaList.Count > 0)
          {
            if (lsArendaList[0].DBeg <= lsServiceParam1.DBeg && lsArendaList[0].DEnd >= lsServiceParam1.DBeg)
              lsServiceParam1.DEnd = lsArendaList[0].DEnd;
            else if (lsArendaList[0].DBeg > lsServiceParam1.DBeg)
            {
              lsServiceParam1.DEnd = lsArendaList[0].DEnd;
              lsServiceParam1.DBeg = lsArendaList[0].DBeg;
            }
          }
        }
      }
      else
      {
        lsServiceParam1.Period = Kvartplata.Classes.Options.Period;
        LsServiceParam lsServiceParam2 = lsServiceParam1;
        DateTime? periodName = this.MonthClosed.PeriodName;
        DateTime dateTime = periodName.Value;
        lsServiceParam2.DBeg = dateTime;
        LsServiceParam lsServiceParam3 = lsServiceParam1;
        periodName = this.MonthClosed.PeriodName;
        DateTime lastDayPeriod = Kvartplata.Classes.KvrplHelper.GetLastDayPeriod(periodName.Value);
        lsServiceParam3.DEnd = lastDayPeriod;
      }
      IList<LsServiceParam> lsServiceParamList = (IList<LsServiceParam>) new List<LsServiceParam>();
      if ((uint) this.dgvServiceParam.Rows.Count > 0U)
        lsServiceParamList = (IList<LsServiceParam>) (this.dgvServiceParam.DataSource as List<LsServiceParam>);
      lsServiceParamList.Add(lsServiceParam1);
      this.dgvServiceParam.Columns.Clear();
      this.dgvServiceParam.DataSource = (object) null;
      this.dgvServiceParam.DataSource = (object) lsServiceParamList;
      this.InsertRecord = true;
      this.SetViewServiceParam();
    }

    private void SaveAllServiceParam()
    {
      bool flag = false;
      foreach (DataGridViewRow row in (IEnumerable) this.dgvServiceParam.Rows)
      {
        if (((LsServiceParam) row.DataBoundItem).IsEdit)
        {
          this.oldServiceParam = new LsServiceParam();
          foreach (LsServiceParam lsServiceParam in (IEnumerable<LsServiceParam>) this.oldListServiceParam)
          {
            if (lsServiceParam.OldHashCode == ((LsServiceParam) row.DataBoundItem).OldHashCode)
            {
              this.oldServiceParam = lsServiceParam;
              break;
            }
          }
          this.dgvServiceParam.Rows[row.Index].Selected = true;
          this.dgvServiceParam.CurrentCell = row.Cells[0];
          Application.DoEvents();
          if (!this.SaveServiceParam())
            flag = true;
          else
            ((LsServiceParam) row.DataBoundItem).IsEdit = false;
        }
      }
      if (flag)
        return;
      this.LoadServiceParam();
    }

    private bool SaveServiceParam()
    {
      if (this.dgvServiceParam.CurrentRow != null)
      {
        this.session.Clear();
        this.session = Kvartplata.Domain.CurrentSession;
        LsServiceParam lsServiceParam1 = new LsServiceParam();
        LsServiceParam dataBoundItem = (LsServiceParam) this.dgvServiceParam.CurrentRow.DataBoundItem;
        this.InsertRecord = dataBoundItem.UName == null;
        if (this.dgvServiceParam.CurrentRow.Cells["PName"].Value == null)
        {
          int num = (int) MessageBox.Show("Не выбран параметр!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          return false;
        }
        dataBoundItem.Param = this.session.Get<Param>((object) Convert.ToInt16(this.dgvServiceParam.CurrentRow.Cells["PName"].Value));
        if (Convert.ToInt32(this.cmbService.SelectedValue) == -1 && this.dgvServiceParam.CurrentRow.Cells["Service"].Value == null)
        {
          int num = (int) MessageBox.Show("Не выбранa услуга!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          return false;
        }
        dataBoundItem.Service = (int) ((Kvartplata.Classes.Service) this.cmbService.SelectedItem).ServiceId != -1 ? this.session.Get<Kvartplata.Classes.Service>((object) Convert.ToInt16(((Kvartplata.Classes.Service) this.cmbService.SelectedItem).ServiceId)) : this.session.Get<Kvartplata.Classes.Service>((object) Convert.ToInt16(this.dgvServiceParam.CurrentRow.Cells["Service"].Value));
        try
        {
          dataBoundItem.ParamValue = Convert.ToDouble(Kvartplata.Classes.KvrplHelper.ChangeSeparator(this.dgvServiceParam.Rows[this.dgvServiceParam.CurrentRow.Index].Cells["PValue"].Value.ToString()));
        }
        catch
        {
          int num = (int) MessageBox.Show("Некорректный формат значения!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          return false;
        }
        if (dataBoundItem.ParamValue < 0.0 && (int) dataBoundItem.Param.ParamId < 601 && (int) dataBoundItem.Param.ParamId > 611 && (int) dataBoundItem.Param.ParamId != 615)
        {
          int num = (int) MessageBox.Show("Значение не может быть меньше нуля", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          return false;
        }
        if ((int) dataBoundItem.Param.ParamId != 405 && (int) dataBoundItem.Param.ParamId != 407 && !this.PastTime && dataBoundItem.ParamValue == 0.0)
        {
          int num = (int) MessageBox.Show("Значение не может быть равно нулю", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          return false;
        }
        try
        {
          dataBoundItem.DBeg = Convert.ToDateTime(this.dgvServiceParam.CurrentRow.Cells["DBeg"].Value);
          dataBoundItem.DEnd = Convert.ToDateTime(this.dgvServiceParam.CurrentRow.Cells["DEnd"].Value);
        }
        catch
        {
          int num = (int) MessageBox.Show("Некорректный формат даты!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          return false;
        }
        if ((int) dataBoundItem.Param.ParamId == 406 && this.PastTime)
        {
          int num = (int) MessageBox.Show("Ввод данного параметра в прошлом времени невозможен", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          return false;
        }
        if ((int) dataBoundItem.Param.ParamId == 407 && (dataBoundItem.ParamValue < 0.0 || dataBoundItem.ParamValue > 1.0))
        {
          int num = (int) MessageBox.Show("Значение параметра выходит за пределы допустимого диапазона.", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          return false;
        }
        if (this.InsertRecord && ((int) dataBoundItem.Param.ParamId == 403 || (int) dataBoundItem.Param.ParamId == 406))
        {
          dataBoundItem.DBeg = Kvartplata.Classes.KvrplHelper.FirstDay(dataBoundItem.DBeg);
          dataBoundItem.DEnd = Kvartplata.Classes.KvrplHelper.LastDay(dataBoundItem.DEnd);
        }
        dataBoundItem.Period = this.PastTime ? Kvartplata.Classes.Options.Period : this.session.Get<Kvartplata.Classes.Period>((object) 0);
        if (dataBoundItem.DBeg > dataBoundItem.DEnd)
        {
          int num = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. дата начала больше даты окончания", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          return false;
        }
        IList<LsServiceParam> lsServiceParamList1 = (IList<LsServiceParam>) new List<LsServiceParam>();
        string str1 = "";
        string str2 = "";
        string str3 = "";
        if ((Kvartplata.Classes.Service) this.cmbService.SelectedItem != null && (int) ((Kvartplata.Classes.Service) this.cmbService.SelectedItem).ServiceId != -1)
          str1 = " and sp.Service.ServiceId={1}";
        if (!this.cbShowAnotherOrg.Checked)
          str2 = " and sp.Service.ServiceId not in (select Service_id from ServiceParam where Company_id={3} and SendRent=1)";
        if (this.Client.Complex.IdFk == Kvartplata.Classes.Options.Complex.IdFk)
          str3 = "and p.Param_type=4";
        if (this.Client.Complex.IdFk == Kvartplata.Classes.Options.ComplexArenda.IdFk)
          str3 = "and p.Param_type in (4,6)";
        IList<LsServiceParam> lsServiceParamList2;
        if (!this.PastTime)
        {
          if (!this.Arhiv)
            lsServiceParamList2 = this.session.CreateQuery(string.Format("select sp from LsServiceParam sp,Param p where sp.Param.ParamId=p.ParamId and sp.LsClient.ClientId={0} and sp.Period.PeriodId=0 " + str3 + str1 + str2 + " and sp.DEnd>='{2}' order by p.Sorter,sp.DBeg", (object) this.Client.ClientId, (object) ((Kvartplata.Classes.Service) this.cmbService.SelectedItem).ServiceId, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(this.NextMonthClosed.PeriodName.Value), (object) this.Client.Company.CompanyId)).List<LsServiceParam>();
          else
            lsServiceParamList2 = this.session.CreateQuery(string.Format("select sp from LsServiceParam sp,Param p where sp.Param.ParamId=p.ParamId and sp.LsClient.ClientId={0} and sp.Period.PeriodId=0 " + str3 + str1 + str2 + " order by p.Sorter,sp.DBeg", (object) this.Client.ClientId, (object) ((Kvartplata.Classes.Service) this.cmbService.SelectedItem).ServiceId, (object) 0, (object) this.Client.Company.CompanyId)).List<LsServiceParam>();
        }
        else
          lsServiceParamList2 = this.session.CreateQuery(string.Format("select sp from LsServiceParam sp,Param p where sp.Param.ParamId=p.ParamId and sp.LsClient.ClientId={0} " + str1 + str2 + " and sp.Period.PeriodId={2} " + str3 + " order by p.Sorter,sp.DBeg", (object) this.Client.ClientId, (object) ((Kvartplata.Classes.Service) this.cmbService.SelectedItem).ServiceId, (object) Kvartplata.Classes.Options.Period.PeriodId, (object) this.Client.Company.CompanyId)).List<LsServiceParam>();
        LsServiceParam lsServiceParam2 = new LsServiceParam();
        if (!this.InsertRecord && lsServiceParamList2.Count > 0)
          lsServiceParam2 = lsServiceParamList2[this.dgvServiceParam.CurrentRow.Index];
        DateTime? periodName;
        if (!this.PastTime)
        {
          if (this.InsertRecord && (dataBoundItem.DBeg <= this.LastDayMonthClosed || dataBoundItem.DEnd <= this.LastDayMonthClosed))
          {
            int num = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            return false;
          }
          if (!this.InsertRecord && (lsServiceParam2.DBeg <= this.LastDayMonthClosed && lsServiceParam2.DEnd < this.LastDayMonthClosed || dataBoundItem.DEnd < this.LastDayMonthClosed || lsServiceParam2.DBeg > this.LastDayMonthClosed && dataBoundItem.DBeg <= this.LastDayMonthClosed || lsServiceParam2.DBeg <= this.LastDayMonthClosed && (lsServiceParam2.DBeg != dataBoundItem.DBeg || lsServiceParam2.Param != dataBoundItem.Param || lsServiceParam2.Service != dataBoundItem.Service || lsServiceParam2.ParamValue != dataBoundItem.ParamValue)))
          {
            int num = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            return false;
          }
        }
        else
        {
          int num1;
          if (!(dataBoundItem.DBeg > Kvartplata.Classes.KvrplHelper.GetLastDayPeriod(this.MonthClosed.PeriodName.Value)))
          {
            DateTime dend = dataBoundItem.DEnd;
            periodName = this.MonthClosed.PeriodName;
            DateTime lastDayPeriod = Kvartplata.Classes.KvrplHelper.GetLastDayPeriod(periodName.Value);
            num1 = dend > lastDayPeriod ? 1 : 0;
          }
          else
            num1 = 1;
          if (num1 != 0)
          {
            int num2 = (int) MessageBox.Show("Не могу сохранить текущую запись! Проверьте корректность введённых дат", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            return false;
          }
          periodName = Kvartplata.Classes.Options.Period.PeriodName;
          if (periodName.Value <= this.LastDayMonthClosed)
          {
            int num2 = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            return false;
          }
        }
        if (dataBoundItem.DBeg <= DateTime.Now.AddYears(-3) && MessageBox.Show("Дата начала или дата окончания отличается от текущей более, чем на 3 года. Продолжить", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.Cancel)
          return false;
        dataBoundItem.UName = Kvartplata.Classes.Options.Login;
        dataBoundItem.DEdit = DateTime.Now.Date;
        if (this.InsertRecord)
        {
          try
          {
            this.session.Save((object) dataBoundItem);
            this.session.Flush();
            if (this.PastTime && Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(32, this.Client.Company)) == 1)
            {
              if (Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(1, this.Client.Company)) == 28)
              {
                if (MessageBox.Show("Внести основание?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
                {
                  FrmArgument frmArgument = new FrmArgument();
                  int num1 = (int) frmArgument.ShowDialog();
                  LsServiceParam serviceparam = dataBoundItem;
                  Kvartplata.Classes.LsClient client = this.Client;
                  int num2 = 1;
                  string str4 = this.dgvServiceParam.CurrentRow.Cells["PValue"].FormattedValue.ToString();
                  string notetext = frmArgument.Argument();
                  int num3 = this.PastTime ? 1 : 0;
                  periodName = this.MonthClosed.PeriodName;
                  DateTime monthClosed = periodName.Value;
                  Kvartplata.Classes.KvrplHelper.SaveServiceParamToNoteBook(serviceparam, client, (short) num2, str4, notetext, num3 != 0, monthClosed);
                  frmArgument.Dispose();
                }
              }
              else
              {
                LsServiceParam serviceparam = dataBoundItem;
                Kvartplata.Classes.LsClient client = this.Client;
                int num1 = 1;
                string str4 = this.dgvServiceParam.CurrentRow.Cells["PValue"].FormattedValue.ToString();
                string notetext = "";
                int num2 = this.PastTime ? 1 : 0;
                periodName = this.MonthClosed.PeriodName;
                DateTime monthClosed = periodName.Value;
                Kvartplata.Classes.KvrplHelper.SaveServiceParamToNoteBook(serviceparam, client, (short) num1, str4, notetext, num2 != 0, monthClosed);
              }
            }
            this.InsertRecord = false;
          }
          catch (Exception ex)
          {
            int num = (int) MessageBox.Show("Не могу сохранить текущую запись", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
            return false;
          }
        }
        else
        {
          DateTime dbeg = dataBoundItem.DBeg;
          periodName = this.MonthClosed.PeriodName;
          DateTime dateTime1 = periodName.Value.AddMonths(1);
          if (dbeg < dateTime1 && !this.PastTime && (dataBoundItem.DBeg != lsServiceParam2.DBeg || dataBoundItem.ParamValue != lsServiceParam2.ParamValue || dataBoundItem.Param != lsServiceParam2.Param || dataBoundItem.Service != lsServiceParam2.Service))
          {
            int num = (int) MessageBox.Show("Запись из закрытого периода. Разрешено редактирование только даты окончания", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            return false;
          }
          try
          {
            ISQLQuery sqlQuery = this.session.CreateSQLQuery("update DBA.LsServiceParam sp set DBeg=:dbeg,Param_Id=:param,Service_Id=:service,DEnd=:dend,Param_Value=:paramvalue where sp.Client_Id=:client and sp.Period_Id=:period and sp.Service_Id=:oldservice and sp.DBeg=:olddbeg and sp.Param_Id=:oldparam");
            string name1 = "dbeg";
            DateTime dateTime2 = dataBoundItem.DBeg;
            DateTime date1 = dateTime2.Date;
            IQuery query1 = sqlQuery.SetParameter<DateTime>(name1, date1).SetParameter<short>("param", dataBoundItem.Param.ParamId).SetParameter<short>("service", dataBoundItem.Service.ServiceId);
            string name2 = "dend";
            dateTime2 = dataBoundItem.DEnd;
            DateTime date2 = dateTime2.Date;
            IQuery query2 = query1.SetParameter<DateTime>(name2, date2).SetParameter<double>("paramvalue", dataBoundItem.ParamValue).SetParameter<int>("client", this.Client.ClientId).SetParameter<int>("period", dataBoundItem.Period.PeriodId).SetParameter<short>("oldservice", lsServiceParam2.Service.ServiceId);
            string name3 = "olddbeg";
            dateTime2 = lsServiceParam2.DBeg;
            DateTime date3 = dateTime2.Date;
            query2.SetParameter<DateTime>(name3, date3).SetParameter<short>("oldparam", lsServiceParam2.Param.ParamId).ExecuteUpdate();
            if (Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(32, this.Client.Company)) == 1)
            {
              LsServiceParam serviceParam = dataBoundItem;
              LsServiceParam oldServiceParam = lsServiceParam2;
              Kvartplata.Classes.LsClient client = this.Client;
              int num1 = 2;
              string str4 = this.dgvServiceParam.CurrentRow.Cells["PValue"].FormattedValue.ToString();
              int num2 = this.PastTime ? 1 : 0;
              periodName = this.MonthClosed.PeriodName;
              DateTime monthClosed = periodName.Value;
              Kvartplata.Classes.KvrplHelper.ChangeServiceParamToNoteBook(serviceParam, oldServiceParam, client, (short) num1, str4, num2 != 0, monthClosed);
            }
          }
          catch (Exception ex)
          {
            int num = (int) MessageBox.Show("Не могу сохранить текущую запись", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
            return false;
          }
        }
        this.session.Clear();
      }
      return true;
    }

    private void DelServiceParam()
    {
      if (this.dgvServiceParam.Rows.Count <= 0 || this.dgvServiceParam.CurrentRow == null)
        return;
      this.session = Kvartplata.Domain.CurrentSession;
      if (MessageBox.Show("Вы уверены, что хотите удалить запись?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
      {
        LsServiceParam lsServiceParam = new LsServiceParam();
        LsServiceParam dataBoundItem = (LsServiceParam) this.dgvServiceParam.CurrentRow.DataBoundItem;
        if (!this.PastTime)
        {
          if (dataBoundItem.DBeg <= this.LastDayMonthClosed || dataBoundItem.DEnd <= this.LastDayMonthClosed)
          {
            int num = (int) MessageBox.Show("Не могу удалить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            return;
          }
        }
        else if (Kvartplata.Classes.Options.Period.PeriodName.Value <= this.MonthClosed.PeriodName.Value)
        {
          int num = (int) MessageBox.Show("Не могу удалить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          return;
        }
        try
        {
          this.session.Delete((object) dataBoundItem);
          this.session.Flush();
          if (Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(32, this.Client.Company)) == 1)
            Kvartplata.Classes.KvrplHelper.DeleteServiceParamFromNoteBook(dataBoundItem, this.Client, (short) 3, this.dgvServiceParam.CurrentRow.Cells["PValue"].FormattedValue.ToString(), this.PastTime, this.MonthClosed.PeriodName.Value);
        }
        catch (Exception ex)
        {
          int num = (int) MessageBox.Show("Не могу удалить текущую запись!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
        }
      }
      this.session.Clear();
    }

    private void dgvServiceParam_CellMouseDown(object sender, DataGridViewCellMouseEventArgs e)
    {
      if (e.RowIndex == -1 || e.ColumnIndex == -1)
        return;
      this.dgvServiceParam.CurrentCell = this.dgvServiceParam.Rows[e.RowIndex].Cells[e.ColumnIndex];
    }

    private void cmbService_SelectionChangeCommitted(object sender, EventArgs e)
    {
      this.LoadServiceParam();
    }

    private void dgvServiceParam_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
    {
      if (this.dgvServiceParam.DataSource == null)
        return;
      DataGridViewRow row = (sender as DataGridView).Rows[e.RowIndex];
      DateTime dbeg = ((LsServiceParam) row.DataBoundItem).DBeg;
      DateTime? periodName = this.NextMonthClosed.PeriodName;
      DateTime dateTime1 = Kvartplata.Classes.KvrplHelper.LastDay(periodName.Value);
      int num;
      if (dbeg <= dateTime1)
      {
        DateTime dend = ((LsServiceParam) row.DataBoundItem).DEnd;
        periodName = this.NextMonthClosed.PeriodName;
        DateTime dateTime2 = periodName.Value;
        num = dend >= dateTime2 ? 1 : 0;
      }
      else
        num = 0;
      if (num != 0)
      {
        row.DefaultCellStyle.BackColor = Color.PapayaWhip;
        row.DefaultCellStyle.ForeColor = Color.Black;
      }
      else
      {
        row.DefaultCellStyle.BackColor = Color.FromArgb((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
        row.DefaultCellStyle.ForeColor = Color.Gray;
      }
    }

    private void dgvServiceParam_ColumnWidthChanged(object sender, DataGridViewColumnEventArgs e)
    {
      if (this.MySettingsLsServiceParam.FindByName(e.Column.Name) < 0)
        return;
      this.MySettingsLsServiceParam.Columns[this.MySettingsLsServiceParam.FindByName(e.Column.Name)].Width = e.Column.Width;
      this.MySettingsLsServiceParam.Save();
    }

    private void dgvServiceParam_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
    {
      this.btnSave.Enabled = true;
      this.btnDelRecord.Enabled = false;
      ((LsServiceParam) this.dgvServiceParam.CurrentRow.DataBoundItem).IsEdit = true;
    }

    private void dgvServiceParam_CellEndEdit(object sender, DataGridViewCellEventArgs e)
    {
      if (this.dgvServiceParam.CurrentRow == null)
        return;
      LsServiceParam dataBoundItem = (LsServiceParam) this.dgvServiceParam.CurrentRow.DataBoundItem;
      dataBoundItem.IsEdit = true;
      if (this.dgvServiceParam.CurrentCell.Value != null)
      {
        try
        {
          string name = this.dgvServiceParam.Columns[e.ColumnIndex].Name;
          if (!(name == "Service"))
          {
            if (!(name == "PName"))
            {
              if (!(name == "PValue"))
              {
                if (!(name == "DBeg"))
                {
                  if (name == "DEnd")
                  {
                    try
                    {
                      dataBoundItem.DEnd = Convert.ToDateTime(this.dgvServiceParam.CurrentRow.Cells["DEnd"].Value);
                    }
                    catch
                    {
                    }
                  }
                }
                else
                {
                  try
                  {
                    dataBoundItem.DBeg = Convert.ToDateTime(this.dgvServiceParam.CurrentRow.Cells["DBeg"].Value);
                  }
                  catch
                  {
                  }
                }
              }
              else
              {
                try
                {
                  dataBoundItem.ParamValue = Convert.ToDouble(Kvartplata.Classes.KvrplHelper.ChangeSeparator(this.dgvServiceParam.Rows[this.dgvServiceParam.CurrentRow.Index].Cells["PValue"].Value.ToString()));
                }
                catch
                {
                }
              }
            }
            else
              dataBoundItem.Param = this.session.Get<Param>(this.dgvServiceParam.CurrentRow.Cells["PName"].Value);
          }
          else
            dataBoundItem.Service = this.session.Get<Kvartplata.Classes.Service>(this.dgvServiceParam.CurrentRow.Cells["Service"].Value);
        }
        catch (Exception ex)
        {
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
        }
      }
    }

    private void tcntrlService_SelectedIndexChanged(object sender, EventArgs e)
    {
      if (this.tcntrlService.SelectedTab == this.tpLSService)
      {
        this.btnAddRecord.Enabled = false;
        this.btnSave.Enabled = false;
        this.btnDelRecord.Enabled = false;
        this.chbArhiv.Visible = true;
        this.lblPastTimeLsService.Visible = true;
        this.ucLsSupplier1.Clear();
        this.LoadService();
        this.dgvLsService.Focus();
      }
      if (this.tcntrlService.SelectedTab != this.tpServiceParam)
        return;
      this.BeforeLoadServiceParam();
      this.LoadServiceParam();
    }

    private void LoadMsp()
    {
      this.btnAddRecord.Enabled = true;
      this.btnDelRecord.Enabled = true;
      this.btnSave.Enabled = false;
      this.tsbMultiPastTime.Enabled = true;
      this.InsertRecord = false;
      this.session.Clear();
      this.session = Kvartplata.Domain.CurrentSession;
      IList<LsMSPGku> lsMspGkuList = (IList<LsMSPGku>) new List<LsMSPGku>();
      ICriteria criteria = this.PastTime ? (!this.Arhiv ? this.session.CreateCriteria(typeof (LsMSPGku)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Period.PeriodId", (object) this.CurrentPeriod.PeriodId)).AddOrder(Order.Asc("Person.PersonId")).AddOrder(Order.Desc("OnOff")).AddOrder(Order.Asc("MSPId.MSP_id")).AddOrder(Order.Asc("DBeg")) : this.session.CreateCriteria(typeof (LsMSPGku)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).Add((ICriterion) NHibernate.Criterion.Restrictions.Not((ICriterion) NHibernate.Criterion.Restrictions.Eq("Period.PeriodId", (object) 0))).AddOrder(Order.Asc("Person.PersonId")).AddOrder(Order.Desc("OnOff")).AddOrder(Order.Asc("MSPId.MSP_id")).AddOrder(Order.Asc("DBeg"))) : (!this.Arhiv ? this.session.CreateCriteria(typeof (LsMSPGku)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Period.PeriodId", (object) 0)).Add((ICriterion) NHibernate.Criterion.Restrictions.Ge("DEnd", (object) this.NextMonthClosed.PeriodName.Value)).AddOrder(Order.Asc("Person.PersonId")).AddOrder(Order.Desc("OnOff")).AddOrder(Order.Asc("MSPId.MSP_id")).AddOrder(Order.Desc("DBeg")) : this.session.CreateCriteria(typeof (LsMSPGku)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Period.PeriodId", (object) 0)).AddOrder(Order.Asc("Person.PersonId")).AddOrder(Order.Desc("OnOff")).AddOrder(Order.Asc("MSPId.MSP_id")).AddOrder(Order.Desc("DBeg")));
      this.oldListLsMspGku = (IList<LsMSPGku>) new List<LsMSPGku>();
      this.oldListLsMspGku = criteria.List<LsMSPGku>();
      this.session.Clear();
      this.dgvMsp.Columns.Clear();
      this.dgvMsp.DataSource = (object) null;
      this.dgvMsp.DataSource = (object) criteria.List<LsMSPGku>();
      int index = 0;
      foreach (LsMSPGku lsMspGku in (List<LsMSPGku>) this.dgvMsp.DataSource)
      {
        lsMspGku.IsEdit = false;
        lsMspGku.OldHashCode = lsMspGku.GetHashCode();
        this.oldListLsMspGku[index].IsEdit = false;
        this.oldListLsMspGku[index].OldHashCode = lsMspGku.OldHashCode;
        ++index;
      }
      this.dgvMspLoadComboBoxField();
      this.MySettingsLsMsp.GridName = "LsMsp";
      this.LoadSettingsLsMsp();
    }

    private void LoadSettingsLsMsp()
    {
      this.MySettingsLsMsp.Load();
      foreach (DataGridViewColumn column in (BaseCollection) this.dgvMsp.Columns)
        this.MySettingsLsMsp.GetMySettings(column);
    }

    private void SaveAllMsp()
    {
      bool flag = false;
      foreach (DataGridViewRow row in (IEnumerable) this.dgvMsp.Rows)
      {
        if (((LsMSPGku) row.DataBoundItem).IsEdit)
        {
          this.oldLsMspGku = new LsMSPGku();
          foreach (LsMSPGku lsMspGku in (IEnumerable<LsMSPGku>) this.oldListLsMspGku)
          {
            if (lsMspGku.OldHashCode == ((LsMSPGku) row.DataBoundItem).OldHashCode)
            {
              this.oldLsMspGku = lsMspGku;
              break;
            }
          }
          this.dgvMsp.Rows[row.Index].Selected = true;
          this.dgvMsp.CurrentCell = row.Cells[0];
          Application.DoEvents();
          if (!this.SaveMsp())
            flag = true;
          else
            ((LsMSPGku) row.DataBoundItem).IsEdit = false;
        }
      }
      if (flag)
        return;
      this.LoadMsp();
    }

    private bool SaveMsp()
    {
      this.session.Clear();
      if (this.dgvMsp.CurrentRow == null)
        return true;
      DataGridViewRow dataGridViewRow = new DataGridViewRow();
      DataGridViewRow row = this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index];
      if (row.Cells["PName"].Value == null)
      {
        int num = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. не заполнено ключевое поле Льготник", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        return false;
      }
      if (row.Cells["LName"].Value == null)
      {
        int num = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. не заполнен номер льготы", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        return false;
      }
      this.InsertRecord = ((LsMSPGku) row.DataBoundItem).Uname == null;
      LsMSPGku lsMspGku = new LsMSPGku();
      LsMSPGku dataBoundItem = (LsMSPGku) row.DataBoundItem;
      dataBoundItem.LsClient = this.Client;
      dataBoundItem.Uname = Kvartplata.Classes.Options.Login;
      dataBoundItem.Dedit = DateTime.Now.Date;
      dataBoundItem.DBeg = ((LsMSPGku) row.DataBoundItem).DBeg;
      dataBoundItem.DEnd = ((LsMSPGku) row.DataBoundItem).DEnd;
      int? val1;
      if (row.Cells["FName"].Value != null && (uint) (int) row.Cells["FName"].Value > 0U)
      {
        dataBoundItem.FamilyId = this.session.Get<LsFamily>(row.Cells["FName"].Value);
        val1 = new int?(dataBoundItem.FamilyId.FamilyId);
      }
      else
      {
        dataBoundItem.FamilyId = (LsFamily) null;
        val1 = new int?();
      }
      int? val2;
      if (row.Cells["Document"].Value != null && (uint) (int) row.Cells["Document"].Value > 0U)
      {
        dataBoundItem.MSPDocumentId = this.session.Get<MspDocument>(row.Cells["Document"].Value);
        val2 = new int?(dataBoundItem.MSPDocumentId.MSPDocumentId);
      }
      else
      {
        dataBoundItem.MSPDocumentId = (MspDocument) null;
        val2 = new int?();
      }
      int? val3;
      if (row.Cells["Holder"].Value != null && (uint) (int) row.Cells["Holder"].Value > 0U)
      {
        dataBoundItem.Holder = this.session.Get<Person>(row.Cells["Holder"].Value);
        val3 = new int?(dataBoundItem.Holder.PersonId);
      }
      else
      {
        dataBoundItem.Holder = (Person) null;
        val3 = new int?();
      }
      dataBoundItem.Person = this.session.Get<Person>(row.Cells["PName"].Value);
      this.session.Clear();
      dataBoundItem.Period = !this.PastTime ? this.session.Get<Kvartplata.Classes.Period>((object) 0) : this.CurrentPeriod;
      dataBoundItem.MSPId = this.session.Get<DcMSP>(row.Cells["LName"].Value);
      dataBoundItem.OnOff = (short) row.Cells["YesNo"].Value;
      dataBoundItem.OnOffTmpSq = (short) row.Cells["TmpYesNo"].Value;
      try
      {
        dataBoundItem.DBeg = Convert.ToDateTime(row.Cells["MDBeg"].Value);
      }
      catch
      {
        int num = (int) MessageBox.Show("Некорректный формат даты!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        return false;
      }
      try
      {
        dataBoundItem.DEnd = Convert.ToDateTime(row.Cells["MDEnd"].Value);
      }
      catch
      {
        int num = (int) MessageBox.Show("Некорректный формат даты!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        return false;
      }
      if (dataBoundItem.DBeg > dataBoundItem.DEnd)
      {
        int num = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. дата начала больше даты окончания", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        this.session.Clear();
        this.session = Kvartplata.Domain.CurrentSession;
        return !this.InsertRecord;
      }
      if (!this.PastTime)
      {
        if (!this.InsertRecord && dataBoundItem.DBeg <= this.LastDayMonthClosed && dataBoundItem.DBeg != this.oldLsMspGku.DBeg)
        {
          int num = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          return true;
        }
        if (!this.InsertRecord && (this.oldLsMspGku.DBeg < this.LastDayMonthClosed && this.oldLsMspGku.DEnd < this.LastDayMonthClosed))
        {
          int num = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          return true;
        }
        if (!this.InsertRecord && (this.oldLsMspGku.DBeg < this.LastDayMonthClosed && (this.oldLsMspGku.DBeg != dataBoundItem.DBeg || (this.oldLsMspGku.FamilyId != null ? this.oldLsMspGku.FamilyId.FamilyId : 0) != (dataBoundItem.FamilyId != null ? dataBoundItem.FamilyId.FamilyId : 0) || ((this.oldLsMspGku.Holder != null ? this.oldLsMspGku.Holder.PersonId : 0) != (dataBoundItem.Holder != null ? dataBoundItem.Holder.PersonId : 0) || ((this.oldLsMspGku.MSPDocumentId != null ? this.oldLsMspGku.MSPDocumentId.MSPDocumentId : 0) != (dataBoundItem.MSPDocumentId != null ? dataBoundItem.MSPDocumentId.MSPDocumentId : 0) || this.oldLsMspGku.MSPId.MSP_id != dataBoundItem.MSPId.MSP_id || ((int) this.oldLsMspGku.OnOff != (int) dataBoundItem.OnOff || (int) this.oldLsMspGku.OnOffTmpSq != (int) dataBoundItem.OnOffTmpSq) || (this.oldLsMspGku.Person.PersonId != dataBoundItem.Person.PersonId || this.oldLsMspGku.AcceptId != dataBoundItem.AcceptId)))) || this.oldLsMspGku.DEnd < this.LastDayMonthClosed && (this.oldLsMspGku.DEnd != dataBoundItem.DEnd || (this.oldLsMspGku.FamilyId != null ? this.oldLsMspGku.FamilyId.FamilyId : 0) != (dataBoundItem.FamilyId != null ? dataBoundItem.FamilyId.FamilyId : 0) || ((this.oldLsMspGku.Holder != null ? this.oldLsMspGku.Holder.PersonId : 0) != (dataBoundItem.Holder != null ? dataBoundItem.Holder.PersonId : 0) || ((this.oldLsMspGku.MSPDocumentId != null ? this.oldLsMspGku.MSPDocumentId.MSPDocumentId : 0) != (dataBoundItem.MSPDocumentId != null ? dataBoundItem.MSPDocumentId.MSPDocumentId : 0) || this.oldLsMspGku.MSPId.MSP_id != dataBoundItem.MSPId.MSP_id || ((int) this.oldLsMspGku.OnOff != (int) dataBoundItem.OnOff || (int) this.oldLsMspGku.OnOffTmpSq != (int) dataBoundItem.OnOffTmpSq) || this.oldLsMspGku.Person.PersonId != dataBoundItem.Person.PersonId)) || this.oldLsMspGku.AcceptId != dataBoundItem.AcceptId)))
        {
          int num = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          return true;
        }
        if (dataBoundItem.DEnd < this.LastDayMonthClosed)
        {
          int num = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. дата окончания принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          return !this.InsertRecord;
        }
        int num1;
        if (this.InsertRecord)
        {
          DateTime dbeg = dataBoundItem.DBeg;
          DateTime? periodName = this.NextMonthClosed.PeriodName;
          num1 = periodName.HasValue ? (dbeg < periodName.GetValueOrDefault() ? 1 : 0) : 0;
        }
        else
          num1 = 0;
        if (num1 != 0)
        {
          int num2 = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          return false;
        }
      }
      else
      {
        if (dataBoundItem.DBeg > Kvartplata.Classes.KvrplHelper.GetLastDayPeriod(this.MonthClosed.PeriodName.Value) || dataBoundItem.DEnd > Kvartplata.Classes.KvrplHelper.GetLastDayPeriod(this.MonthClosed.PeriodName.Value))
        {
          int num = (int) MessageBox.Show("Не могу сохранить текущую запись. Проверьте корректность дат!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          return !this.InsertRecord;
        }
        DateTime? periodName = this.CurrentPeriod.PeriodName;
        DateTime dateTime = periodName.Value;
        periodName = this.MonthClosed.PeriodName;
        DateTime lastDayPeriod = Kvartplata.Classes.KvrplHelper.GetLastDayPeriod(periodName.Value);
        if (dateTime < lastDayPeriod)
        {
          int num = (int) MessageBox.Show("Не могу сохранить текущую запись. Проверьте корректность дат!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          return !this.InsertRecord;
        }
        periodName = this.MonthClosed.PeriodName;
        if (Kvartplata.Classes.KvrplHelper.GetLastDayPeriod(periodName.Value) - dataBoundItem.DBeg > new TimeSpan(730, 0, 0, 0) && MessageBox.Show("Дата начала отличается от даты закрытого периода более, чем на 2 года. Продолжить сохранение? ", "Внимание", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.No)
        {
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          return false;
        }
      }
      if (this.InsertRecord)
      {
        using (ITransaction transaction = this.session.BeginTransaction())
        {
          try
          {
            this.session.Save((object) dataBoundItem);
            this.session.Flush();
            transaction.Commit();
          }
          catch (Exception ex)
          {
            this.session.Clear();
            this.session = Kvartplata.Domain.CurrentSession;
            int num = (int) MessageBox.Show("Не могу сохранить текущую запись", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
            transaction.Rollback();
            return true;
          }
        }
      }
      if (this.oldLsMspGku != null && !this.InsertRecord)
      {
        try
        {
          this.session.CreateSQLQuery("update DBA.lsMSPGku set  msp_id=:msp_id,  idform_msp=:idform_msp, dbeg=:dbeg, dend=:dend, MSPDocument_id=:MSPDocument_id, holder=:holder,  family_id=:family_id,  OnOff=:OnOff,  OnOff_TmpSq=:OnOff_TmpSq,  uname=:uname, dedit=:dedit,  accept_id=:accept_id  where client_id=:client_id and period_id=:period_id and msp_id=:oldMspId and idform_msp=:oldIdform_msp and dbeg=:olddbeg").SetParameter<int>("msp_id", dataBoundItem.MSPId.MSP_id).SetParameter<int>("idform_msp", dataBoundItem.Person.PersonId).SetParameter<string>("dbeg", Kvartplata.Classes.KvrplHelper.DateToBaseFormat(dataBoundItem.DBeg)).SetParameter<string>("dend", Kvartplata.Classes.KvrplHelper.DateToBaseFormat(dataBoundItem.DEnd)).SetParameter<int?>("MSPDocument_id", val2).SetParameter<int?>("holder", val3).SetParameter<int?>("family_id", val1).SetParameter<short>("OnOff", dataBoundItem.OnOff).SetParameter<short>("OnOff_TmpSq", dataBoundItem.OnOffTmpSq).SetParameter<string>("uname", Kvartplata.Classes.Options.Login).SetParameter<string>("dedit", Kvartplata.Classes.KvrplHelper.DateToBaseFormat(DateTime.Now)).SetParameter<int>("accept_id", dataBoundItem.AcceptId).SetParameter<int>("client_id", dataBoundItem.LsClient.ClientId).SetParameter<int>("period_id", dataBoundItem.Period.PeriodId).SetParameter<int>("oldMspId", this.oldLsMspGku.MSPId.MSP_id).SetParameter<int>("oldIdform_msp", this.oldLsMspGku.Person.PersonId).SetParameter<string>("olddbeg", Kvartplata.Classes.KvrplHelper.DateToBaseFormat(this.oldLsMspGku.DBeg)).ExecuteUpdate();
        }
        catch (Exception ex)
        {
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          int num = (int) MessageBox.Show("Не могу сохранить текущую запись", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
          return true;
        }
      }
      this.oldLsMspGku = dataBoundItem;
      this.InsertRecord = false;
      return true;
    }

    private void InsertMsp()
    {
      LsMSPGku lsMspGku1 = new LsMSPGku();
      lsMspGku1.LsClient = this.Client;
      lsMspGku1.Period = this.session.Get<Kvartplata.Classes.Period>((object) 0);
      lsMspGku1.IsEdit = true;
      lsMspGku1.OnOff = (short) 1;
      lsMspGku1.AcceptId = 0;
      if (this.PastTime)
      {
        LsMSPGku lsMspGku2 = lsMspGku1;
        DateTime? periodName = this.MonthClosed.PeriodName;
        DateTime dateTime = periodName.Value;
        lsMspGku2.DBeg = dateTime;
        LsMSPGku lsMspGku3 = lsMspGku1;
        periodName = this.MonthClosed.PeriodName;
        DateTime lastDayPeriod = Kvartplata.Classes.KvrplHelper.GetLastDayPeriod(periodName.Value);
        lsMspGku3.DEnd = lastDayPeriod;
      }
      else
      {
        lsMspGku1.DBeg = !(this.CurrentPeriod.PeriodName.Value <= this.MonthClosed.PeriodName.Value) ? this.CurrentPeriod.PeriodName.Value : this.NextMonthClosed.PeriodName.Value.Date;
        lsMspGku1.DEnd = Convert.ToDateTime("31.12.2999");
      }
      if (this.PastTime)
        lsMspGku1.Period = this.CurrentPeriod;
      if (this.dgvMsp.CurrentRow != null)
      {
        if (((LsMSPGku) this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].DataBoundItem).FamilyId != null)
          lsMspGku1.FamilyId = this.session.Get<LsFamily>((object) ((LsMSPGku) this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].DataBoundItem).FamilyId.FamilyId);
        else
          lsMspGku1.FamilyId = new LsFamily()
          {
            FamilyId = 0,
            FamilyName = ""
          };
        lsMspGku1.MSPId = ((LsMSPGku) this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].DataBoundItem).MSPId;
        lsMspGku1.Person = ((LsMSPGku) this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].DataBoundItem).Person;
        lsMspGku1.AcceptId = ((LsMSPGku) this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].DataBoundItem).AcceptId;
      }
      lsMspGku1.OnOffTmpSq = lsMspGku1.Person == null ? (short) 1 : (lsMspGku1.Person.Reg.RegId != 2 ? (short) 1 : (short) 0);
      IList<LsMSPGku> lsMspGkuList = (IList<LsMSPGku>) new List<LsMSPGku>();
      if ((uint) this.dgvMsp.Rows.Count > 0U)
        lsMspGkuList = (IList<LsMSPGku>) (this.dgvMsp.DataSource as List<LsMSPGku>);
      lsMspGkuList.Add(lsMspGku1);
      this.dgvMsp.Columns.Clear();
      this.dgvMsp.DataSource = (object) null;
      this.dgvMsp.DataSource = (object) lsMspGkuList;
      this.SelectedIndexMsp = lsMspGkuList.Count - 1;
      this.InsertRecord = true;
      this.dgvMspLoadComboBoxField();
      this.LoadSettingsLsMsp();
    }

    private bool DelMsp()
    {
      if (this.dgvMsp.Rows.Count <= 0 || this.dgvMsp.CurrentRow == null || this.dgvMsp.CurrentRow.Index < 0 || MessageBox.Show("Вы уверены, что хотите удалить запись", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) != DialogResult.OK)
        return false;
      DataGridViewRow dataGridViewRow = new DataGridViewRow();
      DataGridViewRow row1 = this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index];
      LsMSPGku lsMspGku = new LsMSPGku();
      LsMSPGku dataBoundItem = (LsMSPGku) row1.DataBoundItem;
      int index = this.dgvMsp.CurrentRow.Index;
      bool flag = true;
      foreach (DataGridViewRow row2 in (IEnumerable) this.dgvMsp.Rows)
      {
        if (row2.Index != index && dataBoundItem.DBeg == Convert.ToDateTime(row2.Cells["MDBeg"].Value) && dataBoundItem.MSPId.MSP_id == (int) Convert.ToInt16(row2.Cells["MSPId"].Value) && dataBoundItem.Person.PersonId == Convert.ToInt32(row2.Cells["PName"].Value))
        {
          flag = false;
          break;
        }
      }
      if (flag)
      {
        if (!this.PastTime)
        {
          if (dataBoundItem.DBeg <= this.LastDayMonthClosed || dataBoundItem.DEnd <= this.LastDayMonthClosed)
          {
            int num = (int) MessageBox.Show("Не могу удалить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            this.session.Clear();
            this.session = Kvartplata.Domain.CurrentSession;
            return false;
          }
        }
        else if (this.CurrentPeriod.PeriodName.Value <= this.MonthClosed.PeriodName.Value)
        {
          int num = (int) MessageBox.Show("Не могу удалить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          return false;
        }
        this.session.Clear();
        this.session = Kvartplata.Domain.CurrentSession;
        using (ITransaction transaction = this.session.BeginTransaction())
        {
          try
          {
            this.session.Delete((object) dataBoundItem);
            this.session.Flush();
            transaction.Commit();
          }
          catch (Exception ex)
          {
            int num = (int) MessageBox.Show("Не могу удалить текущую запись!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
            this.session.Clear();
            this.session = Kvartplata.Domain.CurrentSession;
            transaction.Rollback();
            return false;
          }
        }
        this.session.Clear();
      }
      return true;
    }

    private void dgvMspLoadComboBoxField()
    {
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvMsp, 0, "Дата начала", "MDBeg");
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvMsp, 1, "Дата окончания", "MDEnd");
      Kvartplata.Classes.KvrplHelper.AddTextBoxColumn(this.dgvMsp, 2, "Номер льготы", "MSPId", 60, false);
      Kvartplata.Classes.KvrplHelper.AddTextBoxColumn(this.dgvMsp, 3, "Номер льготы ОСЗН", "MSPIdSoc", 60, false);
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvMsp, 4, (IList) this.session.CreateCriteria(typeof (DcMSP)).AddOrder(Order.Asc("MSP_name")).List<DcMSP>(), "MSP_id", "MSP_name", "Наименование льготы", "LName", 7, 200);
      IList<Person> personList = this.session.CreateCriteria(typeof (Person)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).Add((ICriterion) NHibernate.Criterion.Restrictions.In("Reg.RegId", (ICollection) new int[2]{ 1, 2 })).Add((ICriterion) NHibernate.Criterion.Restrictions.Or((ICriterion) NHibernate.Criterion.Restrictions.Lt("Archive", (object) 3), (ICriterion) NHibernate.Criterion.Restrictions.Eq("Archive", (object) 5))).AddOrder(Order.Asc("Archive")).AddOrder(Order.Asc("Relation.RelationId")).List<Person>();
      foreach (Person person in (IEnumerable<Person>) personList)
        Kvartplata.Classes.KvrplHelper.GetFamily(person, 1, false);
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvMsp, 5, (IList) personList, "PersonId", "FIO", "Льготник", "PName", 200, 120);
      LsFamily lsFamily = new LsFamily();
      lsFamily.FamilyId = 0;
      lsFamily.FamilyName = "";
      IList<LsFamily> lsFamilyList = this.session.CreateCriteria(typeof (LsFamily)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).List<LsFamily>();
      lsFamilyList.Add(lsFamily);
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvMsp, 6, (IList) lsFamilyList, "FamilyId", "FamilyName", "Семья", "FName", 80, 80);
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvMsp, 7, (IList) this.session.CreateCriteria(typeof (YesNo)).List<YesNo>(), "YesNoId", "YesNoName", "Действует", "YesNo", 60, 60);
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvMsp, 7, (IList) this.session.CreateCriteria(typeof (YesNo)).List<YesNo>(), "YesNoId", "YesNoName", "На площадь", "TmpYesNo", 60, 60);
      DataGridViewColumn dataGridViewColumn = (DataGridViewColumn) new DataGridViewComboBoxColumn();
      dataGridViewColumn.HeaderText = "Документ";
      dataGridViewColumn.Name = "Document";
      this.dgvMsp.Columns.Insert(9, dataGridViewColumn);
      MspDocument mspDocument = new MspDocument();
      mspDocument.MSPDocumentId = 0;
      mspDocument.MSPDoc = new MSPDoc();
      mspDocument.MSPDoc.MSPDocName = "не заполнено";
      mspDocument.MSPDoc.MSPDocId = (short) 0;
      personList.Add(new Person()
      {
        PersonId = 0,
        Family = "не заполнено"
      });
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvMsp, 10, (IList) personList, "PersonId", "FIO", "Носитель льготы", "Holder", 120, 120);
      if (!Kvartplata.Classes.Options.RentMSP)
        Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvMsp, 11, (IList) this.session.CreateCriteria(typeof (DepReg)).List<DepReg>(), "DepRegId", "DepRegName", "Нет регистр. по усл.", "AcceptId", 120, 120);
      else
        Kvartplata.Classes.KvrplHelper.AddTextBoxColumn(this.dgvMsp, 11, "Количество членов семьи", "AcceptId", 120, false);
      this.dgvMsp.Columns["Uname"].DisplayIndex = 12;
      this.dgvMsp.Columns["Dedit"].DisplayIndex = 13;
      Kvartplata.Classes.KvrplHelper.ViewEdit(this.dgvMsp);
      this.progressBar1.Visible = true;
      this.progressBar1.Value = 0;
      this.progressBar1.Step = 1;
      this.progressBar1.Minimum = 0;
      this.progressBar1.Maximum = this.dgvMsp.Rows.Count;
      foreach (DataGridViewRow row in (IEnumerable) this.dgvMsp.Rows)
      {
        this.progressBar1.Value = this.progressBar1.Value + 1;
        DataGridViewCell cell1 = row.Cells["MDBeg"];
        DateTime dateTime = ((LsMSPGku) row.DataBoundItem).DBeg;
        string shortDateString1 = dateTime.ToShortDateString();
        cell1.Value = (object) shortDateString1;
        DataGridViewCell cell2 = row.Cells["MDEnd"];
        dateTime = ((LsMSPGku) row.DataBoundItem).DEnd;
        string shortDateString2 = dateTime.ToShortDateString();
        cell2.Value = (object) shortDateString2;
        if (((LsMSPGku) row.DataBoundItem).MSPId != null)
        {
          row.Cells["MSPId"].Value = (object) ((LsMSPGku) row.DataBoundItem).MSPId.MSP_id;
          row.Cells["LName"].Value = (object) ((LsMSPGku) row.DataBoundItem).MSPId.MSP_id;
          row.Cells["MSPIdSoc"].Value = (object) ((LsMSPGku) row.DataBoundItem).MSPId.CodeSoc;
        }
        if (((LsMSPGku) row.DataBoundItem).Person != null)
        {
          try
          {
            row.Cells["PName"].Value = (object) ((LsMSPGku) row.DataBoundItem).Person.PersonId;
          }
          catch
          {
          }
        }
        row.Cells["FName"].Value = ((LsMSPGku) row.DataBoundItem).FamilyId == null ? (object) 0 : (object) ((LsMSPGku) row.DataBoundItem).FamilyId.FamilyId;
        row.Cells["YesNo"].Value = (object) ((LsMSPGku) row.DataBoundItem).OnOff;
        row.Cells["TmpYesNo"].Value = (object) ((LsMSPGku) row.DataBoundItem).OnOffTmpSq;
        IList list = (IList) new ArrayList();
        if (row.Cells["PName"].Value != null)
          list = this.session.CreateQuery(string.Format(" from MspDocument m, MSPDoc d where m.MSPDoc=d.MSPDocId and m.Person.PersonId = {0} ", row.Cells["PName"].Value)).List();
        IList<MspDocument> mspDocumentList = (IList<MspDocument>) new List<MspDocument>();
        foreach (object[] objArray in (IEnumerable) list)
          mspDocumentList.Add((MspDocument) objArray[0]);
        mspDocumentList.Add(mspDocument);
        row.Cells["Document"] = (DataGridViewCell) new DataGridViewComboBoxCell()
        {
          DisplayStyleForCurrentCellOnly = true,
          ValueMember = "MSPDocumentId",
          DisplayMember = "MSPDocName",
          DataSource = (object) mspDocumentList
        };
        int num = ((LsMSPGku) row.DataBoundItem).MSPDocumentId == null ? 0 : (mspDocumentList.Count > 1 ? 1 : 0);
        row.Cells["Document"].Value = num == 0 ? (object) 0 : (object) ((LsMSPGku) row.DataBoundItem).MSPDocumentId.MSPDocumentId;
        row.Cells["Holder"].Value = ((LsMSPGku) row.DataBoundItem).Holder == null ? (object) 0 : (object) ((LsMSPGku) row.DataBoundItem).Holder.PersonId;
        row.Cells["AcceptId"].Value = (object) ((LsMSPGku) row.DataBoundItem).AcceptId;
      }
      this.progressBar1.Visible = false;
      if (this.SelectedIndexMsp == -1 || this.SelectedIndexMsp >= this.dgvMsp.Rows.Count)
        return;
      this.dgvMsp.Rows[this.SelectedIndexMsp].Selected = true;
      this.dgvMsp.CurrentCell = this.dgvMsp.Rows[this.SelectedIndexMsp].Cells[0];
    }

    private void dgvMsp_ColumnWidthChanged(object sender, DataGridViewColumnEventArgs e)
    {
      if (this.MySettingsLsMsp.FindByName(e.Column.Name) < 0)
        return;
      this.MySettingsLsMsp.Columns[this.MySettingsLsMsp.FindByName(e.Column.Name)].Width = e.Column.Width;
      this.MySettingsLsMsp.Save();
    }

    private void dgvMsp_CurrentCellDirtyStateChanged(object sender, EventArgs e)
    {
      if (!this.dgvMsp.IsCurrentCellDirty)
        return;
      this.dgvMsp.CommitEdit(DataGridViewDataErrorContexts.Commit);
      if (this.dgvMsp.CurrentCell.ColumnIndex == this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].Cells["LName"].ColumnIndex)
      {
        this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].Cells["MSPId"].Value = this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].Cells["LName"].Value;
        if (this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].Cells["LName"].Value != null)
        {
          this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].Cells["MSPIdSoc"].Value = (object) this.session.Get<DcMSP>((object) (int) this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].Cells["LName"].Value).CodeSoc;
          this.session.Clear();
        }
        else
          this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].Cells["MSPIdSoc"].Value = (object) "";
      }
      if (this.dgvMsp.CurrentCell.ColumnIndex == this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].Cells["PName"].ColumnIndex)
      {
        IList list = (IList) new ArrayList();
        if (this.dgvMsp.CurrentRow.Cells["PName"].Value != null)
          list = this.session.CreateQuery(string.Format(" from MspDocument m, MSPDoc d where m.MSPDoc=d.MSPDocId and m.Person.PersonId = {0} ", this.dgvMsp.CurrentRow.Cells["PName"].Value)).List();
        MspDocument mspDocument = new MspDocument();
        mspDocument.MSPDocumentId = 0;
        mspDocument.MSPDoc = new MSPDoc();
        mspDocument.MSPDoc.MSPDocName = "не заполнено";
        mspDocument.MSPDoc.MSPDocId = (short) 0;
        IList<MspDocument> mspDocumentList = (IList<MspDocument>) new List<MspDocument>();
        foreach (object[] objArray in (IEnumerable) list)
          mspDocumentList.Add((MspDocument) objArray[0]);
        mspDocumentList.Add(mspDocument);
        this.dgvMsp.CurrentRow.Cells["Document"] = (DataGridViewCell) new DataGridViewComboBoxCell()
        {
          DisplayStyleForCurrentCellOnly = true,
          ValueMember = "MSPDocumentId",
          DisplayMember = "MSPDocName",
          DataSource = (object) mspDocumentList
        };
        this.dgvMsp.CurrentRow.Cells["Document"].Value = ((LsMSPGku) this.dgvMsp.CurrentRow.DataBoundItem).MSPDocumentId == null || mspDocumentList.Count <= 1 ? (object) 0 : (object) ((LsMSPGku) this.dgvMsp.CurrentRow.DataBoundItem).MSPDocumentId.MSPDocumentId;
      }
    }

    private void dgvMsp_CellEndEdit(object sender, DataGridViewCellEventArgs e)
    {
      if (this.dgvMsp.CurrentCell.ColumnIndex == this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].Cells["MSPId"].ColumnIndex)
      {
        int num = 0;
        try
        {
          num = Convert.ToInt32(this.dgvMsp.CurrentCell.Value);
        }
        catch
        {
        }
        IList<DcMSP> dcMspList = this.session.CreateQuery(string.Format("from DcMSP c where c.MSP_id={0}", (object) num)).List<DcMSP>();
        if (dcMspList.Count > 0)
        {
          this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].Cells["LName"].Value = (object) dcMspList[0].MSP_id;
          this.dgvMsp.CurrentRow.Cells["MSPIdSoc"].Value = (object) dcMspList[0].CodeSoc;
        }
        else
        {
          this.dgvMsp.CurrentRow.Cells["MSPIdSoc"].Value = (object) "";
          this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].Cells["LName"].Value = (object) null;
        }
        this.session.Clear();
      }
      if (this.dgvMsp.CurrentCell.ColumnIndex == this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].Cells["MSPIdSoc"].ColumnIndex)
      {
        int num = 0;
        try
        {
          num = Convert.ToInt32(this.dgvMsp.CurrentCell.Value);
        }
        catch
        {
        }
        IList<DcMSP> dcMspList = this.session.CreateQuery(string.Format("from DcMSP c where c.CodeSoc={0}", (object) num)).List<DcMSP>();
        if (dcMspList.Count > 0)
        {
          this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].Cells["LName"].Value = (object) dcMspList[0].MSP_id;
          this.dgvMsp.CurrentRow.Cells["MSPId"].Value = (object) dcMspList[0].MSP_id;
        }
        else
        {
          this.dgvMsp.CurrentRow.Cells["MSPId"].Value = (object) "";
          this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].Cells["LName"].Value = (object) null;
        }
      }
      if (this.dgvMsp.CurrentRow == null)
        return;
      LsMSPGku dataBoundItem = (LsMSPGku) this.dgvMsp.CurrentRow.DataBoundItem;
      dataBoundItem.IsEdit = true;
      if (this.dgvMsp.CurrentCell.Value != null)
      {
        try
        {
          string name = this.dgvMsp.Columns[e.ColumnIndex].Name;
          // ISSUE: reference to a compiler-generated method
          uint stringHash = PrivateImplementationDetails.ComputeStringHash(name);
          if (stringHash <= 2809234694U)
          {
            if (stringHash <= 632882750U)
            {
              if ((int) stringHash != 458631599)
              {
                if ((int) stringHash == 632882750)
                {
                  if (name == "MSPId")
                    dataBoundItem.MSPId = this.session.Get<DcMSP>(this.dgvMsp.CurrentRow.Cells["MSPId"].Value);
                }
              }
              else if (name == "Holder")
                dataBoundItem.Holder = this.session.Get<Person>(this.dgvMsp.CurrentRow.Cells["Holder"].Value);
            }
            else if ((int) stringHash != 1097098860)
            {
              if ((int) stringHash != -1693347218)
              {
                if ((int) stringHash == -1485732602)
                {
                  if (name == "MDBeg")
                  {
                    try
                    {
                      dataBoundItem.DBeg = Convert.ToDateTime(this.dgvMsp.CurrentRow.Cells["MDBeg"].Value);
                    }
                    catch
                    {
                    }
                  }
                }
              }
              else if (name == "TmpYesNo")
                dataBoundItem.OnOffTmpSq = this.session.Get<YesNo>(this.dgvMsp.CurrentRow.Cells["TmpYesNo"].Value).YesNoId;
            }
            else if (name == "AcceptId")
            {
              try
              {
                dataBoundItem.AcceptId = Convert.ToInt32(this.dgvMsp.CurrentRow.Cells["AcceptId"].Value);
              }
              catch
              {
              }
            }
          }
          else if (stringHash <= 3237352364U)
          {
            if ((int) stringHash != -1453470519)
            {
              if ((int) stringHash != -1061185616)
              {
                if ((int) stringHash == -1057614932)
                {
                  if (name == "PName")
                    dataBoundItem.Person = this.session.Get<Person>(this.dgvMsp.CurrentRow.Cells["PName"].Value);
                }
              }
              else if (name == "LName")
                dataBoundItem.MSPId = this.session.Get<DcMSP>(this.dgvMsp.CurrentRow.Cells["MSPId"].Value);
            }
            else if (name == "MDEnd")
            {
              try
              {
                dataBoundItem.DEnd = Convert.ToDateTime(this.dgvMsp.CurrentRow.Cells["MDEnd"].Value);
              }
              catch
              {
              }
            }
          }
          else if ((int) stringHash != -360701774)
          {
            if ((int) stringHash != -330421393)
            {
              if ((int) stringHash == -129762572)
              {
                if (name == "Document")
                  dataBoundItem.MSPDocumentId = this.session.Get<MspDocument>(this.dgvMsp.CurrentRow.Cells["Document"].Value);
              }
            }
            else if (name == "YesNo")
              dataBoundItem.OnOff = this.session.Get<YesNo>(this.dgvMsp.CurrentRow.Cells["YesNo"].Value).YesNoId;
          }
          else if (name == "FName")
            dataBoundItem.FamilyId = this.session.Get<LsFamily>(this.dgvMsp.CurrentRow.Cells["FName"].Value);
        }
        catch (Exception ex)
        {
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
        }
      }
    }

    private void dgvMsp_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
    {
      if (this.dgvMsp.CurrentRow == null)
        return;
      this.oldLsMspGku = new LsMSPGku();
      this.oldLsMspGku.LsClient = ((LsMSPGku) this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].DataBoundItem).LsClient;
      this.oldLsMspGku.DBeg = ((LsMSPGku) this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].DataBoundItem).DBeg;
      this.oldLsMspGku.DEnd = ((LsMSPGku) this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].DataBoundItem).DEnd;
      this.oldLsMspGku.Holder = ((LsMSPGku) this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].DataBoundItem).Holder;
      this.oldLsMspGku.FamilyId = ((LsMSPGku) this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].DataBoundItem).FamilyId;
      this.oldLsMspGku.Period = ((LsMSPGku) this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].DataBoundItem).Period;
      this.oldLsMspGku.MSPDocumentId = ((LsMSPGku) this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].DataBoundItem).MSPDocumentId;
      this.oldLsMspGku.MSPId = ((LsMSPGku) this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].DataBoundItem).MSPId;
      this.oldLsMspGku.OnOff = (short) this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].Cells["YesNo"].Value;
      this.oldLsMspGku.OnOffTmpSq = (short) this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].Cells["TmpYesNo"].Value;
      this.oldLsMspGku.Person = ((LsMSPGku) this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].DataBoundItem).Person;
      this.oldLsMspGku.AcceptId = (int) this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].Cells["AcceptId"].Value;
      this.btnSave.Enabled = true;
      ((LsMSPGku) this.dgvMsp.Rows[this.dgvMsp.CurrentRow.Index].DataBoundItem).IsEdit = true;
    }

    private void dgvMsp_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
    {
      if (this.dgvMsp.DataSource == null)
        return;
      DataGridViewRow row = (sender as DataGridView).Rows[e.RowIndex];
      DateTime dbeg = ((LsMSPGku) row.DataBoundItem).DBeg;
      DateTime? periodName = this.NextMonthClosed.PeriodName;
      DateTime dateTime1 = Kvartplata.Classes.KvrplHelper.LastDay(periodName.Value);
      int num;
      if (dbeg <= dateTime1)
      {
        DateTime dend = ((LsMSPGku) row.DataBoundItem).DEnd;
        periodName = this.NextMonthClosed.PeriodName;
        DateTime dateTime2 = periodName.Value;
        num = dend >= dateTime2 ? 1 : 0;
      }
      else
        num = 0;
      if (num != 0)
      {
        if ((int) ((LsMSPGku) row.DataBoundItem).OnOff == 1)
          row.DefaultCellStyle.BackColor = Color.PapayaWhip;
        else
          row.DefaultCellStyle.ForeColor = Color.Gray;
      }
      else
      {
        row.DefaultCellStyle.BackColor = Color.FromArgb((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
        row.DefaultCellStyle.ForeColor = Color.Gray;
      }
    }

    private void dgvMsp_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
    {
    }

    private void dgvMsp_CellMouseDown(object sender, DataGridViewCellMouseEventArgs e)
    {
      if (e.RowIndex == -1 || e.ColumnIndex == -1)
        return;
      this.SelectedIndexMsp = e.RowIndex;
      this.dgvMsp.CurrentCell = this.dgvMsp.Rows[e.RowIndex].Cells[e.ColumnIndex];
      this.dgvMsp.Rows[e.RowIndex].Selected = true;
    }

    private void tcntrlMsp_SelectedIndexChanged(object sender, EventArgs e)
    {
      this.chbArhiv.Visible = false;
      if (this.tcntrlMsp.SelectedIndex == 1)
      {
        this.btnSave.Enabled = false;
        this.btnAddRecord.Enabled = false;
        this.btnDelRecord.Enabled = false;
        this.LoadLsFamily();
        this.LoadFrFamily();
      }
      if (this.tcntrlMsp.SelectedIndex == 0)
      {
        this.btnSave.Enabled = true;
        this.btnAddRecord.Enabled = true;
        this.btnDelRecord.Enabled = true;
        this.chbArhiv.Visible = true;
        this.LoadMsp();
      }
      if (this.tcntrlMsp.SelectedIndex == 2)
      {
        this.btnSave.Enabled = false;
        this.btnAddRecord.Enabled = false;
        this.btnDelRecord.Enabled = false;
        this.LoadMspDocument();
      }
      if (this.tcntrlMsp.SelectedIndex != 3)
        return;
      this.btnSave.Enabled = false;
      this.btnAddRecord.Enabled = false;
      this.btnDelRecord.Enabled = false;
      this.LoadPensDoc();
    }

    private void LoadLsFamily()
    {
      this.btnAddLsFamily.Enabled = true;
      this.btnDelLsFamily.Enabled = true;
      this.btnSaveLsFamily.Enabled = false;
      this.InsertRecord = false;
      this.session.Clear();
      this.session = Kvartplata.Domain.CurrentSession;
      IList<LsFamily> lsFamilyList1 = (IList<LsFamily>) new List<LsFamily>();
      IList<LsFamily> lsFamilyList2 = this.session.CreateCriteria(typeof (LsFamily)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).AddOrder(Order.Asc("FamilyId")).List<LsFamily>();
      this.dgvLsFamily.Columns.Clear();
      this.dgvLsFamily.DataSource = (object) null;
      this.dgvLsFamily.DataSource = (object) lsFamilyList2;
      this.SetNameGridFamilyColumnsHeader();
      this.dgvLsFamily.Columns[0].Visible = false;
      if (this.dgvLsFamily.Rows.Count > 0)
      {
        this.dgvLsFamily.Rows[0].Selected = true;
        this.dgvLsFamily.CurrentCell = this.dgvLsFamily.Rows[0].Cells[1];
        this.dgvLsFamily.Focus();
      }
      this.LoadFrFamily();
    }

    private void InsertLsFamily()
    {
      this.btnSaveLsFamily.Enabled = true;
      LsFamily lsFamily = new LsFamily();
      lsFamily.LsClient = this.Client;
      lsFamily.FamilyName = "Новая семья";
      lsFamily.IsEdit = true;
      IList<LsFamily> lsFamilyList = (IList<LsFamily>) new List<LsFamily>();
      if ((uint) this.dgvLsFamily.Rows.Count > 0U)
        lsFamilyList = (IList<LsFamily>) (this.dgvLsFamily.DataSource as List<LsFamily>);
      lsFamilyList.Add(lsFamily);
      this.dgvLsFamily.Columns.Clear();
      this.dgvLsFamily.DataSource = (object) null;
      this.dgvLsFamily.DataSource = (object) lsFamilyList;
      this.SetNameGridFamilyColumnsHeader();
      this.dgvLsFamily.Columns[0].Visible = false;
      this.dgvLsFamily.Rows[this.dgvLsFamily.Rows.Count - 1].Selected = true;
      this.InsertRecord = true;
      this.dgvLsFamily.CurrentCell = this.dgvLsFamily.Rows[this.dgvLsFamily.Rows.Count - 1].Cells[1];
      this.dgvLsFamily.Focus();
    }

    private void SaveAllLsFamily()
    {
      bool flag = false;
      foreach (DataGridViewRow row in (IEnumerable) this.dgvLsFamily.Rows)
      {
        if (((LsFamily) row.DataBoundItem).IsEdit)
        {
          this.dgvLsFamily.Rows[row.Index].Selected = true;
          this.dgvLsFamily.CurrentCell = row.Cells["FamilyName"];
          if (!this.SaveLsFamily())
            flag = true;
          else
            ((LsFamily) row.DataBoundItem).IsEdit = false;
        }
      }
      if (flag)
        return;
      this.LoadLsFamily();
    }

    private bool SaveLsFamily()
    {
      this.btnSaveLsFamily.Enabled = false;
      this.session.Clear();
      if (this.dgvLsFamily.CurrentRow == null)
        return true;
      DataGridViewRow dataGridViewRow = new DataGridViewRow();
      DataGridViewRow row = this.dgvLsFamily.Rows[this.dgvLsFamily.CurrentRow.Index];
      this.InsertRecord = ((LsFamily) row.DataBoundItem).FamilyId == 0;
      LsFamily lsFamily = new LsFamily();
      lsFamily.Uname = Kvartplata.Classes.Options.Login;
      lsFamily.Dedit = DateTime.Now.Date;
      lsFamily.LsClient = this.Client;
      lsFamily.FamilyName = row.Cells[1].Value.ToString();
      lsFamily.FamilyId = !this.InsertRecord ? Convert.ToInt32(row.Cells[0].Value) : (int) this.session.CreateSQLQuery("select DBA.gen_id('lsFamily',1)").UniqueResult();
      this.session.Clear();
      this.session = Kvartplata.Domain.CurrentSession;
      if (this.InsertRecord)
      {
        try
        {
          this.session.Save((object) lsFamily);
          this.session.Flush();
        }
        catch (Exception ex)
        {
          if (ex.InnerException.Message.ToLower().IndexOf("primary key for table 'lsfamily' is not unique") != -1)
          {
            Kvartplata.Classes.KvrplHelper.ResetGeners("lsFamily", "Family_id");
            int num = (int) MessageBox.Show("Была устранена ошибка генерации уникального поля! Введите семью заново!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
          }
          else
          {
            int num1 = (int) MessageBox.Show("Не могу сохранить текущую запись", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          }
          this.session.Clear();
          return false;
        }
      }
      else
      {
        try
        {
          this.session.Update((object) lsFamily);
          this.session.Flush();
        }
        catch (Exception ex)
        {
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          int num = (int) MessageBox.Show("Не могу сохранить сохранить запись", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
          return false;
        }
      }
      return true;
    }

    private bool DelLsFamily()
    {
      if (this.dgvLsFamily.Rows.Count <= 0 || this.dgvLsFamily.CurrentRow.Index < 0 || MessageBox.Show("Вы уверены, что хотите удалить запись", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) != DialogResult.OK)
        return false;
      DataGridViewRow dataGridViewRow = new DataGridViewRow();
      DataGridViewRow row = this.dgvLsFamily.Rows[this.dgvLsFamily.CurrentRow.Index];
      LsFamily lsFamily = new LsFamily();
      LsFamily dataBoundItem = (LsFamily) row.DataBoundItem;
      this.session.Clear();
      this.session = Kvartplata.Domain.CurrentSession;
      this.session.Delete((object) dataBoundItem);
      try
      {
        this.session.Flush();
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show("Не могу удалить текущую запись!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
        this.session.Clear();
        this.session = Kvartplata.Domain.CurrentSession;
        return false;
      }
      this.session.Clear();
      return true;
    }

    private void SetNameGridFamilyColumnsHeader()
    {
      if ((uint) this.dgvLsFamily.Columns.Count <= 0U)
        return;
      this.dgvLsFamily.Columns["FamilyName"].HeaderText = "Семья";
      Kvartplata.Classes.KvrplHelper.ViewEdit(this.dgvLsFamily);
    }

    private void btnAddFamily_Click(object sender, EventArgs e)
    {
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(46, 2, this.Client.Company, true))
        return;
      this.InsertLsFamily();
    }

    private void btnSaveFamily_Click(object sender, EventArgs e)
    {
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(46, 2, this.Client.Company, true))
        return;
      this.SaveAllLsFamily();
    }

    private void btnDelFamily_Click(object sender, EventArgs e)
    {
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(46, 2, this.Client.Company, true) || !this.DelLsFamily())
        return;
      this.LoadLsFamily();
    }

    private void dgvLsFamily_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
    {
      if (this.dgvLsFamily.Rows.Count <= 0 || (uint) ((LsFamily) this.dgvLsFamily.CurrentRow.DataBoundItem).FamilyId <= 0U)
        return;
      this.LoadFrFamily();
    }

    private void dgvLsFamily_KeyUp(object sender, KeyEventArgs e)
    {
      if (this.dgvLsFamily.Rows.Count <= 0 || ((LsFamily) this.dgvLsFamily.CurrentRow.DataBoundItem).FamilyId <= 0)
        return;
      this.LoadFrFamily();
    }

    private void dgvLsFamily_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
    {
      this.btnDelLsFamily.Enabled = false;
      this.btnSaveLsFamily.Enabled = true;
      ((LsFamily) this.dgvLsFamily.CurrentRow.DataBoundItem).IsEdit = true;
    }

    public void LoadSettingsFrFamily()
    {
      this.MySettingsFrFamily.Load();
      foreach (DataGridViewColumn column in (BaseCollection) this.dgvFrFamily.Columns)
        this.MySettingsFrFamily.GetMySettings(column);
    }

    private void LoadFrFamily()
    {
      this.btnAddFrFamily.Enabled = true;
      this.btnDelFrFamily.Enabled = true;
      this.btnSaveFrFamily.Enabled = false;
      this.tsbMultiPastTime.Enabled = true;
      this.dgvFrFamily.Columns.Clear();
      if (this.dgvLsFamily.CurrentRow == null)
        return;
      LsFamily dataBoundItem = (LsFamily) this.dgvLsFamily.CurrentRow.DataBoundItem;
      IList<FrFamily> frFamilyList = (IList<FrFamily>) new List<FrFamily>();
      ICriteria criteria = this.PastTime ? this.session.CreateCriteria(typeof (FrFamily)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsFamily", (object) dataBoundItem)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Period", (object) this.CurrentPeriod)).AddOrder(Order.Asc("Person.PersonId")).AddOrder(Order.Asc("DBeg")) : this.session.CreateCriteria(typeof (FrFamily)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsFamily", (object) dataBoundItem)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Period.PeriodId", (object) 0)).AddOrder(Order.Asc("Person.PersonId")).AddOrder(Order.Asc("DBeg"));
      this.oldListFrFamily = (IList<FrFamily>) new List<FrFamily>();
      this.oldListFrFamily = criteria.List<FrFamily>();
      this.session.Clear();
      this.dgvFrFamily.Columns.Clear();
      this.dgvFrFamily.DataSource = (object) null;
      this.dgvFrFamily.DataSource = (object) criteria.List<FrFamily>();
      int index = 0;
      foreach (FrFamily frFamily in (List<FrFamily>) this.dgvFrFamily.DataSource)
      {
        frFamily.IsEdit = false;
        frFamily.OldHashCode = frFamily.GetHashCode();
        this.oldListFrFamily[index].IsEdit = false;
        this.oldListFrFamily[index].OldHashCode = frFamily.OldHashCode;
        ++index;
      }
      this.dgvFrFamilyLoadComboBoxField();
      this.MySettingsFrFamily.GridName = "FrFamily";
      this.LoadSettingsFrFamily();
    }

    private void InsertFrFamily()
    {
      if (this.dgvLsFamily.Rows.Count == 0 || this.dgvLsFamily.CurrentRow == null)
      {
        int num = (int) MessageBox.Show("Не могу добавить запись. Не выбрана семья!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
      }
      else
      {
        FrFamily frFamily1 = new FrFamily();
        frFamily1.LsFamily = (LsFamily) this.dgvLsFamily.CurrentRow.DataBoundItem;
        if (this.PastTime)
        {
          frFamily1.Period = this.CurrentPeriod;
          FrFamily frFamily2 = frFamily1;
          DateTime? periodName = this.MonthClosed.PeriodName;
          DateTime dateTime = periodName.Value;
          frFamily2.DBeg = dateTime;
          FrFamily frFamily3 = frFamily1;
          periodName = this.MonthClosed.PeriodName;
          DateTime lastDayPeriod = Kvartplata.Classes.KvrplHelper.GetLastDayPeriod(periodName.Value);
          frFamily3.DEnd = lastDayPeriod;
        }
        else
        {
          frFamily1.Period = this.session.Get<Kvartplata.Classes.Period>((object) 0);
          DateTime? periodName = this.CurrentPeriod.PeriodName;
          DateTime dateTime1 = periodName.Value;
          periodName = this.MonthClosed.PeriodName;
          DateTime dateTime2 = periodName.Value;
          if (dateTime1 <= dateTime2)
          {
            FrFamily frFamily2 = frFamily1;
            periodName = this.NextMonthClosed.PeriodName;
            DateTime date = periodName.Value.Date;
            frFamily2.DBeg = date;
          }
          else
          {
            FrFamily frFamily2 = frFamily1;
            periodName = this.CurrentPeriod.PeriodName;
            DateTime dateTime3 = periodName.Value;
            frFamily2.DBeg = dateTime3;
          }
          frFamily1.DEnd = Convert.ToDateTime("31.12.2999");
        }
        frFamily1.OnOff = (short) 1;
        IList<FrFamily> frFamilyList = (IList<FrFamily>) new List<FrFamily>();
        if ((uint) this.dgvFrFamily.Rows.Count > 0U)
          frFamilyList = (IList<FrFamily>) (this.dgvFrFamily.DataSource as List<FrFamily>);
        frFamilyList.Add(frFamily1);
        this.dgvFrFamily.Columns.Clear();
        this.dgvFrFamily.DataSource = (object) null;
        this.dgvFrFamily.DataSource = (object) frFamilyList;
        this.dgvFrFamilyLoadComboBoxField();
        this.InsertRecord = true;
        this.LoadSettingsFrFamily();
      }
    }

    private void SaveAllFrFamily()
    {
      bool flag = false;
      foreach (DataGridViewRow row in (IEnumerable) this.dgvFrFamily.Rows)
      {
        if (((FrFamily) row.DataBoundItem).IsEdit)
        {
          this.oldFrFamily = new FrFamily();
          foreach (FrFamily frFamily in (IEnumerable<FrFamily>) this.oldListFrFamily)
          {
            if (frFamily.OldHashCode == ((FrFamily) row.DataBoundItem).OldHashCode)
            {
              this.oldFrFamily = frFamily;
              break;
            }
          }
          this.dgvFrFamily.Rows[row.Index].Selected = true;
          this.dgvFrFamily.CurrentCell = row.Cells[0];
          if (!this.SaveFrFamily())
            flag = true;
          else
            ((FrFamily) row.DataBoundItem).IsEdit = false;
        }
      }
      if (flag)
        return;
      this.LoadFrFamily();
    }

    private bool SaveFrFamily()
    {
      if (this.dgvFrFamily.CurrentRow == null)
        return true;
      DataGridViewRow dataGridViewRow = new DataGridViewRow();
      DataGridViewRow row = this.dgvFrFamily.Rows[this.dgvFrFamily.CurrentRow.Index];
      if (row.Cells["PName"].Value == null)
      {
        int num = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. не заполнено ключевое поле Человек", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        return false;
      }
      this.InsertRecord = ((FrFamily) row.DataBoundItem).Uname == null;
      this.session.Clear();
      this.session = Kvartplata.Domain.CurrentSession;
      FrFamily frFamily = new FrFamily();
      FrFamily dataBoundItem = (FrFamily) row.DataBoundItem;
      dataBoundItem.Uname = Kvartplata.Classes.Options.Login;
      dataBoundItem.Dedit = DateTime.Now.Date;
      dataBoundItem.Person = this.session.Get<Person>(row.Cells["PName"].Value);
      this.session.Clear();
      dataBoundItem.Period = !this.PastTime ? this.session.Get<Kvartplata.Classes.Period>((object) 0) : this.CurrentPeriod;
      dataBoundItem.OnOff = Convert.ToInt16(row.Cells["YesNo"].Value);
      try
      {
        dataBoundItem.DBeg = Convert.ToDateTime(row.Cells["MDBeg"].Value);
      }
      catch
      {
        int num = (int) MessageBox.Show("Некорректный формат даты!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        return false;
      }
      try
      {
        dataBoundItem.DEnd = Convert.ToDateTime(row.Cells["MDEnd"].Value);
      }
      catch
      {
        int num = (int) MessageBox.Show("Некорректный формат даты!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        return false;
      }
      if (dataBoundItem.DBeg > dataBoundItem.DEnd)
      {
        int num = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. дата начала больше даты окончания", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        this.session.Clear();
        this.session = Kvartplata.Domain.CurrentSession;
        return !this.InsertRecord;
      }
      if (!this.PastTime)
      {
        if (!this.InsertRecord && dataBoundItem.DBeg <= this.LastDayMonthClosed && dataBoundItem.DBeg != this.oldFrFamily.DBeg)
        {
          int num = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          return true;
        }
        if (!this.InsertRecord && (this.oldFrFamily.DBeg < this.LastDayMonthClosed && this.oldFrFamily.DEnd < this.LastDayMonthClosed))
        {
          int num = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          return true;
        }
        if (!this.InsertRecord && (this.oldFrFamily.DBeg < this.LastDayMonthClosed && (this.oldFrFamily.DBeg != dataBoundItem.DBeg || this.oldFrFamily.Person.PersonId != dataBoundItem.Person.PersonId || (int) this.oldFrFamily.OnOff != (int) dataBoundItem.OnOff) || this.oldFrFamily.DEnd < this.LastDayMonthClosed && (this.oldFrFamily.DEnd != dataBoundItem.DEnd || this.oldFrFamily.Person.PersonId != dataBoundItem.Person.PersonId || (int) this.oldFrFamily.OnOff != (int) dataBoundItem.OnOff)))
        {
          int num = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          return true;
        }
        if (dataBoundItem.DEnd < this.LastDayMonthClosed)
        {
          int num = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. дата окончания принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          return !this.InsertRecord;
        }
        int num1;
        if (this.InsertRecord)
        {
          DateTime dbeg = dataBoundItem.DBeg;
          DateTime? periodName = this.NextMonthClosed.PeriodName;
          num1 = periodName.HasValue ? (dbeg < periodName.GetValueOrDefault() ? 1 : 0) : 0;
        }
        else
          num1 = 0;
        if (num1 != 0)
        {
          int num2 = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          return false;
        }
      }
      else
      {
        DateTime dbeg = dataBoundItem.DBeg;
        DateTime? periodName = this.MonthClosed.PeriodName;
        DateTime lastDayPeriod1 = Kvartplata.Classes.KvrplHelper.GetLastDayPeriod(periodName.Value);
        int num1;
        if (!(dbeg > lastDayPeriod1))
        {
          DateTime dend = dataBoundItem.DEnd;
          periodName = this.MonthClosed.PeriodName;
          DateTime lastDayPeriod2 = Kvartplata.Classes.KvrplHelper.GetLastDayPeriod(periodName.Value);
          num1 = dend > lastDayPeriod2 ? 1 : 0;
        }
        else
          num1 = 1;
        if (num1 != 0)
        {
          int num2 = (int) MessageBox.Show("Не могу сохранить текущую запись, проверьте корректность дат!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          return !this.InsertRecord;
        }
        periodName = this.CurrentPeriod.PeriodName;
        DateTime dateTime = periodName.Value;
        periodName = this.MonthClosed.PeriodName;
        DateTime lastDayPeriod3 = Kvartplata.Classes.KvrplHelper.GetLastDayPeriod(periodName.Value);
        if (dateTime < lastDayPeriod3)
        {
          int num2 = (int) MessageBox.Show("Не могу сохранить текущую запись, проверьте корректность дат!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          return !this.InsertRecord;
        }
        periodName = this.MonthClosed.PeriodName;
        if (Kvartplata.Classes.KvrplHelper.GetLastDayPeriod(periodName.Value) - dataBoundItem.DBeg > new TimeSpan(730, 0, 0, 0) && MessageBox.Show("Дата начала отличается от даты закрытого периода более, чем на 2 года. Продолжить сохранение? ", "Внимание", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.No)
        {
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          return false;
        }
      }
      if (this.InsertRecord)
      {
        using (ITransaction transaction = this.session.BeginTransaction())
        {
          try
          {
            this.session.Save((object) dataBoundItem);
            this.session.Flush();
            transaction.Commit();
          }
          catch (Exception ex)
          {
            this.session.Clear();
            this.session = Kvartplata.Domain.CurrentSession;
            int num = (int) MessageBox.Show("Не могу сохранить текущую запись", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
            transaction.Rollback();
            return false;
          }
        }
      }
      if (this.oldFrFamily != null && !this.InsertRecord)
      {
        try
        {
          this.session.CreateSQLQuery("update DBA.FrFamily set  idform=:idform,  dbeg=:dbeg, dend=:dend, OnOff=:onoff, uname=:uname, dedit=:dedit  where family_id=:family_id and period_id=:period_id and idform=:oldidform and dbeg=:olddbeg").SetParameter<int>("idform", dataBoundItem.Person.PersonId).SetParameter<string>("dbeg", Kvartplata.Classes.KvrplHelper.DateToBaseFormat(dataBoundItem.DBeg)).SetParameter<string>("dend", Kvartplata.Classes.KvrplHelper.DateToBaseFormat(dataBoundItem.DEnd)).SetParameter<short>("onoff", dataBoundItem.OnOff).SetParameter<string>("uname", Kvartplata.Classes.Options.Login).SetParameter<string>("dedit", Kvartplata.Classes.KvrplHelper.DateToBaseFormat(DateTime.Now)).SetParameter<int>("family_id", dataBoundItem.LsFamily.FamilyId).SetParameter<int>("period_id", dataBoundItem.Period.PeriodId).SetParameter<int>("oldidform", this.oldFrFamily.Person.PersonId).SetParameter<DateTime>("olddbeg", this.oldFrFamily.DBeg).ExecuteUpdate();
        }
        catch (Exception ex)
        {
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          int num = (int) MessageBox.Show("Не могу сохранить текущую запись", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
          return true;
        }
      }
      this.InsertRecord = false;
      this.oldFrFamily = (FrFamily) null;
      return true;
    }

    private bool DelFrFamily()
    {
      if (this.dgvFrFamily.Rows.Count <= 0 || this.dgvFrFamily.CurrentRow.Index < 0 || MessageBox.Show("Вы уверены, что хотите удалить запись", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) != DialogResult.OK)
        return false;
      DataGridViewRow dataGridViewRow = new DataGridViewRow();
      DataGridViewRow row1 = this.dgvFrFamily.Rows[this.dgvFrFamily.CurrentRow.Index];
      FrFamily frFamily = new FrFamily();
      FrFamily dataBoundItem = (FrFamily) row1.DataBoundItem;
      this.session.Clear();
      dataBoundItem.LsFamily = this.session.Get<LsFamily>((object) dataBoundItem.LsFamily.FamilyId);
      dataBoundItem.Period = this.session.Get<Kvartplata.Classes.Period>((object) dataBoundItem.Period.PeriodId);
      int index = this.dgvFrFamily.CurrentRow.Index;
      bool flag = true;
      foreach (DataGridViewRow row2 in (IEnumerable) this.dgvFrFamily.Rows)
      {
        if (row2.Index != index && dataBoundItem.DBeg == Convert.ToDateTime(row2.Cells["MDBeg"].Value) && dataBoundItem.Person != null && dataBoundItem.Person.PersonId == Convert.ToInt32(row2.Cells["PName"].Value))
        {
          flag = false;
          break;
        }
      }
      if (flag)
      {
        if (!this.PastTime)
        {
          if (dataBoundItem.DBeg <= this.LastDayMonthClosed || dataBoundItem.DEnd <= this.LastDayMonthClosed)
          {
            int num = (int) MessageBox.Show("Не могу удалить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            this.session.Clear();
            this.session = Kvartplata.Domain.CurrentSession;
            return false;
          }
        }
        else if (this.CurrentPeriod.PeriodName.Value <= this.MonthClosed.PeriodName.Value)
        {
          int num = (int) MessageBox.Show("Не могу удалить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          return false;
        }
        using (ITransaction transaction = this.session.BeginTransaction())
        {
          try
          {
            this.session.Delete((object) dataBoundItem);
            this.session.Flush();
            transaction.Commit();
          }
          catch (Exception ex)
          {
            int num = (int) MessageBox.Show("Не могу удалить текущую запись!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
            this.session.Clear();
            this.session = Kvartplata.Domain.CurrentSession;
            transaction.Rollback();
            return false;
          }
        }
        this.session.Clear();
      }
      return true;
    }

    private void dgvFrFamilyLoadComboBoxField()
    {
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvFrFamily, 0, "Дата начала", "MDBeg");
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvFrFamily, 1, "Дата окончания", "MDEnd");
      IList<Person> personList = this.session.CreateCriteria(typeof (Person)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).Add((ICriterion) NHibernate.Criterion.Restrictions.In("Reg.RegId", (ICollection) new int[2]{ 1, 2 })).Add((ICriterion) NHibernate.Criterion.Restrictions.Or((ICriterion) NHibernate.Criterion.Restrictions.Lt("Archive", (object) 3), (ICriterion) NHibernate.Criterion.Restrictions.Eq("Archive", (object) 5))).AddOrder(Order.Asc("Archive")).AddOrder(Order.Asc("Relation.RelationId")).List<Person>();
      foreach (Person person in (IEnumerable<Person>) personList)
      {
        Kvartplata.Classes.KvrplHelper.GetFamily(person, 1, false);
        person.Family = Kvartplata.Classes.KvrplHelper.FioOut(person.Name, person.LastName, person.Family, person.OutToDate, person.BornDate);
      }
      DataGridViewComboBoxCell viewComboBoxCell1 = new DataGridViewComboBoxCell();
      viewComboBoxCell1.DisplayStyleForCurrentCellOnly = true;
      viewComboBoxCell1.ValueMember = "PersonId";
      viewComboBoxCell1.DisplayMember = "Family";
      viewComboBoxCell1.DataSource = (object) personList;
      DataGridViewColumn dataGridViewColumn1 = (DataGridViewColumn) new DataGridViewComboBoxColumn();
      dataGridViewColumn1.CellTemplate = (DataGridViewCell) viewComboBoxCell1;
      dataGridViewColumn1.HeaderText = "Человек";
      dataGridViewColumn1.Name = "PName";
      this.dgvFrFamily.Columns.Insert(2, dataGridViewColumn1);
      DataGridViewComboBoxCell viewComboBoxCell2 = new DataGridViewComboBoxCell();
      viewComboBoxCell2.DisplayStyleForCurrentCellOnly = true;
      viewComboBoxCell2.ValueMember = "YesNoId";
      viewComboBoxCell2.DisplayMember = "YesNoName";
      viewComboBoxCell2.DataSource = (object) this.session.CreateCriteria(typeof (YesNo)).List<YesNo>();
      DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn) new DataGridViewComboBoxColumn();
      dataGridViewColumn2.CellTemplate = (DataGridViewCell) viewComboBoxCell2;
      dataGridViewColumn2.HeaderText = "Действует";
      dataGridViewColumn2.Name = "YesNo";
      this.dgvFrFamily.Columns.Insert(4, dataGridViewColumn2);
      this.dgvFrFamily.Columns["Uname"].HeaderText = "Пользователь";
      this.dgvFrFamily.Columns["Dedit"].HeaderText = "Дата редактирования";
      this.dgvFrFamily.Columns["Uname"].ReadOnly = true;
      this.dgvFrFamily.Columns["Dedit"].ReadOnly = true;
      this.progressBar1.Visible = true;
      this.progressBar1.Value = 0;
      this.progressBar1.Step = 1;
      this.progressBar1.Minimum = 0;
      this.progressBar1.Maximum = this.dgvFrFamily.Rows.Count;
      foreach (DataGridViewRow row in (IEnumerable) this.dgvFrFamily.Rows)
      {
        this.progressBar1.Value = this.progressBar1.Value + 1;
        row.Cells["MDBeg"].Value = (object) ((FrFamily) row.DataBoundItem).DBeg.ToShortDateString();
        row.Cells["MDEnd"].Value = (object) ((FrFamily) row.DataBoundItem).DEnd.ToShortDateString();
        if (((FrFamily) row.DataBoundItem).Person != null)
          row.Cells["PName"].Value = (object) ((FrFamily) row.DataBoundItem).Person.PersonId;
        row.Cells["YesNo"].Value = (object) ((FrFamily) row.DataBoundItem).OnOff;
      }
      this.progressBar1.Visible = false;
    }

    private void btnAddFrFamily_Click(object sender, EventArgs e)
    {
      this.InsertFrFamily();
    }

    private void btnSaveFrFamily_Click(object sender, EventArgs e)
    {
      this.SaveAllFrFamily();
    }

    private void btnDelFrFamily_Click(object sender, EventArgs e)
    {
      if (!this.DelFrFamily())
        return;
      this.LoadFrFamily();
    }

    private void dgvFrFamily_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
    {
      if (this.dgvFrFamily.CurrentRow == null)
        return;
      FrFamily frFamily = new FrFamily();
      FrFamily dataBoundItem = (FrFamily) this.dgvFrFamily.Rows[this.dgvFrFamily.CurrentRow.Index].DataBoundItem;
      this.oldFrFamily = new FrFamily();
      this.oldFrFamily.LsFamily = dataBoundItem.LsFamily;
      this.oldFrFamily.DBeg = dataBoundItem.DBeg;
      this.oldFrFamily.DEnd = dataBoundItem.DEnd;
      this.oldFrFamily.Period = dataBoundItem.Period;
      this.oldFrFamily.Person = dataBoundItem.Person;
      this.oldFrFamily.Uname = dataBoundItem.Uname;
      this.oldFrFamily.OnOff = Convert.ToInt16(this.dgvFrFamily.Rows[this.dgvFrFamily.CurrentRow.Index].Cells["YesNo"].Value);
      this.btnSaveFrFamily.Enabled = true;
      ((FrFamily) this.dgvFrFamily.Rows[this.dgvFrFamily.CurrentRow.Index].DataBoundItem).IsEdit = true;
    }

    private void dgvFrFamily_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
    {
      if (this.dgvFrFamily.DataSource == null)
        return;
      DataGridViewRow row = (sender as DataGridView).Rows[e.RowIndex];
      DateTime dbeg = ((FrFamily) row.DataBoundItem).DBeg;
      DateTime? periodName = this.NextMonthClosed.PeriodName;
      DateTime dateTime1 = Kvartplata.Classes.KvrplHelper.LastDay(periodName.Value);
      int num;
      if (dbeg <= dateTime1)
      {
        DateTime dend = ((FrFamily) row.DataBoundItem).DEnd;
        periodName = this.NextMonthClosed.PeriodName;
        DateTime dateTime2 = periodName.Value;
        num = dend >= dateTime2 ? 1 : 0;
      }
      else
        num = 0;
      if (num != 0)
      {
        row.DefaultCellStyle.BackColor = Color.PapayaWhip;
        row.DefaultCellStyle.ForeColor = Color.Black;
      }
      else
      {
        row.DefaultCellStyle.BackColor = Color.FromArgb((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
        row.DefaultCellStyle.ForeColor = Color.Gray;
      }
    }

    private void dgvFrFamily_CurrentCellDirtyStateChanged(object sender, EventArgs e)
    {
    }

    private void dgvFrFamily_ColumnWidthChanged(object sender, DataGridViewColumnEventArgs e)
    {
      if (this.MySettingsFrFamily.FindByName(e.Column.Name) < 0)
        return;
      this.MySettingsFrFamily.Columns[this.MySettingsFrFamily.FindByName(e.Column.Name)].Width = e.Column.Width;
      this.MySettingsFrFamily.Save();
    }

    private void dgvFrFamily_DataError(object sender, DataGridViewDataErrorEventArgs e)
    {
      Kvartplata.Classes.KvrplHelper.WriteError(this.Name, ((Control) sender).Name, e, this.ClientId);
      Kvartplata.Classes.Options.Error = false;
    }

    private void dgvFrFamily_CellEndEdit(object sender, DataGridViewCellEventArgs e)
    {
      if (this.dgvFrFamily.CurrentRow == null)
        return;
      FrFamily dataBoundItem = (FrFamily) this.dgvFrFamily.CurrentRow.DataBoundItem;
      dataBoundItem.IsEdit = true;
      if (this.dgvFrFamily.CurrentCell.Value != null)
      {
        try
        {
          string name = this.dgvFrFamily.Columns[e.ColumnIndex].Name;
          if (!(name == "MDBeg"))
          {
            if (!(name == "MDEnd"))
            {
              if (!(name == "PName"))
              {
                if (name == "YesNo")
                  dataBoundItem.OnOff = this.session.Get<YesNo>(this.dgvFrFamily.CurrentRow.Cells["YesNo"].Value).YesNoId;
              }
              else
                dataBoundItem.Person = this.session.Get<Person>(this.dgvFrFamily.CurrentRow.Cells["PName"].Value);
            }
            else
            {
              try
              {
                dataBoundItem.DEnd = Convert.ToDateTime(this.dgvFrFamily.CurrentRow.Cells["MDEnd"].Value);
              }
              catch
              {
              }
            }
          }
          else
          {
            try
            {
              dataBoundItem.DBeg = Convert.ToDateTime(this.dgvFrFamily.CurrentRow.Cells["MDBeg"].Value);
            }
            catch
            {
            }
          }
        }
        catch (Exception ex)
        {
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
        }
      }
    }

    private void LoadMspDocument()
    {
      this.tsbMultiPastTime.Enabled = false;
      this.flwlpMspDocument.Controls.Clear();
      IList<Person> personList = this.session.CreateCriteria(typeof (Person)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).Add((ICriterion) NHibernate.Criterion.Restrictions.In("Reg.RegId", (ICollection) new int[2]{ 1, 2 })).Add((ICriterion) NHibernate.Criterion.Restrictions.Or((ICriterion) NHibernate.Criterion.Restrictions.Lt("Archive", (object) 3), (ICriterion) NHibernate.Criterion.Restrictions.Eq("Archive", (object) 5))).AddOrder(Order.Asc("Archive")).AddOrder(Order.Asc("Relation.RelationId")).List<Person>();
      foreach (Person person in (IEnumerable<Person>) personList)
        Kvartplata.Classes.KvrplHelper.GetFamily(person, 1, false);
      this.dgvMspDocPers.DataSource = (object) personList;
      for (int index = 0; index < 5; ++index)
        this.dgvMspDocPers.Columns[index].Visible = false;
      this.dgvMspDocPers.Columns["FIO"].HeaderText = "Ф.И.О.";
      if (this.dgvMspDocPers.Rows.Count <= 0)
        return;
      this.dgvMspDocPers.Rows[0].Selected = true;
      this.dgvMspDocPers.CurrentCell = this.dgvMspDocPers.Rows[0].Cells["FIO"];
      this.dgvMspDocPers.Focus();
      this.dgvMspDocPers_CellMouseClick((object) null, (DataGridViewCellMouseEventArgs) null);
    }

    private void dgvMspDocPers_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
    {
      this.flwlpMspDocument.Controls.Clear();
      foreach (MspDocument mspDocument in (IEnumerable<MspDocument>) this.session.CreateCriteria(typeof (MspDocument)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Person.PersonId", (object) ((Person) this.dgvMspDocPers.Rows[this.dgvMspDocPers.CurrentRow.Index].DataBoundItem).PersonId)).List<MspDocument>())
      {
        UCMspDocument ucMspDocument = new UCMspDocument(mspDocument, false);
        ucMspDocument.Selected = false;
        ucMspDocument.SelectedChanged += new EventHandler(this.ucServParam_SelectedChanged);
        this.flwlpMspDocument.Controls.Add((Control) ucMspDocument);
      }
    }

    private void btnAddPersDoc_Click(object sender, EventArgs e)
    {
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(46, 2, this.Client.Company, true))
        return;
      if (this.dgvMspDocPers.Rows.Count > 0 && this.dgvMspDocPers.CurrentRow != null)
      {
        UCMspDocument ucMspDocument = new UCMspDocument(new MspDocument() { Person = (Person) this.dgvMspDocPers.Rows[this.dgvMspDocPers.CurrentRow.Index].DataBoundItem, DateIssue = DateTime.Now }, true);
        ucMspDocument.Selected = true;
        ucMspDocument.SelectedChanged += new EventHandler(this.ucServParam_SelectedChanged);
        this.flwlpMspDocument.Controls.Add((Control) ucMspDocument);
      }
      else
      {
        int num = (int) MessageBox.Show("Невозможно добавить запись. Выберите человека и нажмите добавить", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
      }
    }

    private void ucServParam_SelectedChanged(object sender, EventArgs e)
    {
      this.UnSelect(sender);
    }

    private void btnDeletePersDoc_Click(object sender, EventArgs e)
    {
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(46, 2, this.Client.Company, true))
        return;
      if (MessageBox.Show("Вы уверены, что хотите удалить запись", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) != DialogResult.OK)
        return;
      try
      {
        UCMspDocument ucMspDocument = (UCMspDocument) null;
        for (int index = 0; index < this.flwlpMspDocument.Controls.Count; ++index)
        {
          if (((UCMspDocument) this.flwlpMspDocument.Controls[index]).Selected)
          {
            ucMspDocument = (UCMspDocument) this.flwlpMspDocument.Controls[index];
            break;
          }
        }
        if (ucMspDocument != null)
        {
          this.session.Delete((object) ucMspDocument.MspDocument);
          this.session.Flush();
          this.flwlpMspDocument.Controls.Remove((Control) ucMspDocument);
        }
        else
        {
          int num = (int) MessageBox.Show("Невозможно удалить документ. Выберите текущий документ и нажмите удалить", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show("Невозможно удалить документ, т.к. к нему привязана льгота", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
      }
    }

    private void UnSelect(object sender)
    {
      foreach (UCMspDocument control in (ArrangedElementCollection) this.flwlpMspDocument.Controls)
      {
        if (control != sender)
          control.Selected = false;
      }
      this.flwlpMspDocument.Refresh();
    }

    private void LoadPensDoc()
    {
      this.tsbMultiPastTime.Enabled = false;
      this.flpnPensDoc.Controls.Clear();
      IList<Person> personList = this.session.CreateCriteria(typeof (Person)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).Add((ICriterion) NHibernate.Criterion.Restrictions.In("Reg.RegId", (ICollection) new int[2]{ 1, 2 })).Add((ICriterion) NHibernate.Criterion.Restrictions.Or((ICriterion) NHibernate.Criterion.Restrictions.Lt("Archive", (object) 3), (ICriterion) NHibernate.Criterion.Restrictions.Eq("Archive", (object) 5))).AddOrder(Order.Asc("Archive")).AddOrder(Order.Asc("Relation.RelationId")).List<Person>();
      foreach (Person person in (IEnumerable<Person>) personList)
        Kvartplata.Classes.KvrplHelper.GetFamily(person, 1, false);
      this.dgvPensDocPers.DataSource = (object) personList;
      for (int index = 0; index < 5; ++index)
        this.dgvPensDocPers.Columns[index].Visible = false;
      this.dgvPensDocPers.Columns["FIO"].HeaderText = "Ф.И.О.";
      if (this.dgvPensDocPers.Rows.Count <= 0)
        return;
      this.dgvPensDocPers.Rows[0].Selected = true;
      this.dgvPensDocPers.CurrentCell = this.dgvPensDocPers.Rows[0].Cells["FIO"];
      this.dgvPensDocPers.Focus();
      this.dgvPensDocPers_CellMouseClick((object) null, (DataGridViewCellMouseEventArgs) null);
    }

    private void dgvPensDocPers_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)
    {
      this.flpnPensDoc.Controls.Clear();
      this.flpnPFR.Controls.Clear();
      foreach (PensDoc pensDoc in (IEnumerable<PensDoc>) this.session.CreateCriteria(typeof (PensDoc)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Person.PersonId", (object) ((Person) this.dgvPensDocPers.Rows[this.dgvPensDocPers.CurrentRow.Index].DataBoundItem).PersonId)).List<PensDoc>())
      {
        UCPensDoc ucPensDoc = new UCPensDoc(pensDoc, false);
        ucPensDoc.Selected = false;
        ucPensDoc.SelectedChanged += new EventHandler(this.ucPensDoc_SelectedChanged);
        this.flpnPensDoc.Controls.Add((Control) ucPensDoc);
      }
      UCPfr ucPfr = new UCPfr((Person) this.dgvPensDocPers.Rows[this.dgvPensDocPers.CurrentRow.Index].DataBoundItem, false);
      ucPfr.Selected = false;
      ucPfr.SelectedChanged += new EventHandler(this.ucPfr_SelectedChanged);
      this.flpnPFR.Controls.Add((Control) ucPfr);
    }

    private void btmAddPensDoc_Click(object sender, EventArgs e)
    {
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(46, 2, this.Client.Company, true))
        return;
      if (this.dgvPensDocPers.Rows.Count > 0 && this.dgvPensDocPers.CurrentRow != null)
      {
        PensDoc pensDoc = new PensDoc();
        IList<int> intList = this.session.CreateSQLQuery("select DBA.gen_id('Pensdoc',1)").List<int>();
        pensDoc.IdPensDoc = intList[0];
        pensDoc.Person = (Person) this.dgvPensDocPers.Rows[this.dgvPensDocPers.CurrentRow.Index].DataBoundItem;
        pensDoc.DatePens = new DateTime?(DateTime.Now);
        pensDoc.DBeg = DateTime.Now;
        pensDoc.DEnd = Convert.ToDateTime("31.12.2999");
        UCPensDoc ucPensDoc = new UCPensDoc(pensDoc, true);
        ucPensDoc.Selected = true;
        ucPensDoc.SelectedChanged += new EventHandler(this.ucServParam_SelectedChanged);
        this.flpnPensDoc.Controls.Add((Control) ucPensDoc);
      }
      else
      {
        int num = (int) MessageBox.Show("Невозможно добавить запись. Выберите человека и нажмите добавить", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
      }
    }

    private void ucPensDoc_SelectedChanged(object sender, EventArgs e)
    {
      this.UnSelectPensDoc(sender);
    }

    private void btnDeletePensDoc_Click(object sender, EventArgs e)
    {
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(46, 2, this.Client.Company, true))
        return;
      if (MessageBox.Show("Вы уверены, что хотите удалить запись", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) != DialogResult.OK)
        return;
      try
      {
        UCPensDoc ucPensDoc = (UCPensDoc) null;
        for (int index = 0; index < this.flpnPensDoc.Controls.Count; ++index)
        {
          if (((UCPensDoc) this.flpnPensDoc.Controls[index]).Selected)
          {
            ucPensDoc = (UCPensDoc) this.flpnPensDoc.Controls[index];
            break;
          }
        }
        if (ucPensDoc != null)
        {
          this.session.Delete((object) ucPensDoc.PensDoc);
          this.session.Flush();
          this.flpnPensDoc.Controls.Remove((Control) ucPensDoc);
        }
        else
        {
          int num = (int) MessageBox.Show("Невозможно удалить документ. Выберите текущий документ и нажмите удалить", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
      }
      catch
      {
        int num = (int) MessageBox.Show("Невозможно удалить документ, т.к. к нему привязана льгота", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
      }
    }

    private void UnSelectPensDoc(object sender)
    {
      foreach (UCPensDoc control in (ArrangedElementCollection) this.flpnPensDoc.Controls)
      {
        if (control != sender)
          control.Selected = false;
      }
      this.flpnPensDoc.Refresh();
    }

    private void LoadPfr()
    {
      this.flpnPFR.Controls.Clear();
    }

    private void ucPfr_SelectedChanged(object sender, EventArgs e)
    {
      this.UnSelectPfr(sender);
    }

    private void UnSelectPfr(object sender)
    {
      foreach (UCPfr control in (ArrangedElementCollection) this.flpnPFR.Controls)
      {
        if (control != sender)
          control.Selected = false;
      }
      this.flpnPFR.Refresh();
    }

    private void CreateLsClient(Kvartplata.Classes.Complex complex)
    {
      Kvartplata.Classes.LsClient lsClient1 = this.session.Get<Kvartplata.Classes.LsClient>((object) this.Client.ClientId);
      Kvartplata.Classes.LsClient lsClient2 = new Kvartplata.Classes.LsClient();
      Kvartplata.Classes.LsClient lsClient3 = Kvartplata.Classes.KvrplHelper.NewLsClient(lsClient1.Company.Raion, lsClient1.Company, lsClient1.Home, complex);
      this.session.Clear();
      if (lsClient3 == null)
        return;
      this.reloadList = true;
      this.Client = lsClient3;
      this.ClientId = lsClient3.ClientId;
      this.tabControl1_SelectedIndexChanged((object) null, (EventArgs) null);
      if (Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(1, this.Client.Company)) == 28)
      {
        int num = (int) MessageBox.Show("Не забудьте занести лицевые сторонних организаций", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
      }
      this.LoadTitul((short) 1);
    }

    private void LoadTitul(short VisibleParam)
    {
      Kvartplata.Classes.Options.Company = this.Client.Company;
      this.city = Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(1, this.Client.Company));
      if (this.city == 0)
        this.city = Kvartplata.Classes.Options.City;
      this.LoadHeadline();
      this.Proverka();
      this.tbFamily.Enabled = false;
      this.cbShowAnotherOrg.Checked = Kvartplata.Classes.Options.ShowAnotherOrg;
      IList<ClientParam> clientParamList1 = this.session.CreateQuery(string.Format("select c from ClientParam c, Param p where c.Param.ParamId=p.ParamId and  c.ClientId={0} and c.Period.PeriodId={1} and p.ParamId=107 and (p.Param_type={2} or p.Param_type={3})  and c.DEnd >= '{4}'  order by p.Sorter, c.DBeg ", (object) this.Client.ClientId, (object) 0, (object) (short) 3, (object) (short) 0, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(this.CurrentPeriod.PeriodName.Value))).List<ClientParam>();
      if (clientParamList1 != null && clientParamList1.Count > 0 && (clientParamList1[0].ParamValue == 4.0 || clientParamList1[0].ParamValue == 5.0))
      {
        this.lblp3LsClient.ForeColor = Color.DarkGray;
        this.lblp3Address.ForeColor = Color.DarkGray;
        this.lblp3FIO.ForeColor = Color.DarkGray;
      }
      else
      {
        this.lblp3LsClient.ForeColor = Color.Black;
        this.lblp3Address.ForeColor = Color.Black;
        this.lblp3FIO.ForeColor = Color.Black;
      }
      if ((uint) VisibleParam <= 0U)
        return;
      this.tbFamily.Text = this.Client.Fio;
      this.tbSurFlat.Text = this.address.SurFlat;
      this.tbEntrance.Text = this.Client.Entrance.ToString();
      this.tbFloor.Text = this.Client.Floor.ToString();
      this.tbOldId.Text = this.Client.OldId.ToString();
      this.tbRemark.Text = this.Client.Remark;
      this.tbPhone.Text = this.Client.Phone;
      this.cbFlat.DataSource = (object) this.session.CreateQuery(string.Format("select f from Flat f where f.Home.IdHome={0} order by DBA.LENGTHHOME(f.NFlat)", (object) this.Client.Home.IdHome)).List<Kvartplata.Classes.Flat>();
      this.cbFlat.DisplayMember = "NFlat";
      this.cbFlat.ValueMember = "IdFlat";
      this.cbFlat.SelectedValue = (object) this.Client.Flat.IdFlat;
      this.cmbArFlat.DataSource = (object) this.session.CreateQuery(string.Format("select f from Flat f where f.Home.IdHome={0} order by DBA.LENGTHHOME(f.NFlat)", (object) this.Client.Home.IdHome)).List<Kvartplata.Classes.Flat>();
      this.cmbArFlat.DisplayMember = "NFlat";
      this.cmbArFlat.ValueMember = "IdFlat";
      this.cmbArFlat.SelectedValue = (object) this.Client.Flat.IdFlat;
      this.btnDelRecord.Enabled = true;
      this.btnSave.Enabled = false;
      this.btnAddRecord.Enabled = true;
      this.lblMspT.Text = "";
      this.lblJilSquareT.Text = "";
      this.lblAllSquareT.Text = "";
      this.lblFlatCategoryT.Text = "";
      this.lblRightDocT.Text = "";
      this.lblStatusT.Text = "";
      this.lblNumJilec.Text = "";
      this.lblTempNumJilec.Text = "";
      this.lblTypeOwn.Text = "";
      this.lblMspT.Text = this.slg;
      IList<ClientParam> clientParamList2 = this.session.CreateQuery(string.Format("select c from ClientParam c, Param p where c.Param.ParamId=p.ParamId and  c.ClientId={0} and c.Period.PeriodId={1} and (p.Param_type={2} or p.Param_type={3})  and c.DBeg<=today() and c.DEnd >= today()  order by p.Sorter, c.DBeg ", (object) this.Client.ClientId, (object) 0, (object) (short) 3, (object) (short) 0, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(this.CurrentPeriod.PeriodName.Value))).List<ClientParam>();
      this.session.CreateCriteria(typeof (Transfer)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Company", (object) this.Client.Company)).List();
      int num1 = 0;
      int num2 = 0;
      IList<CmpParam> cmpParamList = this.session.CreateQuery(string.Format("select c from CmpParam c where c.Company_id = {0} and c.Param_id={1} and c.Period.PeriodId={2} and DEnd >= '{3}'", (object) this.CompanyId, (object) 202, (object) 0, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(this.CurrentPeriod.PeriodName.Value))).List<CmpParam>();
      double? paramValue;
      int num3;
      if (cmpParamList.Count > 0)
      {
        paramValue = cmpParamList[0].Param_value;
        double num4 = 0.0;
        num3 = paramValue.GetValueOrDefault() == num4 ? (!paramValue.HasValue ? 1 : 0) : 1;
      }
      else
        num3 = 0;
      if (num3 != 0)
      {
        num1 = Convert.ToInt32(this.session.CreateQuery(string.Format("select count(*) from Person p where p.LsClient.ClientId={0} and p.Reg.RegId in (1) and p.FirstPropDate<='{1}' and ((p.Archive=0 or p.Archive=5) or ((p.Archive=1 or p.Archive=2) and isnull(p.OutToDate,'2999-12-31')>='{1}' and isnull(p.DieDate,'2999-12-31')>='{1}'))", (object) this.Client.ClientId, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(DateTime.Now))).List()[0]);
        num2 = Convert.ToInt32(this.session.CreateQuery(string.Format("select count(*) from Person p where p.LsClient.ClientId={0} and p.Reg.RegId in (2) and p.FirstPropDate<='{1}' and ((p.Archive=0 or p.Archive=5) or ((p.Archive=1 or p.Archive=2) and isnull(p.OutToDate,'2999-12-31')>='{1}' and isnull(p.DieDate,'2999-12-31')>='{1}'))", (object) this.Client.ClientId, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(DateTime.Now))).List()[0]);
      }
      foreach (ClientParam clientParam in (IEnumerable<ClientParam>) clientParamList2)
      {
        double num4;
        if ((int) clientParam.ParamId == 1)
        {
          Label lblJilSquareT = this.lblJilSquareT;
          num4 = clientParam.ParamValue;
          string str = num4.ToString();
          lblJilSquareT.Text = str;
        }
        if ((int) clientParam.ParamId == 2)
        {
          Label lblAllSquareT = this.lblAllSquareT;
          num4 = clientParam.ParamValue;
          string str = num4.ToString();
          lblAllSquareT.Text = str;
        }
        if ((int) clientParam.ParamId == 103)
        {
          try
          {
            this.lblFlatCategoryT.Text = this.session.Get<FlatCategory>((object) (short) clientParam.ParamValue).FlatCategoryName;
          }
          catch
          {
          }
        }
        if ((int) clientParam.ParamId == 104)
        {
          try
          {
            this.lblRightDocT.Text = this.session.Get<RightDoc>((object) (short) clientParam.ParamValue).RightDocName;
          }
          catch
          {
          }
        }
        if ((int) clientParam.ParamId == 107)
        {
          try
          {
            this.lblStatusT.Text = this.session.Get<StatLic>((object) (short) clientParam.ParamValue).StatLicName;
          }
          catch
          {
          }
        }
        if ((int) clientParam.ParamId == 101)
        {
          try
          {
            int num5;
            if (cmpParamList.Count != 0)
            {
              if (cmpParamList.Count > 0)
              {
                paramValue = cmpParamList[0].Param_value;
                num4 = 0.0;
                num5 = paramValue.GetValueOrDefault() == num4 ? (paramValue.HasValue ? 1 : 0) : 0;
              }
              else
                num5 = 0;
            }
            else
              num5 = 1;
            if (num5 != 0)
              num1 = Convert.ToInt32(clientParam.ParamValue);
          }
          catch
          {
          }
        }
        if ((int) clientParam.ParamId == 102)
        {
          try
          {
            int num5;
            if (cmpParamList.Count != 0)
            {
              if (cmpParamList.Count > 0)
              {
                paramValue = cmpParamList[0].Param_value;
                num4 = 0.0;
                num5 = paramValue.GetValueOrDefault() == num4 ? (paramValue.HasValue ? 1 : 0) : 0;
              }
              else
                num5 = 0;
            }
            else
              num5 = 1;
            if (num5 != 0)
              num2 = Convert.ToInt32(clientParam.ParamValue);
          }
          catch
          {
          }
        }
        if ((int) clientParam.ParamId == 117)
        {
          try
          {
            this.lblTypeOwn.Text = this.session.Get<RightDoc>((object) (short) clientParam.ParamValue).RightDocName;
          }
          catch
          {
          }
        }
      }
      this.lblNumJilec.Text = num1.ToString();
      this.tsbMultiPastTime.Enabled = false;
      this.lblTempNumJilec.Text = num2.ToString();
      if (Kvartplata.Classes.KvrplHelper.CheckProxy(38, 1, this.Client.Company, false))
      {
        try
        {
          this.LoadSupplierClient();
        }
        catch
        {
        }
      }
      try
      {
        this.txbDebt.Text = "";
        this.LoadDebtInfo();
      }
      catch
      {
      }
    }

    private void LoadHeadline()
    {
      try
      {
        this.address = (Kvartplata.Classes.Address) this.session.CreateQuery(string.Format("select new Address(c.ClientId,d.NameStr,h.NHome,h.HomeKorp,f.NFlat,c.SurFlat) from Home h, Str d, Flat f,LsClient c where h.Str=d and c.Home=h and c.Flat=f and c.ClientId={0} ", (object) this.ClientId)).List()[0];
        this.Client.Fio = !Kvartplata.Classes.KvrplHelper.CheckProxy(48, 1, this.Client.Company, false) ? "" : Kvartplata.Classes.KvrplHelper.GetFio1(this.Client.ClientId);
        this.lblp3LsClient.Text = this.ClientId.ToString();
        if (this.Client.Complex.IdFk == Kvartplata.Classes.Options.Complex.IdFk)
        {
          this.lblp3FIO.Text = this.Client.Fio;
        }
        else
        {
          IList<LsArenda> lsArendaList = this.session.CreateQuery(string.Format("select a from LsArenda a left join fetch a.BaseOrg where a.LsClient.ClientId={0}", (object) this.Client.ClientId)).List<LsArenda>();
          if (lsArendaList.Count > 0)
            this.lblp3FIO.Text = "Договор №" + lsArendaList[0].DogovorNum + "   " + lsArendaList[0].NameOrg;
          else
            this.lblp3FIO.Text = "";
        }
        this.lblp3Address.Text = string.Format("{0} д.{1} {2} кв.{3} {4}", (object) this.address.Str, (object) this.address.Number, (object) (this.address.Korp == "" || this.address.Korp == "0" || this.address.Korp == null ? "" : "к." + this.address.Korp), (object) this.address.Flat, (object) (this.address.SurFlat == "" || this.address.SurFlat == "0" || this.address.SurFlat == null ? "" : "комн." + this.address.SurFlat));
        try
        {
          this.Client.Company = this.session.Get<Kvartplata.Classes.Company>((object) this.Client.Company.CompanyId);
          if (this.city != 3)
            this.lblp3Address.Text = this.lblp3Address.Text + " (" + this.Client.Company.CompanySName + ")";
        }
        catch
        {
        }
        this.slg = "";
        foreach (LsMSPGku lsMspGku in (IEnumerable<LsMSPGku>) this.session.CreateCriteria(typeof (LsMSPGku)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Period.PeriodId", (object) 0)).Add((ICriterion) NHibernate.Criterion.Restrictions.Ge("DEnd", (object) DateTime.Now)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("OnOff", (object) (short) 1)).AddOrder(Order.Asc("Person.PersonId")).AddOrder(Order.Desc("OnOff")).AddOrder(Order.Asc("MSPId.MSP_id")).AddOrder(Order.Desc("DBeg")).List<LsMSPGku>())
          this.slg = this.slg + lsMspGku.MSPId.MSP_id.ToString() + "; ";
        this.lblp3Address.Text = this.slg != "" ? (this.lblp3Address.Text = this.lblp3Address.Text + "    Льготы : " + this.slg) : this.lblp3Address.Text;
        Transfer transfer = this.session.CreateQuery("from Transfer t where t.Company=:cmp").SetParameter<Kvartplata.Classes.Company>("cmp", this.Client.Company).UniqueResult<Transfer>();
        Label lblp3Address1 = this.lblp3Address;
        lblp3Address1.Text = lblp3Address1.Text + " (лу:" + (object) this.Client.Company.CompanyId + ", кв:" + (object) transfer.KvrCmp + ", пасп:" + (object) transfer.PaspCmp + ")";
        try
        {
          if ((uint) this.Client.Home.IdHome <= 0U)
            return;
          object obj = this.session.CreateSQLQuery("select districtname from dba.district where idgr=3 and iddistrict in (select iddistrict from dba.districthome where idhome=:h)").SetParameter<int>("h", this.Client.Home.IdHome).UniqueResult();
          if (obj != null)
          {
            Label lblp3Address2 = this.lblp3Address;
            string str = lblp3Address2.Text + ", добавочный адрес( " + obj.ToString() + " )";
            lblp3Address2.Text = str;
          }
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
      }
    }

    private void LoadSupplierClient()
    {
      this.dgvSupplierClient.DataSource = (object) null;
      this.dgvSupplierClient.Columns.Clear();
      ICriteria criteria = this.session.CreateCriteria(typeof (SupplierClient)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Company", (object) this.Client.Company)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client));
      IList<SupplierClient> supplierClientList = criteria.List<SupplierClient>();
      this.oldListSupplierClient = (IList<SupplierClient>) new List<SupplierClient>();
      this.oldListSupplierClient = criteria.List<SupplierClient>();
      this.dgvSupplierClient.DataSource = (object) supplierClientList;
      foreach (SupplierClient supplierClient in (List<SupplierClient>) this.dgvSupplierClient.DataSource)
      {
        supplierClient.IsEdit = false;
        supplierClient.OldHashCode = supplierClient.GetHashCode();
        supplierClient.IsInsert = false;
      }
      this.session.Clear();
      this.oldListSupplierClient = (IList<SupplierClient>) new List<SupplierClient>();
      this.oldListSupplierClient = criteria.List<SupplierClient>();
      int index = 0;
      foreach (SupplierClient supplierClient in (List<SupplierClient>) this.dgvSupplierClient.DataSource)
      {
        this.oldListSupplierClient[index].OldHashCode = supplierClient.OldHashCode;
        ++index;
      }
      this.SetViewSupplierClient(false);
      this.MySettingsSupplierClient.GridName = "SupplierClient";
      this.LoadSettingsSupplierClient();
    }

    private void SetViewArendaLs(bool addNewRecord = false)
    {
      IList<BaseOrg> source = this.session.CreateQuery("select new BaseOrg(b.BaseOrgId,b.NameOrgMin) from BaseOrg b order by b.NameOrgMin").List<BaseOrg>();
      if (addNewRecord)
        source.Remove(source.First<BaseOrg>((Func<BaseOrg, bool>) (x => x.BaseOrgId == -39999859)));
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dvgArendaLS, 0, (IList) source, "BaseOrgId", "NameOrgMin", "Организация", "Org", 7, 400);
      MaskedTextBoxColumn maskedTextBoxColumn = new MaskedTextBoxColumn();
      maskedTextBoxColumn.Width = 120;
      maskedTextBoxColumn.HeaderText = "Лицевой сторонней организации";
      maskedTextBoxColumn.Name = "SupplierClientId";
      maskedTextBoxColumn.ReadOnly = false;
      this.dvgArendaLS.Columns.Insert(1, (DataGridViewColumn) maskedTextBoxColumn);
      Kvartplata.Classes.KvrplHelper.ViewEdit(this.dvgArendaLS);
      foreach (DataGridViewRow row in (IEnumerable) this.dvgArendaLS.Rows)
      {
        if (((SupplierClient) row.DataBoundItem).Supplier != null)
          row.Cells["Org"].Value = (object) ((SupplierClient) row.DataBoundItem).Supplier.BaseOrgId;
        row.Cells["SupplierClientId"].Value = (object) ((SupplierClient) row.DataBoundItem).SupplierClientId;
      }
    }

    private void LoadSupplierClientForArenda()
    {
      this.dvgArendaLS.DataSource = (object) null;
      this.dvgArendaLS.Columns.Clear();
      ICriteria criteria = this.session.CreateCriteria(typeof (SupplierClient)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Company", (object) this.Client.Company)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client));
      IList<SupplierClient> supplierClientList = criteria.List<SupplierClient>();
      this.oldListSupplierClient = (IList<SupplierClient>) new List<SupplierClient>();
      this.oldListSupplierClient = criteria.List<SupplierClient>();
      this.dvgArendaLS.DataSource = (object) supplierClientList;
      foreach (SupplierClient supplierClient in (List<SupplierClient>) this.dvgArendaLS.DataSource)
      {
        supplierClient.IsEdit = false;
        supplierClient.OldHashCode = supplierClient.GetHashCode();
        supplierClient.IsInsert = false;
      }
      this.session.Clear();
      this.oldListSupplierClient = (IList<SupplierClient>) new List<SupplierClient>();
      this.oldListSupplierClient = criteria.List<SupplierClient>();
      int index = 0;
      foreach (SupplierClient supplierClient in (List<SupplierClient>) this.dvgArendaLS.DataSource)
      {
        this.oldListSupplierClient[index].OldHashCode = supplierClient.OldHashCode;
        ++index;
      }
      this.SetViewSupplierClientForArenda(false);
    }

    private void InsertSupplierClientForArenda()
    {
      this.btnDelRecord.Enabled = false;
      this.btnSave.Enabled = true;
      this.session = Kvartplata.Domain.CurrentSession;
      SupplierClient supplierClient = new SupplierClient();
      supplierClient.Company = this.Client.Company;
      supplierClient.LsClient = this.Client;
      supplierClient.IsInsert = true;
      supplierClient.IsEdit = true;
      IList<SupplierClient> supplierClientList = (IList<SupplierClient>) new List<SupplierClient>();
      if ((uint) this.dvgArendaLS.Rows.Count > 0U)
        supplierClientList = (IList<SupplierClient>) (this.dvgArendaLS.DataSource as List<SupplierClient>);
      supplierClientList.Add(supplierClient);
      this.dvgArendaLS.Columns.Clear();
      this.dvgArendaLS.DataSource = (object) null;
      this.dvgArendaLS.DataSource = (object) supplierClientList;
      this.session.Clear();
      this.SetViewSupplierClientForArenda(true);
      if (this.dvgArendaLS.Rows.Count <= 0)
        return;
      this.dvgArendaLS.CurrentCell = this.dvgArendaLS.Rows[this.dvgArendaLS.Rows.Count - 1].Cells["Org"];
    }

    private void DeleteSupplierClientForArenda()
    {
      if (this.dvgArendaLS.Rows.Count <= 0 || this.dvgArendaLS.CurrentRow.Index < 0 || MessageBox.Show("Вы хотите удалить текущую запись?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) != DialogResult.OK)
        return;
      this.session.Clear();
      SupplierClient dataBoundItem = (SupplierClient) this.dvgArendaLS.CurrentRow.DataBoundItem;
      if (dataBoundItem.Supplier.BaseOrgId == -39999859)
      {
        int num1 = (int) MessageBox.Show("Невозможно удалить запись капитального ремонта", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
      else
      {
        try
        {
          this.session.Delete((object) dataBoundItem);
          this.session.Flush();
        }
        catch (Exception ex)
        {
          int num2 = (int) MessageBox.Show("Невозможно удалить запись", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
          return;
        }
        this.session.Clear();
        this.LoadSupplierClientForArenda();
      }
    }

    private bool SaveAllSupplierClientForArenda()
    {
      bool flag = true;
      foreach (DataGridViewRow row in (IEnumerable) this.dvgArendaLS.Rows)
      {
        this.dvgArendaLS.Rows[row.Index].Selected = true;
        this.dvgArendaLS.CurrentCell = row.Cells[0];
        Application.DoEvents();
        if (((SupplierClient) row.DataBoundItem).IsEdit)
        {
          this.oldSupplierClient = new SupplierClient();
          foreach (SupplierClient supplierClient in (IEnumerable<SupplierClient>) this.oldListSupplierClient)
          {
            if (supplierClient.OldHashCode == ((SupplierClient) row.DataBoundItem).OldHashCode)
            {
              this.oldSupplierClient = supplierClient;
              break;
            }
          }
          if (!this.SaveSupplierClientForArenda())
            flag = false;
        }
        ((SupplierClient) row.DataBoundItem).IsEdit = false;
      }
      this.btnAddRecord.Enabled = true;
      this.btnDelRecord.Enabled = true;
      return flag;
    }

    private bool SaveSupplierClientForArenda()
    {
      if (this.dvgArendaLS.Rows.Count <= 0 || this.dvgArendaLS.CurrentRow.Index < 0)
        return true;
      this.session = Kvartplata.Domain.CurrentSession;
      SupplierClient dataBoundItem = (SupplierClient) this.dvgArendaLS.CurrentRow.DataBoundItem;
      this.InsertRecord = dataBoundItem.Supplier == null;
      if (this.dvgArendaLS.CurrentRow.Cells["Org"].Value != null)
      {
        dataBoundItem.Supplier = this.session.Get<BaseOrg>((object) Convert.ToInt32(this.dvgArendaLS.CurrentRow.Cells["Org"].Value));
        if (this.dvgArendaLS.CurrentRow.Cells["SupplierClientId"].Value != null)
        {
          try
          {
            dataBoundItem.SupplierClientId = Convert.ToDouble(this.dvgArendaLS.CurrentRow.Cells["SupplierClientId"].Value);
          }
          catch
          {
            int num = (int) MessageBox.Show("Некорректно введен лицевой счет", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            return false;
          }
        }
        dataBoundItem.UName = Kvartplata.Classes.Options.Login;
        dataBoundItem.DEdit = DateTime.Now.Date;
        try
        {
          if (dataBoundItem.IsInsert)
          {
            dataBoundItem.IsInsert = false;
            this.session.Save((object) dataBoundItem);
            this.session.Flush();
          }
          else
            this.session.CreateQuery("update SupplierClient set Supplier.BaseOrgId=:org, SupplierClientId=:id,UName=:uname,DEdit=:dedit where Company.CompanyId=:company and LsClient.ClientId=:ls and Supplier.BaseOrgId=:oldorg and SupplierClientId=:oldid").SetParameter<int>("org", dataBoundItem.Supplier.BaseOrgId).SetParameter<double>("id", dataBoundItem.SupplierClientId).SetParameter<short>("company", this.Client.Company.CompanyId).SetParameter<int>("ls", this.Client.ClientId).SetParameter<string>("uname", dataBoundItem.UName).SetParameter<DateTime>("dedit", dataBoundItem.DEdit).SetParameter<int>("oldorg", this.oldSupplierClient.Supplier.BaseOrgId).SetParameter<double>("oldid", this.oldSupplierClient.SupplierClientId).ExecuteUpdate();
          return true;
        }
        catch (Exception ex)
        {
          int num = (int) MessageBox.Show("Невозможно сохранить запись", "Ошибка", MessageBoxButtons.OK);
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
          return false;
        }
      }
      else
      {
        int num = (int) MessageBox.Show("Выберите организацию из списка", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        return false;
      }
    }

    private void SetViewSupplierClientForArenda(bool addNewRecord = false)
    {
      IList<BaseOrg> baseOrgList = this.session.CreateQuery("select new BaseOrg(b.BaseOrgId,b.NameOrgMin) from BaseOrg b order by b.NameOrgMin").List<BaseOrg>();
      if (!addNewRecord)
        ;
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dvgArendaLS, 0, (IList) baseOrgList, "BaseOrgId", "NameOrgMin", "Организация", "Org", 7, 400);
      MaskedTextBoxColumn maskedTextBoxColumn = new MaskedTextBoxColumn();
      maskedTextBoxColumn.Width = 120;
      maskedTextBoxColumn.HeaderText = "Лицевой сторонней организации";
      maskedTextBoxColumn.Name = "SupplierClientId";
      maskedTextBoxColumn.ReadOnly = false;
      this.dvgArendaLS.Columns.Insert(1, (DataGridViewColumn) maskedTextBoxColumn);
      Kvartplata.Classes.KvrplHelper.ViewEdit(this.dvgArendaLS);
      foreach (DataGridViewRow row in (IEnumerable) this.dvgArendaLS.Rows)
      {
        if (((SupplierClient) row.DataBoundItem).Supplier != null)
          row.Cells["Org"].Value = (object) ((SupplierClient) row.DataBoundItem).Supplier.BaseOrgId;
        row.Cells["SupplierClientId"].Value = (object) ((SupplierClient) row.DataBoundItem).SupplierClientId;
      }
    }

    private void dvgArendaLS_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
    {
      this.btnSave.Enabled = true;
      this.btnDelRecord.Enabled = false;
    }

    private void dvgArendaLS_CellEndEdit(object sender, DataGridViewCellEventArgs e)
    {
      if (this.dvgArendaLS.CurrentRow == null)
        return;
      SupplierClient dataBoundItem = (SupplierClient) this.dvgArendaLS.CurrentRow.DataBoundItem;
      dataBoundItem.IsEdit = true;
      if (this.dvgArendaLS.CurrentCell.Value != null)
      {
        try
        {
          if (this.dvgArendaLS.Columns[e.ColumnIndex].Name == "Org")
            dataBoundItem.Supplier = this.session.Get<BaseOrg>(this.dvgArendaLS.CurrentRow.Cells["Org"].Value);
        }
        catch (Exception ex)
        {
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
        }
      }
    }

    private void LoadSettingsSupplierClient()
    {
      this.MySettingsSupplierClient.Load();
      foreach (DataGridViewColumn column in (BaseCollection) this.dgvSupplierClient.Columns)
        this.MySettingsSupplierClient.GetMySettings(column);
    }

    private void dgvSupplierClient_ColumnWidthChanged(object sender, DataGridViewColumnEventArgs e)
    {
      if (this.MySettingsSupplierClient.FindByName(e.Column.Name) < 0)
        return;
      this.MySettingsSupplierClient.Columns[this.MySettingsSupplierClient.FindByName(e.Column.Name)].Width = e.Column.Width;
      this.MySettingsSupplierClient.Save();
    }

    private void SetViewSupplierClient(bool addNewRecord = false)
    {
      IList<BaseOrg> source = this.session.CreateQuery("select new BaseOrg(b.BaseOrgId,b.NameOrgMin) from BaseOrg b order by b.NameOrgMin").List<BaseOrg>();
      if (addNewRecord)
      {
        BaseOrg baseOrg = source.FirstOrDefault<BaseOrg>((Func<BaseOrg, bool>) (x => x.BaseOrgId == -39999859));
        if (baseOrg != null)
          source.Remove(baseOrg);
      }
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvSupplierClient, 0, (IList) source, "BaseOrgId", "NameOrgMin", "Организация", "Org", 7, 400);
      MaskedTextBoxColumn maskedTextBoxColumn = new MaskedTextBoxColumn();
      maskedTextBoxColumn.Width = 120;
      maskedTextBoxColumn.HeaderText = "Лицевой сторонней организации";
      maskedTextBoxColumn.Name = "SupplierClientId";
      maskedTextBoxColumn.ReadOnly = false;
      this.dgvSupplierClient.Columns.Insert(1, (DataGridViewColumn) maskedTextBoxColumn);
      Kvartplata.Classes.KvrplHelper.ViewEdit(this.dgvSupplierClient);
      foreach (DataGridViewRow row in (IEnumerable) this.dgvSupplierClient.Rows)
      {
        if (((SupplierClient) row.DataBoundItem).Supplier != null)
          row.Cells["Org"].Value = (object) ((SupplierClient) row.DataBoundItem).Supplier.BaseOrgId;
        row.Cells["SupplierClientId"].Value = (object) ((SupplierClient) row.DataBoundItem).SupplierClientId;
      }
    }

    private void InsertSupplierClient()
    {
      this.btnDelRecord.Enabled = false;
      this.btnSave.Enabled = true;
      this.session = Kvartplata.Domain.CurrentSession;
      SupplierClient supplierClient = new SupplierClient();
      supplierClient.Company = this.Client.Company;
      supplierClient.LsClient = this.Client;
      supplierClient.IsInsert = true;
      supplierClient.IsEdit = true;
      IList<SupplierClient> supplierClientList = (IList<SupplierClient>) new List<SupplierClient>();
      if ((uint) this.dgvSupplierClient.Rows.Count > 0U)
        supplierClientList = (IList<SupplierClient>) (this.dgvSupplierClient.DataSource as List<SupplierClient>);
      supplierClientList.Add(supplierClient);
      this.dgvSupplierClient.Columns.Clear();
      this.dgvSupplierClient.DataSource = (object) null;
      this.dgvSupplierClient.DataSource = (object) supplierClientList;
      this.session.Clear();
      this.SetViewSupplierClient(true);
      if (this.dgvSupplierClient.Rows.Count <= 0)
        return;
      this.dgvSupplierClient.CurrentCell = this.dgvSupplierClient.Rows[this.dgvSupplierClient.Rows.Count - 1].Cells["Org"];
    }

    private void DeleteSupplierClient()
    {
      if (this.dgvSupplierClient.Rows.Count <= 0 || this.dgvSupplierClient.CurrentRow.Index < 0 || MessageBox.Show("Вы хотите удалить текущую запись?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) != DialogResult.OK)
        return;
      this.session.Clear();
      SupplierClient dataBoundItem = (SupplierClient) this.dgvSupplierClient.CurrentRow.DataBoundItem;
      if (dataBoundItem.Supplier.BaseOrgId == -39999859)
      {
        int num1 = (int) MessageBox.Show("Невозможно удалить запись капитального ремонта", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
      else
      {
        try
        {
          this.session.Delete((object) dataBoundItem);
          this.session.Flush();
        }
        catch (Exception ex)
        {
          int num2 = (int) MessageBox.Show("Невозможно удалить запись", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
          return;
        }
        this.session.Clear();
        this.LoadSupplierClient();
      }
    }

    private bool SaveAllSupplierClient()
    {
      bool flag = true;
      foreach (DataGridViewRow row in (IEnumerable) this.dgvSupplierClient.Rows)
      {
        this.dgvSupplierClient.Rows[row.Index].Selected = true;
        this.dgvSupplierClient.CurrentCell = row.Cells[0];
        Application.DoEvents();
        if (((SupplierClient) row.DataBoundItem).IsEdit)
        {
          this.oldSupplierClient = new SupplierClient();
          foreach (SupplierClient supplierClient in (IEnumerable<SupplierClient>) this.oldListSupplierClient)
          {
            if (supplierClient.OldHashCode == ((SupplierClient) row.DataBoundItem).OldHashCode)
            {
              this.oldSupplierClient = supplierClient;
              break;
            }
          }
          if (!this.SaveSupplierClient())
            flag = false;
        }
        ((SupplierClient) row.DataBoundItem).IsEdit = false;
      }
      this.btnAddRecord.Enabled = true;
      this.btnDelRecord.Enabled = true;
      return flag;
    }

    private bool SaveSupplierClient()
    {
      if (this.dgvSupplierClient.Rows.Count <= 0 || this.dgvSupplierClient.CurrentRow.Index < 0)
        return true;
      this.session = Kvartplata.Domain.CurrentSession;
      SupplierClient dataBoundItem = (SupplierClient) this.dgvSupplierClient.CurrentRow.DataBoundItem;
      this.InsertRecord = dataBoundItem.Supplier == null;
      if (this.dgvSupplierClient.CurrentRow.Cells["Org"].Value != null)
      {
        dataBoundItem.Supplier = this.session.Get<BaseOrg>((object) Convert.ToInt32(this.dgvSupplierClient.CurrentRow.Cells["Org"].Value));
        if (this.dgvSupplierClient.CurrentRow.Cells["SupplierClientId"].Value != null)
        {
          try
          {
            dataBoundItem.SupplierClientId = Convert.ToDouble(this.dgvSupplierClient.CurrentRow.Cells["SupplierClientId"].Value);
          }
          catch
          {
            int num = (int) MessageBox.Show("Некорректно введен лицевой счет", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            return false;
          }
        }
        dataBoundItem.UName = Kvartplata.Classes.Options.Login;
        dataBoundItem.DEdit = DateTime.Now.Date;
        try
        {
          if (dataBoundItem.IsInsert)
          {
            dataBoundItem.IsInsert = false;
            this.session.Save((object) dataBoundItem);
            this.session.Flush();
          }
          else
            this.session.CreateQuery("update SupplierClient set Supplier.BaseOrgId=:org, SupplierClientId=:id,UName=:uname,DEdit=:dedit where Company.CompanyId=:company and LsClient.ClientId=:ls and Supplier.BaseOrgId=:oldorg and SupplierClientId=:oldid").SetParameter<int>("org", dataBoundItem.Supplier.BaseOrgId).SetParameter<double>("id", dataBoundItem.SupplierClientId).SetParameter<short>("company", this.Client.Company.CompanyId).SetParameter<int>("ls", this.Client.ClientId).SetParameter<string>("uname", dataBoundItem.UName).SetParameter<DateTime>("dedit", dataBoundItem.DEdit).SetParameter<int>("oldorg", this.oldSupplierClient.Supplier.BaseOrgId).SetParameter<double>("oldid", this.oldSupplierClient.SupplierClientId).ExecuteUpdate();
          return true;
        }
        catch (Exception ex)
        {
          int num = (int) MessageBox.Show("Невозможно сохранить запись", "Ошибка", MessageBoxButtons.OK);
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
          return false;
        }
      }
      else
      {
        int num = (int) MessageBox.Show("Выберите организацию из списка", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        return false;
      }
    }

    private void dgvSupplierClient_CellBeginEdit_1(object sender, DataGridViewCellCancelEventArgs e)
    {
      this.btnSave.Enabled = true;
      this.btnDelRecord.Enabled = false;
    }

    private void LoadDebtInfo()
    {
      IList list = this.session.CreateSQLQuery("select (select first code from pir_status s where s.idpirdept=p.idpirdept    and s.startday=(select max(s1.startday) from pir_status s1 where p.idpirdept=s1.idpirdept) and (s.last is null    or (s.last=(select max(last) from pir_status where idpirdept= p.idpirdept) and code=5))) as code,   (select status from di_pirdept where iddiperdept=code) as status,   (select first dedit from pir_status s where s.idpirdept=p.idpirdept    and s.startday=(select max(s1.startday) from pir_status s1 where p.idpirdept=s1.idpirdept) and (s.last is null    or (s.last=(select max(last) from pir_status where idpirdept= p.idpirdept) and code=5))) as datestat1,   isnull((select max(datesend) from pir_claim where idpirdept=p.idpirdept and cast(dedit as date)=cast(datestat1 as date)),datestat1) as datestat from pir_dept p where idlic=:client and code<>5").SetParameter<int>("client", this.Client.ClientId).List();
      if (list.Count <= 0)
        return;
      this.txbDebt.Text = Convert.ToDateTime(((object[]) list[0])[3]).ToShortDateString() + " " + ((object[]) list[0])[1].ToString();
    }

    private bool SaveTitul()
    {
      this.session.Clear();
      this.Client = this.session.Get<Kvartplata.Classes.LsClient>((object) this.ClientId);
      this.session.Clear();
      if (!(this.Client.Fio != this.tbFamily.Text) && !(this.Client.Flat.NFlat != this.cbFlat.SelectedText) && !(this.Client.SurFlat != this.tbSurFlat.Text))
        return false;
      this.Client.Family = this.tbFamily.Text;
      try
      {
        this.Client.Entrance = new short?(Convert.ToInt16(this.tbEntrance.Text));
      }
      catch
      {
        this.Client.Entrance = new short?();
      }
      try
      {
        this.Client.Floor = new short?(Convert.ToInt16(this.tbFloor.Text));
      }
      catch
      {
        this.Client.Floor = new short?();
      }
      try
      {
        this.Client.OldId = new int?(Convert.ToInt32(this.tbOldId.Text));
      }
      catch
      {
        this.Client.OldId = new int?();
      }
      this.Client.Remark = this.tbRemark.Text;
      this.Client.Flat = this.session.Get<Kvartplata.Classes.Flat>(this.cbFlat.SelectedValue);
      this.Client.SurFlat = this.tbSurFlat.Text;
      this.Client.Phone = this.tbPhone.Text;
      try
      {
        this.session = Kvartplata.Domain.CurrentSession;
        this.session.Update((object) this.Client);
        this.session.Flush();
        string nflat = this.Client.Flat.NFlat;
        string lit = "";
        Kvartplata.Classes.KvrplHelper.GetGoodNFlat(ref nflat, ref lit);
        string connectionString = string.Format("Provider={4};Eng={0};Uid={1};Pwd={2}; Links={3}", (object) Kvartplata.Classes.Options.BaseName, (object) Kvartplata.Classes.Options.Login, (object) Kvartplata.Classes.Options.Pwd, (object) "tcpip{}", (object) Kvartplata.Classes.Options.Provider);
        string commandText = string.Format(" update Tenant set idflat={0}, flat={1}, lit ='{7}' ,surflat = '{2}', lic={3}, uname='{4}', dedit='{5}'  where idlic={6}", (object) this.Client.Flat.IdFlat, (object) nflat, (object) this.Client.SurFlat, (object) this.Client.OldId, (object) Kvartplata.Classes.Options.Login, (object) Kvartplata.Classes.KvrplHelper.DateTimeToBaseFormat(this.Client.Dedit), (object) this.Client.ClientId, (object) lit);
        try
        {
          Kvartplata.Classes.OleDbHelper.ExecuteNonQuery(connectionString, CommandType.Text, commandText, 1000);
        }
        catch
        {
        }
        this.reloadList = true;
        this.SaveAllSupplierClient();
        this.ShowHideArenda();
        return true;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show("Невозможно обновить запись!", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
        return false;
      }
    }

    private void cbFlat_TextChanged(object sender, EventArgs e)
    {
      this.btnSave.Enabled = true;
    }

    private void dgvSupplierClient_CellEndEdit(object sender, DataGridViewCellEventArgs e)
    {
      if (this.dgvSupplierClient.CurrentRow == null)
        return;
      SupplierClient dataBoundItem = (SupplierClient) this.dgvSupplierClient.CurrentRow.DataBoundItem;
      dataBoundItem.IsEdit = true;
      if (this.dgvSupplierClient.CurrentCell.Value != null)
      {
        try
        {
          if (this.dgvSupplierClient.Columns[e.ColumnIndex].Name == "Org")
            dataBoundItem.Supplier = this.session.Get<BaseOrg>(this.dgvSupplierClient.CurrentRow.Cells["Org"].Value);
        }
        catch (Exception ex)
        {
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
        }
      }
    }

    private void dgvSupplierClient_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
    {
      this.btnDelRecord.Enabled = false;
      this.btnSave.Enabled = true;
    }

    private void btnPinCode_Click(object sender, EventArgs e)
    {
      IList<SupplierClient> dataSource = this.dgvSupplierClient.DataSource as IList<SupplierClient>;
      Func<SupplierClient, bool> func = (Func<SupplierClient, bool>) (x => x.Supplier.BaseOrgId == -39999859);
      Func<SupplierClient, bool> predicate = null;
      if (dataSource.Count<SupplierClient>(predicate) > 0)
      {
        int num1 = (int) MessageBox.Show("Пин-код квартплаты: " + Kvartplata.Classes.KvrplHelper.GetPin(this.ClientId) + "\nПин-код капремонта: " + Kvartplata.Classes.KvrplHelper.GetPin(Convert.ToInt32((this.dgvSupplierClient.DataSource as IList<SupplierClient>).First<SupplierClient>().SupplierClientId)), "Пин-код", MessageBoxButtons.OK);
      }
      else
      {
        int num2 = (int) MessageBox.Show(Kvartplata.Classes.KvrplHelper.GetPin(this.ClientId), "Пин-код", MessageBoxButtons.OK);
      }
    }

    private void btnNoteBook_Click(object sender, EventArgs e)
    {
      FrmNoteBook frmNoteBook = new FrmNoteBook(this.Client.Company, this.Client);
      int num = (int) frmNoteBook.ShowDialog();
      frmNoteBook.Dispose();
    }

    private void tbEntrance_MouseClick(object sender, MouseEventArgs e)
    {
      if (e.Button != MouseButtons.Right)
        ;
    }

    private void TitulSetReadOnly(bool readOnly)
    {
      if (readOnly)
      {
        this.tbRemark.ReadOnly = false;
        this.tbPhone.ReadOnly = false;
        this.tbFloor.ReadOnly = true;
        this.tbEntrance.ReadOnly = true;
        this.tbSurFlat.ReadOnly = true;
        this.tbOldId.ReadOnly = true;
        this.cbFlat.Enabled = false;
      }
      else
      {
        this.tbRemark.ReadOnly = false;
        this.tbPhone.ReadOnly = false;
        this.tbFloor.ReadOnly = false;
        this.tbEntrance.ReadOnly = false;
        this.tbSurFlat.ReadOnly = false;
        this.tbOldId.ReadOnly = false;
        this.cbFlat.Enabled = true;
      }
    }

    private void LoadArenda()
    {
      this.btnAddRecord.Enabled = true;
      this.btnDelRecord.Enabled = true;
      this.tsbMultiPastTime.Enabled = false;
      this.chbArhiv.Visible = false;
      this.session.Clear();
      this.changeText = true;
      this.session.Clear();
      IList<TypeArendaDocument> typeArendaDocumentList = this.session.CreateQuery("select t from TypeArendaDocument t  order by t.TypeDocument_name").List<TypeArendaDocument>();
      this.cmbDocumentType.DisplayMember = "TypeDocument_name";
      this.cmbDocumentType.ValueMember = "TypeDocument_id";
      this.cmbDocumentType.DataSource = (object) typeArendaDocumentList;
      IList<BaseOrg> baseOrgList = this.session.CreateQuery("select new BaseOrg(b.BaseOrgId,b.NameOrgMin) from BaseOrg b order by b.NameOrgMin").List<BaseOrg>();
      this.cmbOrganization.DisplayMember = "NameOrgMin";
      this.cmbOrganization.ValueMember = "BaseOrgId";
      this.cmbOrganization.DataSource = (object) baseOrgList;
      this.ClearArenda();
      IList<LsArenda> lsArendaList = this.session.CreateCriteria(typeof (LsArenda)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient.ClientId", (object) this.Client.ClientId)).List<LsArenda>();
      if (lsArendaList.Count > 0)
      {
        this.lsArenda = lsArendaList[0];
        if (this.lsArenda.BaseOrg != null)
          this.cmbOrganization.SelectedValue = (object) this.lsArenda.BaseOrg.BaseOrgId;
        this.txbNum.Text = this.lsArenda.DogovorNum;
        this.txbKumiNum.Text = this.lsArenda.KumiNum;
        MaskedTextBox mtbDate = this.mtbDate;
        DateTime dateTime = this.lsArenda.DogovorDate;
        string str1 = dateTime.ToString();
        mtbDate.Text = str1;
        if (this.lsArenda.KumiDate.HasValue)
        {
          MaskedTextBox mtbKumiDate = this.mtbKumiDate;
          dateTime = this.lsArenda.KumiDate.Value;
          string str2 = dateTime.ToString();
          mtbKumiDate.Text = str2;
        }
        MaskedTextBox mtbDbeg = this.mtbDBeg;
        dateTime = this.lsArenda.DBeg;
        string shortDateString1 = dateTime.ToShortDateString();
        mtbDbeg.Text = shortDateString1;
        MaskedTextBox mtbDend = this.mtbDEnd;
        dateTime = this.lsArenda.DEnd;
        string shortDateString2 = dateTime.ToShortDateString();
        mtbDend.Text = shortDateString2;
        this.txbRentPrior.Text = this.lsArenda.RentPrior;
        this.cmbDocumentType.SelectedValue = (object) this.lsArenda.TypeArendaDocument.TypeDocument_id;
        this.LoadBill();
      }
      else
        this.lsArenda = (LsArenda) null;
      this.txbAdres.Text = this.Client.Locality;
      this.txbArNumberRoom.Text = this.Client.SurFlat;
      this.txbArPhone.Text = this.Client.Phone;
      this.txbArNote.Text = this.Client.Note;
      this.txbArFloor.Text = this.Client.Floor.ToString();
      this.txbArEntrance.Text = this.Client.Entrance.ToString();
      this.btnSave.Enabled = false;
      this.btnAddRecord.Enabled = true;
      this.btnDelRecord.Enabled = true;
      this.LoadSupplierClientForArenda();
    }

    private void LoadBill()
    {
      IList<Bill> billList = this.session.CreateQuery(string.Format("select b from Bill b where b.LsClient.ClientId={0} and b.Period.PeriodId={1} order by b.BillDate", (object) this.Client.ClientId, (object) Kvartplata.Classes.Options.Period.PeriodId)).List<Bill>();
      if (billList.Count > 0)
        this.btnDelRecord.Enabled = true;
      else
        this.btnDelRecord.Enabled = false;
      this.dgvBill.DataSource = (object) null;
      this.dgvBill.Columns.Clear();
      foreach (Bill bill in (IEnumerable<Bill>) billList)
      {
        string receiptName = bill.ReceiptName;
      }
      this.dgvBill.DataSource = (object) billList;
      this.SetViewBill();
      this.MySettingsArenda.GridName = "Arenda";
      this.LoadSettingsArenda();
    }

    private void DeleteBill()
    {
      if (this.dgvBill.Rows.Count <= 0 || this.dgvBill.CurrentRow == null)
        return;
      if (Kvartplata.Classes.Options.Period.PeriodId <= this.MonthClosed.PeriodId)
      {
        int num1 = (int) MessageBox.Show("Невозможно удалить запись в закрытом месяце?", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
      else
      {
        Bill dataBoundItem = (Bill) this.dgvBill.CurrentRow.DataBoundItem;
        if (MessageBox.Show("Вы уверены, что хотите удалить счет?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
        {
          this.session = Kvartplata.Domain.CurrentSession;
          try
          {
            this.session.Delete((object) dataBoundItem);
            this.session.Flush();
          }
          catch (Exception ex)
          {
            int num2 = (int) MessageBox.Show("Невозможно удалить запись", "Ошибка", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
            Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
          }
          this.session.Clear();
          this.LoadBill();
        }
      }
    }

    private void SetViewBill()
    {
      Kvartplata.Classes.KvrplHelper.AddTextBoxColumn(this.dgvBill, 0, "Вид счета", "BillType", 150, false);
      this.dgvBill.Columns["BillNum"].HeaderText = "Номер счета";
      this.dgvBill.Columns["BillDate"].ReadOnly = true;
      this.dgvBill.Columns["BillType"].ReadOnly = true;
      this.dgvBill.Columns["BillDate"].HeaderText = "Дата формирования";
      this.dgvBill.Columns["ReceiptName"].HeaderText = "Квитанция";
      this.dgvBill.Columns["ReceiptName"].ReadOnly = true;
      this.dgvBill.Columns["ReceiptName"].Width = 100;
      foreach (DataGridViewRow row in (IEnumerable) this.dgvBill.Rows)
      {
        if ((int) ((Bill) row.DataBoundItem).BillType == 1)
          row.Cells["BillType"].Value = (object) "Счет";
        else if ((int) ((Bill) row.DataBoundItem).BillType == 2)
          row.Cells["BillType"].Value = (object) "Счет - фактура";
        else if ((int) ((Bill) row.DataBoundItem).BillType == 3)
          row.Cells["BillType"].Value = (object) "Корректировочный счет - фактура";
      }
    }

    private void LoadSettingsArenda()
    {
      this.MySettingsArenda.Load();
      foreach (DataGridViewColumn column in (BaseCollection) this.dgvBill.Columns)
        this.MySettingsArenda.GetMySettings(column);
    }

    private void dgvBill_CellValueChanged(object sender, DataGridViewCellEventArgs e)
    {
      if (!(this.dgvBill.Columns[e.ColumnIndex].Name == "BillNum"))
        return;
      this.btnSave.Enabled = true;
      this.changeNum = true;
    }

    private void dgvBill_ColumnWidthChanged(object sender, DataGridViewColumnEventArgs e)
    {
      if (this.MySettingsArenda.FindByName(e.Column.Name) < 0)
        return;
      this.MySettingsArenda.Columns[this.MySettingsArenda.FindByName(e.Column.Name)].Width = e.Column.Width;
      this.MySettingsArenda.Save();
    }

    private void txbNum_TextChanged(object sender, EventArgs e)
    {
      this.btnSave.Enabled = true;
      this.changeDogovor = true;
    }

    private void txbAdres_TextChanged(object sender, EventArgs e)
    {
      this.btnSave.Enabled = true;
    }

    private void ClearArenda()
    {
      this.txbNum.Clear();
      this.txbKumiNum.Clear();
      this.cmbOrganization.SelectedValue = (object) 0;
      this.mtbDate.Text = "";
      this.mtbKumiDate.Text = "";
      this.mtbDBeg.Clear();
      this.mtbDEnd.Clear();
      this.txbRentPrior.Clear();
    }

    private void SaveArenda()
    {
      try
      {
        this.session.Clear();
        try
        {
          this.Client.Locality = this.txbAdres.Text;
          this.Client.SurFlat = this.txbArNumberRoom.Text;
          this.Client.Flat = (Kvartplata.Classes.Flat) this.cmbArFlat.SelectedItem;
          this.Client.Phone = this.txbArPhone.Text;
          this.Client.Note = this.txbArNote.Text;
          try
          {
            this.Client.Floor = new short?(Convert.ToInt16(this.txbArFloor.Text));
          }
          catch
          {
            this.Client.Floor = new short?();
          }
          try
          {
            this.Client.Entrance = new short?(Convert.ToInt16(this.txbArEntrance.Text));
          }
          catch
          {
            this.Client.Entrance = new short?();
          }
          this.session.Update((object) this.Client);
          this.session.Flush();
        }
        catch (Exception ex)
        {
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
        }
        if (this.changeDogovor)
        {
          this.changeDogovor = false;
          if (this.lsArenda == null)
          {
            this.InsertRecord = true;
            this.lsArenda = new LsArenda();
            this.lsArenda.LsClient = this.Client;
          }
          if ((BaseOrg) this.cmbOrganization.SelectedItem != null && (uint) ((BaseOrg) this.cmbOrganization.SelectedItem).BaseOrgId > 0U)
          {
            this.lsArenda.BaseOrg = (BaseOrg) this.cmbOrganization.SelectedItem;
            if (this.txbNum.Text != "")
            {
              this.lsArenda.DogovorNum = this.txbNum.Text;
              if (this.mtbDate.Text != "  .  .")
              {
                try
                {
                  this.lsArenda.DogovorDate = Convert.ToDateTime(this.mtbDate.Text);
                }
                catch
                {
                  int num = (int) MessageBox.Show("Некорректная дата регистрации", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                  this.lsArenda = (LsArenda) null;
                  return;
                }
                if (this.mtbKumiDate.Text != "  .  .")
                {
                  try
                  {
                    this.lsArenda.KumiDate = new DateTime?(Convert.ToDateTime(this.mtbKumiDate.Text));
                  }
                  catch
                  {
                    int num = (int) MessageBox.Show("Некорректная дата заключения договора с КУМИ", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    this.lsArenda = (LsArenda) null;
                    return;
                  }
                }
                if (this.mtbDBeg.Text != "  .  ." && this.mtbDEnd.Text != "  .  .")
                {
                  try
                  {
                    this.lsArenda.DBeg = Convert.ToDateTime(this.mtbDBeg.Text);
                    this.lsArenda.DEnd = Convert.ToDateTime(this.mtbDEnd.Text);
                  }
                  catch
                  {
                    int num = (int) MessageBox.Show("Некорректная дата начала или дата окончания", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    this.lsArenda = (LsArenda) null;
                    return;
                  }
                  if (this.lsArenda.DBeg > this.lsArenda.DEnd)
                  {
                    int num = (int) MessageBox.Show("Дата начала больше даты окончания", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    this.lsArenda = (LsArenda) null;
                    return;
                  }
                  LsArenda oldLsArenda = new LsArenda();
                  if (!this.InsertRecord)
                    oldLsArenda = this.session.CreateCriteria(typeof (LsArenda)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient.ClientId", (object) this.Client.ClientId)).List<LsArenda>()[0];
                  IList<LsArenda> lsArendaList = this.session.CreateCriteria(typeof (LsArenda)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("DogovorNum", (object) this.lsArenda.DogovorNum)).List<LsArenda>();
                  if (this.InsertRecord && lsArendaList.Count > 0 || !this.InsertRecord && oldLsArenda.DogovorNum != this.lsArenda.DogovorNum && lsArendaList.Count > 0)
                  {
                    int num = (int) MessageBox.Show("Такой номер договора уже есть", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return;
                  }
                  this.lsArenda.KumiNum = this.txbKumiNum.Text;
                  this.lsArenda.RentPrior = this.txbRentPrior.Text;
                  if (this.cmbDocumentType.SelectedIndex == -1)
                  {
                    int num = (int) MessageBox.Show("Не выбран тип документа", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return;
                  }
                  this.lsArenda.TypeArendaDocument = (TypeArendaDocument) this.cmbDocumentType.SelectedItem;
                  this.lsArenda.UName = Kvartplata.Classes.Options.Login;
                  this.lsArenda.DEdit = DateTime.Now;
                  using (ITransaction transaction = this.session.BeginTransaction())
                  {
                    if (!this.ControlDate(this.lsArenda, oldLsArenda))
                      return;
                    try
                    {
                      if (this.InsertRecord)
                      {
                        this.InsertRecord = false;
                        this.session.Save((object) this.lsArenda);
                        this.session.Flush();
                      }
                      else
                      {
                        this.session.Update((object) this.lsArenda);
                        this.session.Flush();
                        if (this.lsArenda.DEnd > oldLsArenda.DEnd && MessageBox.Show("Продлить даты действия услуг, параметров, поставщиков и счетчиков?", "", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
                          this.ProlongArenda(this.lsArenda, oldLsArenda);
                      }
                    }
                    catch (Exception ex)
                    {
                      transaction.Rollback();
                      Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
                    }
                    transaction.Commit();
                  }
                }
                else
                {
                  int num = (int) MessageBox.Show("Введите даты начала и окончания", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                  this.lsArenda = (LsArenda) null;
                  return;
                }
              }
              else
              {
                int num = (int) MessageBox.Show("Введите дату регистрации", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                return;
              }
            }
            else
            {
              int num = (int) MessageBox.Show("Введите номер договора", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
              this.lsArenda = (LsArenda) null;
              return;
            }
          }
          else
          {
            int num = (int) MessageBox.Show("Организация не введена", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            this.lsArenda = (LsArenda) null;
            return;
          }
        }
        if (this.changeNum)
        {
          if (this.dgvBill.CurrentRow != null && (Bill) this.dgvBill.CurrentRow.DataBoundItem != null)
          {
            this.session.Update((object) (Bill) this.dgvBill.CurrentRow.DataBoundItem);
            this.session.Flush();
            this.changeNum = false;
          }
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show("Не удалось внести изменения", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
      }
      this.btnSave.Enabled = false;
    }

    private bool ControlDate(LsArenda lsArenda, LsArenda oldLsArenda)
    {
      try
      {
        IList list1 = (IList) new ArrayList();
        IList list2 = (IList) new ArrayList();
        IList list3 = (IList) new ArrayList();
        IList list4 = (IList) new ArrayList();
        IList list5 = (IList) new ArrayList();
        //DateTime dateTime = new DateTime();
        if (!this.InsertRecord && (lsArenda.DBeg > oldLsArenda.DBeg || lsArenda.DEnd < oldLsArenda.DEnd))
        {
          if (lsArenda.DBeg > oldLsArenda.DBeg && (this.session.CreateQuery(string.Format("from LsService where Client.ClientId={0} and '{1}'>=DBeg  and DEnd>='{1}' and Complex.IdFk={2}", (object) this.Client.ClientId, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(oldLsArenda.DBeg), (object) Kvartplata.Classes.Options.Complex.IdFk)).List().Count > 0 || this.session.CreateQuery(string.Format("from ClientParam where ClientId={0} and '{1}'>=DBeg  and DEnd>='{1}' ", (object) this.Client.ClientId, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(oldLsArenda.DBeg))).List().Count > 0 || (this.session.CreateQuery(string.Format("from LsSupplier where LsClient.ClientId={0} and '{1}'>=DBeg  and DEnd>='{1}' ", (object) this.Client.ClientId, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(oldLsArenda.DBeg))).List().Count > 0 || this.session.CreateQuery(string.Format("from LsServiceParam where LsClient.ClientId={0} and '{1}'>=DBeg  and DEnd>='{1}'", (object) this.Client.ClientId, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(oldLsArenda.DBeg))).List().Count > 0) || this.session.CreateQuery(string.Format("from CounterRelation where LsClient.ClientId={0} and '{1}'>=DBeg  and DEnd>='{1}'", (object) this.Client.ClientId, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(oldLsArenda.DBeg))).List().Count > 0))
          {
            if (this.session.CreateQuery(string.Format("from Balance where LsClient.ClientId={0} and Period.PeriodId<={1}", (object) this.Client.ClientId, (object) this.MonthClosed.PeriodId)).List().Count > 0)
            {
              if (MessageBox.Show("Существуют услуги на прежнюю дату. Вы уверены, что хотите исправить даты договора", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.Cancel)
                return false;
            }
            else
              this.UpdateDateArenda(lsArenda, oldLsArenda, lsArenda.DBeg, "DBeg");
          }
          if (lsArenda.DEnd < oldLsArenda.DEnd && lsArenda.DEnd >= this.MonthClosed.PeriodName.Value.AddMonths(1))
            this.UpdateDateArenda(lsArenda, oldLsArenda, lsArenda.DEnd, "DEnd");
        }
        return true;
      }
      catch (Exception ex)
      {
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
        return true;
      }
    }

    private void UpdateDateArenda(LsArenda lsArenda, LsArenda oldLsArenda, DateTime data, string dat)
    {
      string str = !(dat == "DBeg") ? ">" : "<";
      this.session.CreateQuery("update ClientParam set " + dat + "=:new,Uname=:user,Dedit=:dedit where Period.PeriodId=0 and ClientId=:client and " + dat + str + ":new ").SetDateTime("new", data).SetParameter<string>("user", Kvartplata.Classes.Options.Login).SetDateTime("dedit", DateTime.Now).SetParameter<int>("client", this.Client.ClientId).ExecuteUpdate();
      this.session.CreateQuery("update LsService set " + dat + "=:new,Uname=:user,Dedit=:dedit where Period.PeriodId=0 and Client.ClientId=:client and " + dat + str + ":new and Complex.IdFk=:complex").SetDateTime("new", data).SetParameter<string>("user", Kvartplata.Classes.Options.Login).SetDateTime("dedit", DateTime.Now).SetParameter<int>("client", this.Client.ClientId).SetParameter<int>("complex", Kvartplata.Classes.Options.Complex.IdFk).ExecuteUpdate();
      this.session.CreateQuery("update LsSupplier set " + dat + "=:new,Uname=:user,Dedit=:dedit where Period.PeriodId=0 and LsClient.ClientId=:client and " + dat + str + ":new ").SetDateTime("new", data).SetParameter<string>("user", Kvartplata.Classes.Options.Login).SetDateTime("dedit", DateTime.Now).SetParameter<int>("client", this.Client.ClientId).ExecuteUpdate();
      this.session.CreateQuery("update LsServiceParam set " + dat + "=:new,UName=:user,DEdit=:dedit where Period.PeriodId=0 and LsClient.ClientId=:client and " + dat + str + ":new ").SetDateTime("new", data).SetParameter<string>("user", Kvartplata.Classes.Options.Login).SetDateTime("dedit", DateTime.Now).SetParameter<int>("client", this.Client.ClientId).ExecuteUpdate();
      this.session.CreateQuery("update CounterRelation set " + dat + "=:new,UName=:user,DEdit=:dedit where Period.PeriodId=0 and LsClient.ClientId=:client and " + dat + str + ":new  and OnOff.YesNoId=1").SetDateTime("new", data).SetParameter<string>("user", Kvartplata.Classes.Options.Login).SetDateTime("dedit", DateTime.Now).SetParameter<int>("client", this.Client.ClientId).ExecuteUpdate();
    }

    private void ProlongArenda(LsArenda lsArenda, LsArenda oldLsArenda)
    {
      this.Cursor = Cursors.WaitCursor;
      DateTime dend = oldLsArenda.DEnd;
      DateTime dateTime1 = this.MonthClosed.PeriodName.Value;
      dateTime1 = dateTime1.AddMonths(1);
      DateTime dateTime2 = dateTime1.AddDays(-1.0);
      if (dend >= dateTime2)
      {
        this.session.CreateQuery("update ClientParam set DEnd=:newend,Uname=:user,Dedit=:dedit where Period.PeriodId=0 and ClientId=:client and DEnd>=:oldend and DEnd<=:newend").SetDateTime("newend", lsArenda.DEnd).SetDateTime("oldend", oldLsArenda.DEnd).SetParameter<string>("user", Kvartplata.Classes.Options.Login).SetDateTime("dedit", DateTime.Now).SetParameter<int>("client", this.Client.ClientId).ExecuteUpdate();
        this.session.CreateQuery("update LsService set DEnd=:newend,Uname=:user,Dedit=:dedit where Period.PeriodId=0 and Client.ClientId=:client and DEnd>=:oldend and DEnd<=:newend and Complex.IdFk=:complex").SetDateTime("newend", lsArenda.DEnd).SetDateTime("oldend", oldLsArenda.DEnd).SetParameter<string>("user", Kvartplata.Classes.Options.Login).SetDateTime("dedit", DateTime.Now).SetParameter<int>("client", this.Client.ClientId).SetParameter<int>("complex", Kvartplata.Classes.Options.Complex.IdFk).ExecuteUpdate();
        this.session.CreateQuery("update LsSupplier set DEnd=:newend,Uname=:user,Dedit=:dedit where Period.PeriodId=0 and LsClient.ClientId=:client and DEnd>=:oldend and DEnd<=:newend").SetDateTime("newend", lsArenda.DEnd).SetDateTime("oldend", oldLsArenda.DEnd).SetParameter<string>("user", Kvartplata.Classes.Options.Login).SetDateTime("dedit", DateTime.Now).SetParameter<int>("client", this.Client.ClientId).ExecuteUpdate();
        this.session.CreateQuery("update LsServiceParam set DEnd=:newend,UName=:user,DEdit=:dedit where Period.PeriodId=0 and LsClient.ClientId=:client and DEnd>=:oldend and DEnd<=:newend").SetDateTime("newend", lsArenda.DEnd).SetDateTime("oldend", oldLsArenda.DEnd).SetParameter<string>("user", Kvartplata.Classes.Options.Login).SetDateTime("dedit", DateTime.Now).SetParameter<int>("client", this.Client.ClientId).ExecuteUpdate();
        this.session.CreateQuery("update CounterRelation set DEnd=:newend,UName=:user,DEdit=:dedit where Period.PeriodId=0 and LsClient.ClientId=:client and DEnd>=:oldend and DEnd<=:newend and OnOff.YesNoId=1").SetDateTime("newend", lsArenda.DEnd).SetDateTime("oldend", oldLsArenda.DEnd).SetParameter<string>("user", Kvartplata.Classes.Options.Login).SetDateTime("dedit", DateTime.Now).SetParameter<int>("client", this.Client.ClientId).ExecuteUpdate();
      }
      else
      {
        IQuery query1 = this.session.CreateQuery("update ClientParam set DEnd=:newend,Uname=:user,Dedit=:dedit where Period.PeriodId=0 and ClientId=:client and DEnd>=:oldend and DEnd<=:newend").SetDateTime("newend", lsArenda.DEnd);
        string name1 = "oldend";
        DateTime dateTime3 = this.MonthClosed.PeriodName.Value;
        dateTime3 = dateTime3.AddMonths(1);
        DateTime val1 = dateTime3.AddDays(-1.0);
        query1.SetDateTime(name1, val1).SetParameter<string>("user", Kvartplata.Classes.Options.Login).SetDateTime("dedit", DateTime.Now).SetParameter<int>("client", this.Client.ClientId).ExecuteUpdate();
        IQuery query2 = this.session.CreateSQLQuery("insert into lsParam select client_id,:period,param_id,:beg,:end,param_value,user,today() from lsParam where period_id=0 and client_id=:client and dend>=:oldend and dend<:newend").SetParameter<int>("period", this.MonthClosed.PeriodId + 1).SetDateTime("beg", oldLsArenda.DEnd.AddDays(1.0));
        string name2 = "end";
        DateTime? periodName1 = this.MonthClosed.PeriodName;
        DateTime dateTime4 = periodName1.Value;
        dateTime4 = dateTime4.AddMonths(1);
        DateTime val2 = dateTime4.AddDays(-1.0);
        IQuery query3 = query2.SetDateTime(name2, val2);
        string name3 = "newend";
        periodName1 = this.MonthClosed.PeriodName;
        DateTime dateTime5 = periodName1.Value;
        dateTime5 = dateTime5.AddMonths(1);
        DateTime val3 = dateTime5.AddDays(-1.0);
        query3.SetDateTime(name3, val3).SetDateTime("oldend", oldLsArenda.DEnd).SetParameter<int>("client", this.Client.ClientId).ExecuteUpdate();
        this.session.CreateSQLQuery("insert into lsParam select client_id,0,param_id,:newbeg,:newend,param_value,user,today() from lsParam where period_id=0 and client_id=:client and dend>=:oldend and dend<:newend").SetDateTime("newbeg", this.MonthClosed.PeriodName.Value.AddMonths(1)).SetDateTime("newend", lsArenda.DEnd).SetDateTime("oldend", oldLsArenda.DEnd).SetParameter<int>("client", this.Client.ClientId).ExecuteUpdate();
        IQuery query4 = this.session.CreateQuery("update LsService set DEnd=:newend,Uname=:user,Dedit=:dedit where Period.PeriodId=0 and Client.ClientId=:client and DEnd>=:oldend and DEnd<=:newend and Complex.IdFk=:complex").SetDateTime("newend", lsArenda.DEnd);
        string name4 = "oldend";
        DateTime dateTime6 = this.MonthClosed.PeriodName.Value;
        dateTime6 = dateTime6.AddMonths(1);
        DateTime val4 = dateTime6.AddDays(-1.0);
        query4.SetDateTime(name4, val4).SetParameter<string>("user", Kvartplata.Classes.Options.Login).SetDateTime("dedit", DateTime.Now).SetParameter<int>("client", this.Client.ClientId).SetParameter<int>("complex", Kvartplata.Classes.Options.Complex.IdFk).ExecuteUpdate();
        IQuery query5 = this.session.CreateSQLQuery("insert into LsService select client_id,:period,service_id,:beg,:end,tariff_id,norm_id,complex_id,user,today() from lsService where period_id=0 and client_id=:client and dend>=:oldend and dend<:newend and complex_id=:complex").SetParameter<int>("period", this.MonthClosed.PeriodId + 1).SetDateTime("beg", oldLsArenda.DEnd.AddDays(1.0));
        string name5 = "end";
        DateTime? periodName2 = this.MonthClosed.PeriodName;
        DateTime dateTime7 = periodName2.Value;
        dateTime7 = dateTime7.AddMonths(1);
        DateTime val5 = dateTime7.AddDays(-1.0);
        IQuery query6 = query5.SetDateTime(name5, val5);
        string name6 = "newend";
        periodName2 = this.MonthClosed.PeriodName;
        DateTime dateTime8 = periodName2.Value;
        dateTime8 = dateTime8.AddMonths(1);
        DateTime val6 = dateTime8.AddDays(-1.0);
        query6.SetDateTime(name6, val6).SetParameter<int>("complex", Kvartplata.Classes.Options.Complex.IdFk).SetDateTime("oldend", oldLsArenda.DEnd).SetParameter<int>("client", this.Client.ClientId).ExecuteUpdate();
        ISQLQuery sqlQuery1 = this.session.CreateSQLQuery("insert into LsService select client_id,0,service_id,:newbeg,:newend,tariff_id,norm_id,complex_id,user,today() from lsService where period_id=0 and client_id=:client and dend>=:oldend and dend<:newend and complex_id=:complex");
        string name7 = "newbeg";
        periodName2 = this.MonthClosed.PeriodName;
        DateTime val7 = periodName2.Value.AddMonths(1);
        sqlQuery1.SetDateTime(name7, val7).SetDateTime("newend", lsArenda.DEnd).SetDateTime("oldend", oldLsArenda.DEnd).SetParameter<int>("client", this.Client.ClientId).SetParameter<int>("complex", Kvartplata.Classes.Options.Complex.IdFk).ExecuteUpdate();
        IQuery query7 = this.session.CreateQuery("update LsSupplier set DEnd=:newend,Uname=:user,Dedit=:dedit where Period.PeriodId=0 and LsClient.ClientId=:client and DEnd>=:oldend and DEnd<=:newend").SetDateTime("newend", lsArenda.DEnd);
        string name8 = "oldend";
        DateTime dateTime9 = this.MonthClosed.PeriodName.Value;
        dateTime9 = dateTime9.AddMonths(1);
        DateTime val8 = dateTime9.AddDays(-1.0);
        query7.SetDateTime(name8, val8).SetParameter<string>("user", Kvartplata.Classes.Options.Login).SetDateTime("dedit", DateTime.Now).SetParameter<int>("client", this.Client.ClientId).ExecuteUpdate();
        IQuery query8 = this.session.CreateSQLQuery("insert into lsSupplier select client_id,:period,service_id,:beg,:end,supplier_id,user,today() from lsSupplier where period_id=0 and client_id=:client and dend>=:oldend and dend<:newend").SetParameter<int>("period", this.MonthClosed.PeriodId + 1);
        string name9 = "beg";
        dateTime9 = oldLsArenda.DEnd;
        DateTime val9 = dateTime9.AddDays(1.0);
        query8.SetDateTime(name9, val9).SetDateTime("end", this.MonthClosed.PeriodName.Value.AddMonths(1).AddDays(-1.0)).SetDateTime("newend", this.MonthClosed.PeriodName.Value.AddMonths(1).AddDays(-1.0)).SetDateTime("oldend", oldLsArenda.DEnd).SetParameter<int>("client", this.Client.ClientId).ExecuteUpdate();
        this.session.CreateSQLQuery("insert into lsSupplier select client_id,0,service_id,:newbeg,:newend,supplier_id,user,today() from lsSupplier where period_id=0 and client_id=:client and dend>=:oldend and dend<:newend").SetDateTime("newbeg", this.MonthClosed.PeriodName.Value.AddMonths(1)).SetDateTime("newend", lsArenda.DEnd).SetDateTime("oldend", oldLsArenda.DEnd).SetParameter<int>("client", this.Client.ClientId).ExecuteUpdate();
        IQuery query9 = this.session.CreateQuery("update LsServiceParam set DEnd=:newend,UName=:user,DEdit=:dedit where Period.PeriodId=0 and LsClient.ClientId=:client and DEnd>=:oldend and DEnd<=:newend").SetDateTime("newend", lsArenda.DEnd);
        string name10 = "oldend";
        DateTime dateTime10 = this.MonthClosed.PeriodName.Value;
        dateTime10 = dateTime10.AddMonths(1);
        DateTime val10 = dateTime10.AddDays(-1.0);
        query9.SetDateTime(name10, val10).SetParameter<string>("user", Kvartplata.Classes.Options.Login).SetDateTime("dedit", DateTime.Now).SetParameter<int>("client", this.Client.ClientId).ExecuteUpdate();
        IQuery query10 = this.session.CreateSQLQuery("insert into lsServiceParam select client_id,:period,service_id,param_id,:beg,:end,param_value,user,today() from lsServiceParam where period_id=0 and client_id=:client and dend>=:oldend and dend<:newend").SetParameter<int>("period", this.MonthClosed.PeriodId + 1).SetDateTime("beg", oldLsArenda.DEnd.AddDays(1.0));
        string name11 = "end";
        DateTime dateTime11 = this.MonthClosed.PeriodName.Value;
        dateTime11 = dateTime11.AddMonths(1);
        DateTime val11 = dateTime11.AddDays(-1.0);
        IQuery query11 = query10.SetDateTime(name11, val11);
        string name12 = "newend";
        dateTime11 = this.MonthClosed.PeriodName.Value;
        dateTime11 = dateTime11.AddMonths(1);
        DateTime val12 = dateTime11.AddDays(-1.0);
        query11.SetDateTime(name12, val12).SetDateTime("oldend", oldLsArenda.DEnd).SetParameter<int>("client", this.Client.ClientId).ExecuteUpdate();
        ISQLQuery sqlQuery2 = this.session.CreateSQLQuery("insert into lsServiceParam select client_id,0,service_id,param_id,:newbeg,:newend,param_value,user,today() from lsServiceParam where period_id=0 and client_id=:client and dend>=:oldend and dend<:newend");
        string name13 = "newbeg";
        dateTime11 = this.MonthClosed.PeriodName.Value;
        DateTime val13 = dateTime11.AddMonths(1);
        sqlQuery2.SetDateTime(name13, val13).SetDateTime("newend", lsArenda.DEnd).SetDateTime("oldend", oldLsArenda.DEnd).SetParameter<int>("client", this.Client.ClientId).ExecuteUpdate();
        IQuery query12 = this.session.CreateQuery("update CounterRelation set DEnd=:newend,UName=:user,DEdit=:dedit where Period.PeriodId=0 and LsClient.ClientId=:client and DEnd>=:oldend and DEnd<=:newend and OnOff.YesNoId=1").SetDateTime("newend", lsArenda.DEnd);
        string name14 = "oldend";
        DateTime dateTime12 = this.MonthClosed.PeriodName.Value;
        dateTime12 = dateTime12.AddMonths(1);
        DateTime val14 = dateTime12.AddDays(-1.0);
        query12.SetDateTime(name14, val14).SetParameter<string>("user", Kvartplata.Classes.Options.Login).SetDateTime("dedit", DateTime.Now).SetParameter<int>("client", this.Client.ClientId).ExecuteUpdate();
        IQuery query13 = this.session.CreateSQLQuery("insert into cntrRelation select :period,client_id,counter_id,:beg,:end,onoff,user,today() from cntrRelation where period_id=0 and client_id=:client and dend>=:oldend and dend<:newend and onoff=1").SetParameter<int>("period", this.MonthClosed.PeriodId + 1).SetDateTime("beg", oldLsArenda.DEnd.AddDays(1.0));
        string name15 = "end";
        DateTime dateTime13 = this.MonthClosed.PeriodName.Value;
        dateTime13 = dateTime13.AddMonths(1);
        DateTime val15 = dateTime13.AddDays(-1.0);
        IQuery query14 = query13.SetDateTime(name15, val15);
        string name16 = "newend";
        dateTime13 = this.MonthClosed.PeriodName.Value;
        dateTime13 = dateTime13.AddMonths(1);
        DateTime val16 = dateTime13.AddDays(-1.0);
        query14.SetDateTime(name16, val16).SetDateTime("oldend", oldLsArenda.DEnd).SetParameter<int>("client", this.Client.ClientId).ExecuteUpdate();
        ISQLQuery sqlQuery3 = this.session.CreateSQLQuery("insert into cntrRelation select 0,client_id,counter_id,:newbeg,:newend,onoff,user,today() from cntrRelation where period_id=0 and client_id=:client and dend>=:oldend and dend<:newend and onoff=1");
        string name17 = "newbeg";
        dateTime13 = this.MonthClosed.PeriodName.Value;
        DateTime val17 = dateTime13.AddMonths(1);
        sqlQuery3.SetDateTime(name17, val17).SetDateTime("newend", lsArenda.DEnd).SetDateTime("oldend", oldLsArenda.DEnd).SetParameter<int>("client", this.Client.ClientId).ExecuteUpdate();
      }
      this.Cursor = Cursors.Default;
    }

    private void ShowHideArenda()
    {
      try
      {
        if (this.Client.Complex.IdFk == Kvartplata.Classes.Options.Complex.IdFk)
        {
          if (this.tcntrl.TabPages["tpTitul"] == null)
          {
            this.tcntrl.TabPages.Insert(0, this.tpTitul);
            if (this.tcntrl.SelectedTab != this.tpOptions && this.tcntrl.SelectedTab != this.tpService && this.tcntrl.SelectedTab != this.tpSaldo && this.tcntrl.SelectedTab != this.tpCounters)
              this.tcntrl.SelectedTab = this.tpTitul;
          }
          if (this.tcntrl.TabPages["tpLodgers"] == null)
            this.tcntrl.TabPages.Insert(5, this.tpLodgers);
          if (this.tcntrl.TabPages["tpOwners"] == null)
            this.tcntrl.TabPages.Insert(6, this.tpOwners);
          if (this.tcntrl.TabPages["tpAbsence"] == null)
            this.tcntrl.TabPages.Insert(8, this.tpAbsence);
          if (this.tcntrl.TabPages["tpMSP"] == null)
            this.tcntrl.TabPages.Insert(9, this.tpMSP);
          if (this.tcntrl.TabPages["tpMessage"] == null)
            this.tcntrl.TabPages.Insert(11, this.tpMessage);
          if (this.tcntrlBalance.TabPages["tpSocSaldo"] == null)
            this.tcntrlBalance.TabPages.Insert(2, this.tpSocSaldo);
          if (this.tcntrl.TabPages["tpArenda"] != null)
            this.tcntrl.TabPages.Remove(this.tpArenda);
          this.tsbKvit.Text = "Квитанция";
          this.tsbKvit2.Text = "Квитанция";
          this.tsmiDischarge.Visible = true;
          this.tsmiDetailAccounts.Visible = true;
          this.tsmiDogovor.Visible = false;
        }
        if (this.Client.Complex.IdFk != Kvartplata.Classes.Options.ComplexArenda.IdFk)
          return;
        int selectedIndex = this.tcntrl.SelectedIndex;
        if (this.tcntrl.TabPages["tpArenda"] == null)
        {
          this.tcntrl.TabPages.Insert(0, this.tpArenda);
          if (selectedIndex != 1 && selectedIndex != 2 && (selectedIndex != 3 && selectedIndex != 6) && selectedIndex != 9)
            this.tcntrl.SelectedTab = this.tpArenda;
        }
        if (this.tcntrl.TabPages["tpTitul"] != null)
          this.tcntrl.TabPages.Remove(this.tpTitul);
        if (this.tcntrl.TabPages["tpAbsence"] != null)
          this.tcntrl.TabPages.Remove(this.tpAbsence);
        if (this.tcntrl.TabPages["tpLodgers"] != null)
          this.tcntrl.TabPages.Remove(this.tpLodgers);
        if (this.Client.Company.Manager.BaseOrgId != -39999859 && this.tcntrl.TabPages["tpOwners"] != null)
          this.tcntrl.TabPages.Remove(this.tpOwners);
        if (this.tcntrl.TabPages["tpMSP"] != null)
          this.tcntrl.TabPages.Remove(this.tpMSP);
        if (this.tcntrlBalance.TabPages["tpSocSaldo"] != null)
          this.tcntrlBalance.TabPages.Remove(this.tpSocSaldo);
        this.tsbKvit.Text = "Счет";
        this.tsbKvit2.Text = "Счет";
        this.tsmiDischarge.Visible = false;
        this.tsmiDetailAccounts.Visible = false;
        this.tsmiDogovor.Visible = true;
      }
      catch
      {
      }
    }

    private void cmbOrg1_TextChanged(object sender, EventArgs e)
    {
      try
      {
        if (!this.cmbOrganization.Focused)
          return;
        if (!this.changeText)
          this.changeText = true;
        else if (this.cmbOrganization.Text.Length > 0)
        {
          this.org = this.cmbOrganization.Text;
          int selectionStart = this.cmbOrganization.SelectionStart;
          IList<BaseOrg> baseOrgList1 = (IList<BaseOrg>) new List<BaseOrg>();
          IList<BaseOrg> baseOrgList2 = this.session.CreateQuery(string.Format("select new BaseOrg(b.BaseOrgId,b.NameOrgMin) from BaseOrg b where NameOrgMin like '%{0}%' order by b.NameOrgMin", (object) this.cmbOrganization.Text)).List<BaseOrg>();
          this.changeText = false;
          this.cmbOrganization.Text = this.org;
          this.cmbOrganization.SelectionStart = selectionStart;
          this.lbOrg.DataSource = (object) null;
          this.lbOrg.DisplayMember = "NameOrgMin";
          this.lbOrg.ValueMember = "BaseOrgId";
          this.lbOrg.DataSource = (object) baseOrgList2;
          this.lbOrg.SelectedIndex = -1;
          if (baseOrgList2.Count > 0)
            this.lbOrg.Visible = true;
          this.changeText = true;
        }
        else
          this.lbOrg.Visible = false;
      }
      catch (Exception ex)
      {
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
      }
    }

    private void cmbOrganization_KeyDown(object sender, KeyEventArgs e)
    {
      if (e.KeyCode == Keys.Down)
        this.changeText = false;
      if (e.KeyCode != Keys.Return)
        return;
      if (this.cmbOrganization.SelectedValue == null)
      {
        this.cmbOrganization.SelectedValue = (object) 0;
        this.lbOrg.Visible = false;
      }
      else
        this.txbNum.Focus();
    }

    private void listBox1_SelectedValueChanged(object sender, EventArgs e)
    {
      if (!this.lbOrg.Focused)
        return;
      try
      {
        this.cmbOrganization.SelectedValue = (object) ((BaseOrg) this.lbOrg.SelectedItem).BaseOrgId;
      }
      catch
      {
      }
    }

    private void cmbOrganization_KeyUp(object sender, KeyEventArgs e)
    {
      if (e.KeyCode != Keys.Down || !this.cmbOrganization.Focused)
        return;
      this.lbOrg.Focus();
      this.lbOrg.SelectedIndex = 0;
      this.cmbOrganization.SelectedValue = (object) ((BaseOrg) this.lbOrg.SelectedItem).BaseOrgId;
    }

    private void listBox1_KeyUp(object sender, KeyEventArgs e)
    {
      if (e.KeyCode == Keys.Up && this.lbOrg.SelectedIndex == 0 && this.lbOrg.Focused)
      {
        this.lbOrg.SelectedIndex = -1;
        this.cmbOrganization.Focus();
        this.cmbOrganization.Text = this.org;
        this.cmbOrganization.SelectionStart = this.org.Length;
      }
      if (e.KeyCode != Keys.Return)
        return;
      this.txbNum.Focus();
      this.lbOrg.Visible = false;
    }

    private void cmbO_SelectionChangeCommitted(object sender, EventArgs e)
    {
      this.changeText = false;
      this.txbNum_TextChanged(sender, e);
    }

    private void btnOrgInfo_Click(object sender, EventArgs e)
    {
      if (this.cmbOrganization.SelectedItem == null || (uint) Convert.ToInt32(this.cmbOrganization.SelectedValue) <= 0U || !Kvartplata.Classes.KvrplHelper.CheckProxy(75, 1, this.Client.Company, true))
        return;
      FrmEditOrg frmEditOrg = new FrmEditOrg((BaseOrg) this.cmbOrganization.SelectedItem, false);
      int num = (int) frmEditOrg.ShowDialog();
      frmEditOrg.Dispose();
    }

    private void lbOrg_MouseUp(object sender, MouseEventArgs e)
    {
      this.txbNum.Focus();
      this.lbOrg.Visible = false;
    }

    private void txbArFloor_KeyDown(object sender, KeyEventArgs e)
    {
      if (e.KeyCode != Keys.Return)
        return;
      this.txbArPhone.Focus();
    }

    private void txbArPhone_KeyDown(object sender, KeyEventArgs e)
    {
      if (e.KeyCode != Keys.Return)
        return;
      this.txbArNote.Focus();
    }

    private void cmbArFlat_SelectionChangeCommitted(object sender, EventArgs e)
    {
      this.btnSave.Enabled = true;
      this.txbArNumberRoom.Focus();
    }

    private void cmbArFlat_KeyDown(object sender, KeyEventArgs e)
    {
      if (e.KeyCode != Keys.Return)
        return;
      this.txbArNumberRoom.Focus();
    }

    private void txbArNumberRoom_KeyDown(object sender, KeyEventArgs e)
    {
      if (e.KeyCode != Keys.Return)
        return;
      this.txbArEntrance.Focus();
    }

    private void txbAdres_KeyDown(object sender, KeyEventArgs e)
    {
      if (e.KeyCode != Keys.Return)
        return;
      this.cmbArFlat.Focus();
    }

    private void txbArEntrance_KeyDown(object sender, KeyEventArgs e)
    {
      if (e.KeyCode != Keys.Return)
        return;
      this.txbArFloor.Focus();
    }

    private void txbNum_KeyDown(object sender, KeyEventArgs e)
    {
      if (e.KeyCode != Keys.Return)
        return;
      this.mtbDate.Focus();
    }

    private void mtbDate_KeyDown(object sender, KeyEventArgs e)
    {
      if (e.KeyCode != Keys.Return)
        return;
      this.txbKumiNum.Focus();
    }

    private void txbKumiNum_KeyDown(object sender, KeyEventArgs e)
    {
      if (e.KeyCode != Keys.Return)
        return;
      this.mtbKumiDate.Focus();
    }

    private void mtbDBeg_KeyDown(object sender, KeyEventArgs e)
    {
      if (e.KeyCode != Keys.Return)
        return;
      this.mtbDEnd.Focus();
    }

    private void mtbKumiDate_KeyDown(object sender, KeyEventArgs e)
    {
      if (e.KeyCode != Keys.Return)
        return;
      this.mtbDBeg.Focus();
    }

    private void mtbDEnd_KeyDown(object sender, KeyEventArgs e)
    {
      if (e.KeyCode != Keys.Return)
        return;
      this.txbAdres.Focus();
    }

    private void cmbDocumentType_SelectedValueChanged(object sender, EventArgs e)
    {
      this.btnSave.Enabled = true;
      this.changeDogovor = true;
    }

    private bool Proverka()
    {
      this.tmrArError.Stop();
      this.lblArError.Visible = false;
      if (this.Client.Complex.IdFk != Kvartplata.Classes.Options.ComplexArenda.IdFk)
        return true;
      if (this.session.CreateCriteria(typeof (LsArenda)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient.ClientId", (object) this.Client.ClientId)).List<LsArenda>().Count == 0)
      {
        this.lblArError.Text = "Договор не введен";
        this.lblArError.Visible = true;
        this.lblArError.Left = this.lblEdit.Left;
        this.tmrArError.Start();
        return false;
      }
      return this.ProverkaParam();
    }

    private bool ProverkaParam()
    {
      if (this.Client.Complex.IdFk != Kvartplata.Classes.Options.ComplexArenda.IdFk || this.session.CreateQuery(string.Format("from ClientParam where ClientId={0}", (object) this.Client.ClientId)).List<ClientParam>().Count != 0 && this.session.CreateQuery(string.Format("from LsService where Client.ClientId={0}", (object) this.Client.ClientId)).List<LsService>().Count != 0 && this.session.CreateQuery(string.Format("from LsSupplier where LsClient.ClientId={0}", (object) this.Client.ClientId)).List<LsSupplier>().Count != 0)
        return true;
      this.lblArError.Text = "Введите параметры, услуги, поставщиков";
      this.lblArError.Left = this.lblEdit.Left - 120;
      this.lblArError.Visible = true;
      this.tmrArError.Start();
      return false;
    }

    private void LoadParam()
    {
      this.btnAddRecord.Enabled = true;
      this.btnDelRecord.Enabled = true;
      this.btnSave.Enabled = false;
      this.InsertRecord = false;
      this.InitGrid = true;
      this.session.Clear();
      this.session = Kvartplata.Domain.CurrentSession;
      string str = this.Client.Complex.IdFk != Kvartplata.Classes.Options.ComplexArenda.IdFk ? " or p.Param_type=3" : " or p.Param_type=5 or p.ParamId in (2,42,103,104,107,14,15,16,27,28,37,38,65,117,59,53)";
      IQuery query;
      if (!this.PastTime)
      {
        if (this.Arhiv)
          query = this.session.CreateQuery(string.Format("select c from ClientParam c, Param p where c.Param.ParamId=p.ParamId and  c.ClientId={0} and c.Period.PeriodId={1} and (p.Param_type={3}" + str + ") order by p.Sorter, c.DBeg ", (object) this.Client.ClientId, (object) 0, (object) (short) 3, (object) (short) 0));
        else
          query = this.session.CreateQuery(string.Format("select c from ClientParam c, Param p where c.Param.ParamId=p.ParamId and  c.ClientId={0} and c.Period.PeriodId={1} and (p.Param_type={3}" + str + ")  and c.DEnd >= '{4}'  order by p.Sorter, c.DBeg ", (object) this.Client.ClientId, (object) 0, (object) (short) 3, (object) (short) 0, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(this.NextMonthClosed.PeriodName.Value)));
      }
      else if (this.Arhiv)
        query = this.session.CreateQuery(string.Format("select c from ClientParam c, Param p where c.Param.ParamId=p.ParamId and  c.ClientId={0} and c.Period.PeriodId!={1} and (p.Param_type={1} or p.Param_type={2}) order by p.Sorter, c.DBeg ", (object) this.Client.ClientId, (object) 0, (object) (short) 3, (object) (short) 0));
      else
        query = this.session.CreateQuery(string.Format("select c from ClientParam c, Param p where c.Param.ParamId=p.ParamId and  c.ClientId={0} and c.Period.PeriodId={1} and (p.Param_type={2} or p.Param_type={3}" + str + ") order by p.Sorter, c.DBeg ", (object) this.Client.ClientId, (object) this.CurrentPeriod.PeriodId, (object) (short) 3, (object) (short) 0));
      IList<ClientParam> clientParamList = query.List<ClientParam>();
      this.dgvParams.Columns.Clear();
      this.dgvParams.DataSource = (object) null;
      this.dgvParams.DataSource = (object) clientParamList;
      foreach (ClientParam clientParam in (List<ClientParam>) this.dgvParams.DataSource)
      {
        clientParam.IsEdit = false;
        clientParam.OldHashCode = clientParam.GetHashCode();
        clientParam.IsInsert = false;
      }
      this.session.Clear();
      this.OldListClientParam = (IList<ClientParam>) new List<ClientParam>();
      this.OldListClientParam = query.List<ClientParam>();
      int index = 0;
      foreach (ClientParam clientParam in (List<ClientParam>) this.dgvParams.DataSource)
      {
        this.OldListClientParam[index].IsEdit = false;
        this.OldListClientParam[index].OldHashCode = clientParam.OldHashCode;
        this.OldListClientParam[index].IsInsert = false;
        ++index;
      }
      this.dgvParamLoadComboBoxField(false);
      this.MySettingsLsParam.GridName = "LsParam";
      this.LoadSettingsLsParam();
      this.InitGrid = false;
    }

    public void LoadSettingsLsParam()
    {
      this.MySettingsLsParam.Load();
      foreach (DataGridViewColumn column in (BaseCollection) this.dgvParams.Columns)
        this.MySettingsLsParam.GetMySettings(column);
    }

    private void dgvParamLoadComboBoxField(bool ohlsdoc = false)
    {
      string str = this.Client.Complex.IdFk != Kvartplata.Classes.Options.ComplexArenda.IdFk ? " or Param_type=3" : " or Param_type=5 or ParamId in (2,42,103,104,107,14,15,16,27,28,37,38,65,117,59,53)";
      IList<Param> objList = (IList<Param>) new List<Param>();
      if (ohlsdoc)
        objList.Add(this.session.Get<Param>((object) Convert.ToInt16(117)));
      else
        objList = this.session.CreateQuery(string.Format("from Param where Param_type=0" + str + " order by Sorter")).List<Param>();
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvParams, 0, "Дата начала", "MDBeg");
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvParams, 1, "Дата окончания", "MDEnd");
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvParams, 1, (IList) objList, "ParamId", "ParamName", "Наименование", "PName", 7, 100);
      Kvartplata.Classes.KvrplHelper.AddTextBoxColumn(this.dgvParams, 2, "Значение", "PValue", 100, false);
      this.dgvParams.Columns["Uname"].DisplayIndex = 4;
      this.dgvParams.Columns["Dedit"].DisplayIndex = 5;
      Kvartplata.Classes.KvrplHelper.ViewEdit(this.dgvParams);
      this.progressBar1.Visible = true;
      this.progressBar1.Value = 0;
      this.progressBar1.Step = 1;
      this.progressBar1.Minimum = 0;
      this.progressBar1.Maximum = this.dgvParams.Rows.Count;
      foreach (DataGridViewRow row in (IEnumerable) this.dgvParams.Rows)
      {
        DataGridViewCell cell1 = row.Cells["MDBeg"];
        DateTime dateTime = ((ClientParam) row.DataBoundItem).DBeg;
        string shortDateString1 = dateTime.ToShortDateString();
        cell1.Value = (object) shortDateString1;
        DataGridViewCell cell2 = row.Cells["MDEnd"];
        dateTime = ((ClientParam) row.DataBoundItem).DEnd;
        string shortDateString2 = dateTime.ToShortDateString();
        cell2.Value = (object) shortDateString2;
        this.progressBar1.Value = this.progressBar1.Value + 1;
        if (((ClientParam) row.DataBoundItem).Param != null)
        {
          row.Cells["PName"].Value = (object) ((ClientParam) row.DataBoundItem).ParamId;
          IList<AdmTbl> admTblList = this.session.CreateQuery(string.Format("select s from AdmTbl s,ParamRelation r where s.TableId=r.TableId and r.ParamId={0}", (object) ((ClientParam) row.DataBoundItem).ParamId)).List<AdmTbl>();
          if (admTblList.Count > 0)
          {
            if (admTblList[0].ClassName != null)
            {
              try
              {
                DataGridViewComboBoxCell viewComboBoxCell = new DataGridViewComboBoxCell();
                viewComboBoxCell.DisplayStyleForCurrentCellOnly = true;
                viewComboBoxCell.ValueMember = admTblList[0].ClassNameId;
                viewComboBoxCell.DisplayMember = admTblList[0].ClassNameName;
                if (Convert.ToInt32(this.dgvParams.Rows[row.Index].Cells["PName"].Value) == 117)
                {
                  if (admTblList[0].ClassName == "RightDoc")
                    viewComboBoxCell.DataSource = (object) this.session.CreateQuery(string.Format("from RightDoc  where RightDocId in(19,21,27,40)")).List();
                }
                else if (admTblList[0].ClassName != "Tariff")
                {
                  viewComboBoxCell.DataSource = (object) this.session.CreateQuery(string.Format("from {0} {1}", (object) admTblList[0].ClassName, admTblList[0].ClassName != "Tariff" ? (object) "" : (object) " where Service.ServiceId=26")).List();
                }
                else
                {
                  IList<Tariff> tariffList = this.session.CreateQuery(string.Format("from {0} {1}", (object) admTblList[0].ClassName, admTblList[0].ClassName != "Tariff" ? (object) "" : (object) " where Service.ServiceId=26")).List<Tariff>();
                  tariffList.Insert(0, new Tariff()
                  {
                    Tariff_id = 0,
                    Tariff_name = "Не определено"
                  });
                  viewComboBoxCell.DataSource = (object) tariffList;
                }
                System.Type type = admTblList[0].ClassName != "Tariff" ? typeof (short) : typeof (int);
                viewComboBoxCell.ValueType = type;
                row.Cells["PValue"] = (DataGridViewCell) viewComboBoxCell;
              }
              catch (Exception ex)
              {
                Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
              }
            }
            row.Cells["PValue"].Value = !(admTblList[0].ClassName != "Tariff") ? (object) (int) ((ClientParam) row.DataBoundItem).ParamValue : (object) (short) ((ClientParam) row.DataBoundItem).ParamValue;
          }
          else
            row.Cells["PValue"].Value = (object) ((ClientParam) row.DataBoundItem).ParamValue;
        }
      }
      this.progressBar1.Visible = false;
      if (this.dgvParams.Rows.Count > 0 && this.SelectedIndexClientParam == -1)
        this.SelectedIndexClientParam = 0;
      if (this.SelectedIndexClientParam == -1 || this.SelectedIndexClientParam >= this.dgvParams.Rows.Count)
        return;
      if (!this.InsertRecord)
      {
        this.dgvParams.CurrentCell = this.dgvParams.Rows[this.SelectedIndexClientParam].Cells[0];
      }
      else
      {
        this.dgvParams.CurrentCell = this.dgvParams.Rows[this.dgvParams.Rows.Count - 1].Cells[0];
        this.SelectedIndexClientParam = this.dgvParams.Rows.Count - 1;
      }
    }

    private void SaveAllParams()
    {
      foreach (DataGridViewRow row in (IEnumerable) this.dgvParams.Rows)
      {
        this.dgvParams.Rows[row.Index].Selected = true;
        this.dgvParams.CurrentCell = row.Cells[0];
        Application.DoEvents();
        if (((ClientParam) row.DataBoundItem).IsEdit)
        {
          this.OldClientParam = new ClientParam();
          foreach (ClientParam clientParam in (IEnumerable<ClientParam>) this.OldListClientParam)
          {
            if (clientParam.OldHashCode == ((ClientParam) row.DataBoundItem).OldHashCode)
            {
              this.OldClientParam = clientParam;
              break;
            }
          }
          this.SaveParam();
        }
        ((ClientParam) row.DataBoundItem).IsEdit = false;
      }
      this.btnAddRecord.Enabled = true;
      this.btnDelRecord.Enabled = true;
    }

    private bool SaveParam()
    {
      if (this.dgvParams.CurrentRow == null)
        return true;
      DataGridViewRow dataGridViewRow = new DataGridViewRow();
      DataGridViewRow row = this.dgvParams.Rows[this.dgvParams.CurrentRow.Index];
      this.session.Clear();
      ClientParam clientParam1 = new ClientParam();
      ClientParam dataBoundItem = (ClientParam) row.DataBoundItem;
      dataBoundItem.ClientId = this.Client.ClientId;
      if (row.Cells["PName"].Value == null)
      {
        int num = (int) MessageBox.Show("Не выбран параметр!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        return false;
      }
      dataBoundItem.Uname = Kvartplata.Classes.Options.Login;
      dataBoundItem.Dedit = DateTime.Now.Date;
      int val = 0;
      if (this.OldClientParam.Param != null)
      {
        val = (int) this.OldClientParam.Param.ParamId;
        this.InsertRecord = false;
      }
      else
        this.InsertRecord = true;
      this.InsertRecord = dataBoundItem.IsInsert;
      dataBoundItem.Param = this.session.Get<Param>((object) Convert.ToInt16(row.Cells["PName"].Value));
      try
      {
        dataBoundItem.ParamValue = Convert.ToDouble(Kvartplata.Classes.KvrplHelper.ChangeSeparator(this.dgvParams.Rows[this.dgvParams.CurrentRow.Index].Cells["PValue"].Value.ToString()));
      }
      catch
      {
        int num = (int) MessageBox.Show("Некорректный формат значения!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        return false;
      }
      try
      {
        dataBoundItem.DBeg = Convert.ToDateTime(this.dgvParams.Rows[this.dgvParams.CurrentRow.Index].Cells["MDBeg"].Value);
      }
      catch
      {
        int num = (int) MessageBox.Show("Некорректный формат даты!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        return false;
      }
      try
      {
        dataBoundItem.DEnd = Convert.ToDateTime(this.dgvParams.Rows[this.dgvParams.CurrentRow.Index].Cells["MDEnd"].Value);
      }
      catch
      {
        int num = (int) MessageBox.Show("Некорректный формат даты!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        return false;
      }
      if ((int) dataBoundItem.ParamId == 112 || (int) dataBoundItem.ParamId == 113)
      {
        if (this.PastTime)
        {
          int num = (int) MessageBox.Show("Ввод данного параметра в прошлом времени невозможен", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          return false;
        }
        if (this.session.Get<Kvartplata.Classes.LsClient>((object) Convert.ToInt32(dataBoundItem.ParamValue)) == null)
        {
          int num = (int) MessageBox.Show("Введенный лицевой счет не найден", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          return false;
        }
        dataBoundItem.DBeg = Kvartplata.Classes.KvrplHelper.FirstDay(dataBoundItem.DBeg);
        dataBoundItem.DEnd = Kvartplata.Classes.KvrplHelper.LastDay(dataBoundItem.DEnd);
      }
      dataBoundItem.Period = !this.PastTime ? this.session.Get<Kvartplata.Classes.Period>((object) 0) : this.CurrentPeriod;
      if ((int) dataBoundItem.ParamId == 1 || (int) dataBoundItem.ParamId == 2)
        dataBoundItem.ParamValue = !Kvartplata.Classes.Options.RoundArea ? Math.Round(dataBoundItem.ParamValue, 1) : Math.Round(dataBoundItem.ParamValue, 2);
      if (dataBoundItem.DBeg > dataBoundItem.DEnd)
      {
        int num = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. дата начала больше даты окончания", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        this.session.Clear();
        this.session = Kvartplata.Domain.CurrentSession;
        return !this.InsertRecord;
      }
      DateTime? periodName;
      if (!this.PastTime)
      {
        if (!this.InsertRecord && dataBoundItem.DBeg <= this.LastDayMonthClosed && dataBoundItem.DBeg != this.OldClientParam.DBeg)
        {
          int num = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          return true;
        }
        if (!this.InsertRecord && (this.OldClientParam.DBeg < this.LastDayMonthClosed && this.OldClientParam.DEnd < this.LastDayMonthClosed))
        {
          int num = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          return true;
        }
        if (!this.InsertRecord && (this.OldClientParam.DBeg < this.LastDayMonthClosed && (this.OldClientParam.DBeg != dataBoundItem.DBeg || (int) this.OldClientParam.Param.ParamId != (int) dataBoundItem.Param.ParamId || this.OldClientParam.ParamValue != dataBoundItem.ParamValue) || this.OldClientParam.DEnd < this.LastDayMonthClosed && (this.OldClientParam.DEnd != dataBoundItem.DEnd || (int) this.OldClientParam.Param.ParamId != (int) dataBoundItem.Param.ParamId || this.OldClientParam.ParamValue != dataBoundItem.ParamValue)))
        {
          int num = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          return true;
        }
        if (dataBoundItem.DEnd < this.LastDayMonthClosed)
        {
          int num = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. дата окончания принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          return !this.InsertRecord;
        }
        int num1;
        if (this.InsertRecord)
        {
          DateTime dbeg = dataBoundItem.DBeg;
          periodName = this.NextMonthClosed.PeriodName;
          num1 = periodName.HasValue ? (dbeg < periodName.GetValueOrDefault() ? 1 : 0) : 0;
        }
        else
          num1 = 0;
        if (num1 != 0)
        {
          int num2 = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          return false;
        }
      }
      else
      {
        DateTime dbeg = dataBoundItem.DBeg;
        periodName = this.MonthClosed.PeriodName;
        DateTime lastDayPeriod1 = Kvartplata.Classes.KvrplHelper.GetLastDayPeriod(periodName.Value);
        int num1;
        if (!(dbeg > lastDayPeriod1))
        {
          DateTime dend = dataBoundItem.DEnd;
          periodName = this.MonthClosed.PeriodName;
          DateTime lastDayPeriod2 = Kvartplata.Classes.KvrplHelper.GetLastDayPeriod(periodName.Value);
          num1 = dend > lastDayPeriod2 ? 1 : 0;
        }
        else
          num1 = 1;
        if (num1 != 0)
        {
          int num2 = (int) MessageBox.Show("Не могу сохранить текущую запись! Проверьте корректность введённых дат", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          return !this.InsertRecord;
        }
        periodName = this.CurrentPeriod.PeriodName;
        DateTime dateTime = periodName.Value;
        periodName = this.MonthClosed.PeriodName;
        DateTime lastDayPeriod3 = Kvartplata.Classes.KvrplHelper.GetLastDayPeriod(periodName.Value);
        if (dateTime < lastDayPeriod3)
        {
          int num2 = (int) MessageBox.Show("Не могу сохранить текущую запись! Проверьте корректность введённых дат", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          return !this.InsertRecord;
        }
        periodName = this.MonthClosed.PeriodName;
        if (Kvartplata.Classes.KvrplHelper.GetLastDayPeriod(periodName.Value) - dataBoundItem.DBeg > new TimeSpan(730, 0, 0, 0) && MessageBox.Show("Дата начала отличается от даты закрытого периода более, чем на 2 года. Продолжить сохранение? ", "Внимание", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.No)
        {
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          return false;
        }
      }
      if ((int) dataBoundItem.ParamId == 117 && !Kvartplata.Classes.KvrplHelper.CheckProxy(86, 2, this.session.Get<Kvartplata.Classes.Company>((object) Convert.ToInt16(this.CompanyId)), true) || (int) dataBoundItem.Param.ParamId == 115 && !Kvartplata.Classes.KvrplHelper.CheckProxy(86, 2, this.session.Get<Kvartplata.Classes.Company>((object) Convert.ToInt16(this.CompanyId)), true))
        return false;
      if (this.InsertRecord)
      {
        using (ITransaction transaction = this.session.BeginTransaction())
        {
          try
          {
            this.session.Save((object) dataBoundItem);
            this.session.Flush();
            transaction.Commit();
            if (this.PastTime && Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(32, this.Client.Company)) == 1)
            {
              if (Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(1, this.Client.Company)) == 28)
              {
                if (MessageBox.Show("Внести основание?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
                {
                  FrmArgument frmArgument = new FrmArgument();
                  int num1 = (int) frmArgument.ShowDialog();
                  frmArgument.Dispose();
                  ClientParam clientParam2 = dataBoundItem;
                  Kvartplata.Classes.LsClient client = this.Client;
                  int num2 = 1;
                  string str = this.dgvParams.CurrentRow.Cells["PValue"].FormattedValue.ToString();
                  string note = frmArgument.Argument();
                  int num3 = this.PastTime ? 1 : 0;
                  periodName = this.MonthClosed.PeriodName;
                  DateTime monthClosed = periodName.Value;
                  Kvartplata.Classes.KvrplHelper.SaveParamToNoteBook(clientParam2, client, (short) num2, str, note, num3 != 0, monthClosed);
                }
              }
              else
              {
                ClientParam clientParam2 = dataBoundItem;
                Kvartplata.Classes.LsClient client = this.Client;
                int num1 = 1;
                string str = this.dgvParams.CurrentRow.Cells["PValue"].FormattedValue.ToString();
                string note = "";
                int num2 = this.PastTime ? 1 : 0;
                periodName = this.MonthClosed.PeriodName;
                DateTime monthClosed = periodName.Value;
                Kvartplata.Classes.KvrplHelper.SaveParamToNoteBook(clientParam2, client, (short) num1, str, note, num2 != 0, monthClosed);
              }
            }
          }
          catch (Exception ex)
          {
            this.session.Clear();
            this.session = Kvartplata.Domain.CurrentSession;
            int num = (int) MessageBox.Show("Не могу сохранить текущую запись", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
            transaction.Rollback();
            return true;
          }
        }
      }
      if (this.OldClientParam != null && !this.InsertRecord)
      {
        try
        {
          this.session.CreateSQLQuery("update DBA.lsParam cmp set DBeg=:dbeg,Param_Id=:paramid,DEnd=:dend,Param_Value=:paramvalue, Uname=:uname, Dedit=:dedit where cmp.Client_Id=:clientid and cmp.Period_Id=:periodid and cmp.Dbeg = :olddbeg and cmp.Param_Id = :oldparamid").SetParameter<DateTime>("dbeg", dataBoundItem.DBeg.Date).SetParameter<short>("paramid", dataBoundItem.Param.ParamId).SetParameter<DateTime>("dend", dataBoundItem.DEnd.Date).SetParameter<double>("paramvalue", dataBoundItem.ParamValue).SetParameter<string>("uname", dataBoundItem.Uname).SetParameter<DateTime>("dedit", dataBoundItem.Dedit).SetParameter<int>("clientid", dataBoundItem.ClientId).SetParameter<int>("periodid", dataBoundItem.Period.PeriodId).SetParameter<DateTime>("olddbeg", this.OldClientParam.DBeg.Date).SetParameter<int>("oldparamid", val).ExecuteUpdate();
          if (Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(32, this.Client.Company)) == 1)
          {
            ClientParam clientParam2 = dataBoundItem;
            ClientParam oldClientParam = this.OldClientParam;
            Kvartplata.Classes.LsClient client = this.Client;
            int num1 = 2;
            string str = this.dgvParams.CurrentRow.Cells["PValue"].FormattedValue.ToString();
            int num2 = this.PastTime ? 1 : 0;
            periodName = this.MonthClosed.PeriodName;
            DateTime monthClosed = periodName.Value;
            Kvartplata.Classes.KvrplHelper.ChangeParamToNoteBook(clientParam2, oldClientParam, client, (short) num1, str, num2 != 0, monthClosed);
          }
        }
        catch (Exception ex)
        {
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          int num = (int) MessageBox.Show("Не могу сохранить текущую запись", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
          return true;
        }
      }
      if ((int) dataBoundItem.ParamId == 107 && (dataBoundItem.DBeg <= DateTime.Now && dataBoundItem.DEnd >= DateTime.Now))
      {
        string connectionString = string.Format("Provider={4};Eng={0};Uid={1};Pwd={2}; Links={3}", (object) Kvartplata.Classes.Options.BaseName, (object) Kvartplata.Classes.Options.Login, (object) Kvartplata.Classes.Options.Pwd, (object) "tcpip{}", (object) Kvartplata.Classes.Options.Provider);
        string commandText = string.Format(" update Tenant set status={0}, uname='{1}', dedit='{2}'  where idlic={3}", (object) dataBoundItem.ParamValue, (object) Kvartplata.Classes.Options.Login, (object) Kvartplata.Classes.KvrplHelper.DateTimeToBaseFormat(this.Client.Dedit), (object) this.Client.ClientId);
        try
        {
          Kvartplata.Classes.OleDbHelper.ExecuteNonQuery(connectionString, CommandType.Text, commandText, 1000);
        }
        catch
        {
        }
      }
      this.InsertRecord = false;
      return true;
    }

    private void InsertParam(bool ohsldoc = false)
    {
      ClientParam clientParam1 = new ClientParam();
      clientParam1.ClientId = this.ClientId;
      clientParam1.Period = this.session.Get<Kvartplata.Classes.Period>((object) 0);
      clientParam1.IsInsert = true;
      clientParam1.IsEdit = true;
      if (this.PastTime)
      {
        ClientParam clientParam2 = clientParam1;
        DateTime? periodName = this.MonthClosed.PeriodName;
        DateTime dateTime = periodName.Value;
        clientParam2.DBeg = dateTime;
        ClientParam clientParam3 = clientParam1;
        periodName = this.MonthClosed.PeriodName;
        DateTime lastDayPeriod = Kvartplata.Classes.KvrplHelper.GetLastDayPeriod(periodName.Value);
        clientParam3.DEnd = lastDayPeriod;
      }
      else
      {
        clientParam1.DBeg = !(this.CurrentPeriod.PeriodName.Value <= this.MonthClosed.PeriodName.Value) ? this.CurrentPeriod.PeriodName.Value : this.NextMonthClosed.PeriodName.Value.Date;
        clientParam1.DEnd = Convert.ToDateTime("31.12.2999");
        if (this.Client.Complex.IdFk == Kvartplata.Classes.Options.ComplexArenda.IdFk)
        {
          IList<LsArenda> lsArendaList = this.session.CreateCriteria(typeof (LsArenda)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient.ClientId", (object) this.Client.ClientId)).List<LsArenda>();
          if (lsArendaList.Count > 0)
          {
            if (lsArendaList[0].DBeg <= clientParam1.DBeg && lsArendaList[0].DEnd >= clientParam1.DBeg)
              clientParam1.DEnd = lsArendaList[0].DEnd;
            else if (lsArendaList[0].DBeg > clientParam1.DBeg)
            {
              clientParam1.DEnd = lsArendaList[0].DEnd;
              clientParam1.DBeg = lsArendaList[0].DBeg;
            }
          }
        }
      }
      if (this.PastTime)
        clientParam1.Period = this.CurrentPeriod;
      int num = this.dgvParams.CurrentRow == null ? 0 : (this.dgvParams.Rows[this.dgvParams.CurrentRow.Index].Cells["PName"].Value != null ? 1 : 0);
      clientParam1.Param = num == 0 ? (Param) null : this.session.Get<Param>((object) (short) this.dgvParams.Rows[this.dgvParams.CurrentRow.Index].Cells["PName"].Value);
      IList<ClientParam> clientParamList = (IList<ClientParam>) new List<ClientParam>();
      if ((uint) this.dgvParams.Rows.Count > 0U)
        clientParamList = (IList<ClientParam>) (this.dgvParams.DataSource as List<ClientParam>);
      clientParamList.Add(clientParam1);
      this.dgvParams.Columns.Clear();
      this.dgvParams.DataSource = (object) null;
      this.dgvParams.DataSource = (object) clientParamList;
      this.InsertRecord = true;
      this.dgvParamLoadComboBoxField(ohsldoc);
      this.LoadSettingsLsParam();
    }

    private void DelParam(bool ohldoc = false)
    {
      if (this.dgvParams.Rows.Count <= 0 || this.dgvParams.CurrentRow.Index < 0 || MessageBox.Show("Вы уверены, что хотите удалить запись", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) != DialogResult.OK)
        return;
      DataGridViewRow dataGridViewRow = new DataGridViewRow();
      DataGridViewRow row1 = this.dgvParams.Rows[this.dgvParams.CurrentRow.Index];
      ClientParam clientParam = new ClientParam();
      ClientParam dataBoundItem = (ClientParam) row1.DataBoundItem;
      if ((int) dataBoundItem.ParamId == 117 && !Kvartplata.Classes.KvrplHelper.CheckProxy(86, 2, this.session.Get<Kvartplata.Classes.Company>((object) Convert.ToInt16(this.CompanyId)), true) || (int) dataBoundItem.ParamId == 115 && !Kvartplata.Classes.KvrplHelper.CheckProxy(86, 2, this.session.Get<Kvartplata.Classes.Company>((object) Convert.ToInt16(this.CompanyId)), true))
        return;
      if (!ohldoc)
        ;
      int index = this.dgvParams.CurrentRow.Index;
      bool flag = true;
      foreach (DataGridViewRow row2 in (IEnumerable) this.dgvParams.Rows)
      {
        if (row2.Index != index && dataBoundItem.DBeg == Convert.ToDateTime(row2.Cells["MDBeg"].Value) && (int) dataBoundItem.Param.ParamId == (int) Convert.ToInt16(row2.Cells["PName"].Value))
        {
          flag = false;
          break;
        }
      }
      if (flag)
      {
        if (!this.PastTime)
        {
          if (dataBoundItem.DBeg <= this.LastDayMonthClosed || dataBoundItem.DEnd <= this.LastDayMonthClosed)
          {
            int num = (int) MessageBox.Show("Не могу удалить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            this.session.Clear();
            this.session = Kvartplata.Domain.CurrentSession;
            return;
          }
        }
        else if (this.CurrentPeriod.PeriodName.Value <= this.MonthClosed.PeriodName.Value)
        {
          int num = (int) MessageBox.Show("Не могу удалить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          this.session.Clear();
          this.session = Kvartplata.Domain.CurrentSession;
          return;
        }
        this.session.Clear();
        this.session = Kvartplata.Domain.CurrentSession;
        using (ITransaction transaction = this.session.BeginTransaction())
        {
          try
          {
            this.session.Delete((object) dataBoundItem);
            this.session.Flush();
            transaction.Commit();
            if (Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(32, this.Client.Company)) == 1)
              Kvartplata.Classes.KvrplHelper.DeleteParamFromNoteBook(dataBoundItem, this.Client, (short) 3, this.dgvParams.CurrentRow.Cells["PValue"].FormattedValue.ToString(), this.PastTime, this.MonthClosed.PeriodName.Value);
          }
          catch (Exception ex)
          {
            int num = (int) MessageBox.Show("Не могу удалить текущую запись!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
            transaction.Rollback();
          }
        }
        this.session.Clear();
      }
    }

    private void dgvParams_CellEndEdit(object sender, DataGridViewCellEventArgs e)
    {
      if (this.dgvParams.CurrentRow == null)
        return;
      ClientParam dataBoundItem = (ClientParam) this.dgvParams.CurrentRow.DataBoundItem;
      dataBoundItem.IsEdit = true;
      if (this.dgvParams.CurrentCell.Value != null)
      {
        try
        {
          string name = this.dgvParams.Columns[e.ColumnIndex].Name;
          if (!(name == "PName"))
          {
            if (!(name == "MDBeg"))
            {
              if (!(name == "MDEnd"))
              {
                if (name == "PValue")
                {
                  try
                  {
                    dataBoundItem.ParamValue = Convert.ToDouble(Kvartplata.Classes.KvrplHelper.ChangeSeparator(this.dgvParams.Rows[this.dgvParams.CurrentRow.Index].Cells["PValue"].Value.ToString()));
                  }
                  catch
                  {
                  }
                }
              }
              else
              {
                try
                {
                  dataBoundItem.DEnd = Convert.ToDateTime(this.dgvParams.CurrentRow.Cells["MDEnd"].Value);
                }
                catch
                {
                }
              }
            }
            else
            {
              try
              {
                dataBoundItem.DBeg = Convert.ToDateTime(this.dgvParams.CurrentRow.Cells["MDBeg"].Value);
              }
              catch
              {
              }
            }
          }
          else
            dataBoundItem.Param = this.session.Get<Param>(this.dgvParams.CurrentRow.Cells["PName"].Value);
        }
        catch (Exception ex)
        {
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
        }
      }
    }

    private void dataGridView1_ColumnWidthChanged(object sender, DataGridViewColumnEventArgs e)
    {
      if (this.MySettingsLsParam.FindByName(e.Column.Name) < 0)
        return;
      this.MySettingsLsParam.Columns[this.MySettingsLsParam.FindByName(e.Column.Name)].Width = e.Column.Width;
      this.MySettingsLsParam.Save();
    }

    private void dataGridView1_CurrentCellDirtyStateChanged(object sender, EventArgs e)
    {
      if (!this.dgvParams.IsCurrentCellDirty)
        return;
      this.dgvParams.CommitEdit(DataGridViewDataErrorContexts.Commit);
      if (this.dgvParams.CurrentCell.ColumnIndex == this.dgvParams.Rows[this.dgvParams.CurrentRow.Index].Cells["PName"].ColumnIndex)
      {
        IList<AdmTbl> admTblList = this.session.CreateQuery(string.Format("select s from AdmTbl s,ParamRelation r where s.TableId=r.TableId and r.ParamId={0}", this.dgvParams.Rows[this.dgvParams.CurrentRow.Index].Cells["PName"].Value)).List<AdmTbl>();
        if (admTblList.Count > 0)
        {
          if (admTblList[0].ClassName != null)
          {
            try
            {
              DataGridViewComboBoxCell viewComboBoxCell = new DataGridViewComboBoxCell();
              viewComboBoxCell.DisplayStyleForCurrentCellOnly = true;
              viewComboBoxCell.ValueMember = admTblList[0].ClassNameId;
              viewComboBoxCell.DisplayMember = admTblList[0].ClassNameName;
              if (Convert.ToInt32(this.dgvParams.Rows[this.dgvParams.CurrentRow.Index].Cells["PName"].Value) == 117)
              {
                if (admTblList[0].ClassName == "RightDoc")
                  viewComboBoxCell.DataSource = (object) this.session.CreateQuery(string.Format("from RightDoc  where RightDocId in(19,21,27,40)")).List();
              }
              else if (admTblList[0].ClassName != "Tariff")
              {
                viewComboBoxCell.DataSource = (object) this.session.CreateQuery(string.Format("from {0} {1}", (object) admTblList[0].ClassName, admTblList[0].ClassName != "Tariff" ? (object) "" : (object) " where Service.ServiceId=26")).List();
              }
              else
              {
                IList<Tariff> tariffList = this.session.CreateQuery(string.Format("from {0} {1}", (object) admTblList[0].ClassName, admTblList[0].ClassName != "Tariff" ? (object) "" : (object) " where Service.ServiceId=26")).List<Tariff>();
                tariffList.Insert(0, new Tariff()
                {
                  Tariff_id = 0,
                  Tariff_name = "Не определено"
                });
                viewComboBoxCell.DataSource = (object) tariffList;
              }
              System.Type type = admTblList[0].ClassName != "Tariff" ? typeof (short) : typeof (int);
              viewComboBoxCell.ValueType = type;
              this.dgvParams.CurrentRow.Cells["PValue"] = (DataGridViewCell) viewComboBoxCell;
            }
            catch
            {
            }
          }
        }
        else
          this.dgvParams.Rows[this.dgvParams.CurrentRow.Index].Cells["PValue"] = (DataGridViewCell) new DataGridViewTextBoxCell();
      }
    }

    private void dataGridView1_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
    {
      if (this.dgvParams.DataSource == null)
        return;
      DataGridViewRow row = (sender as DataGridView).Rows[e.RowIndex];
      DateTime dbeg = ((ClientParam) row.DataBoundItem).DBeg;
      DateTime? periodName = this.NextMonthClosed.PeriodName;
      DateTime dateTime1 = Kvartplata.Classes.KvrplHelper.LastDay(periodName.Value);
      int num;
      if (dbeg <= dateTime1)
      {
        DateTime dend = ((ClientParam) row.DataBoundItem).DEnd;
        periodName = this.NextMonthClosed.PeriodName;
        DateTime dateTime2 = periodName.Value;
        num = dend >= dateTime2 ? 1 : 0;
      }
      else
        num = 0;
      if (num != 0)
      {
        row.DefaultCellStyle.BackColor = Color.PapayaWhip;
        row.DefaultCellStyle.ForeColor = Color.Black;
      }
      else
      {
        row.DefaultCellStyle.BackColor = Color.FromArgb((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
        row.DefaultCellStyle.ForeColor = Color.Gray;
      }
    }

    private void dataGridView1_KeyDown(object sender, KeyEventArgs e)
    {
      if (e.Control && e.KeyCode == Keys.Delete && this.btnDelRecord.Enabled)
        this.butDelRecord_Click(sender, (EventArgs) e);
      if (e.Control && e.KeyCode == Keys.Insert)
        this.InsertParam(false);
      if (!e.Control || e.KeyCode != Keys.S || !this.btnSave.Enabled)
        return;
      this.btnSave_Click(sender, (EventArgs) e);
    }

    private void tsmiCopyRecord_Click(object sender, EventArgs e)
    {
      bool flag = true;
      short num1;
      if (sender.ToString() == "Удалить запись из выбранных объектов")
      {
        flag = false;
        num1 = (short) 2;
      }
      else if (sender.ToString() == "Обновить запись в выбранных объектах")
      {
        num1 = (short) 3;
      }
      else
      {
        flag = true;
        num1 = (short) 1;
      }
      if (this.tcntrl.SelectedTab == this.tpOptions && (this.dgvParams.Rows.Count > 0 && this.dgvParams.CurrentRow.Index >= 0))
      {
        ClientParam clientParam = new ClientParam();
        ClientParam dataBoundItem = (ClientParam) this.dgvParams.Rows[this.dgvParams.CurrentRow.Index].DataBoundItem;
        if ((int) dataBoundItem.ParamId == 117 && !Kvartplata.Classes.KvrplHelper.CheckProxy(86, 2, this.session.Get<Kvartplata.Classes.Company>((object) Convert.ToInt16(this.CompanyId)), true) || (int) dataBoundItem.ParamId == 115 && !Kvartplata.Classes.KvrplHelper.CheckProxy(86, 2, this.session.Get<Kvartplata.Classes.Company>((object) Convert.ToInt16(this.CompanyId)), true))
          return;
        if (!this.PastTime)
        {
          if (dataBoundItem.DEnd > this.LastDayMonthClosed || (int) num1 == 3 && dataBoundItem.DEnd >= this.LastDayMonthClosed)
          {
            if (dataBoundItem.DBeg <= this.LastDayMonthClosed)
              dataBoundItem.DBeg = this.LastDayMonthClosed.AddDays(1.0);
            FrmChooseObject frmChooseObject = new FrmChooseObject(this.ClientId, dataBoundItem);
            frmChooseObject.Save = flag;
            frmChooseObject.CodeOperation = num1;
            frmChooseObject.MonthClosed = this.MonthClosed;
            int num2 = (int) frmChooseObject.ShowDialog();
            frmChooseObject.Dispose();
          }
          else
          {
            int num2 = (int) MessageBox.Show("Не могу выполнить операцию, так как запись принадлежит закрытому периоду!", "Внимание!", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            return;
          }
        }
        else if (dataBoundItem.Period.PeriodId > this.MonthClosed.PeriodId)
        {
          FrmChooseObject frmChooseObject = new FrmChooseObject(this.ClientId, dataBoundItem, this.dgvParams.CurrentRow.Cells["PValue"].FormattedValue.ToString());
          frmChooseObject.Save = flag;
          frmChooseObject.CodeOperation = num1;
          frmChooseObject.MonthClosed = this.MonthClosed;
          int num2 = (int) frmChooseObject.ShowDialog();
          frmChooseObject.Dispose();
        }
        else
        {
          int num2 = (int) MessageBox.Show("Не могу выполнить операцию, так как запись принадлежит закрытому периоду!", "Внимание!", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
          return;
        }
      }
      if (this.tcntrl.SelectedTab == this.tpQuality && (this.dgvQuality.Rows.Count > 0 && this.dgvQuality.CurrentRow.Index >= 0))
      {
        LsQuality lsQuality = new LsQuality();
        if (((LsQuality) this.dgvQuality.Rows[this.dgvQuality.CurrentRow.Index].DataBoundItem).Period.PeriodId <= this.MonthClosed.PeriodId)
        {
          int num2 = (int) MessageBox.Show("Не могу выполнить операцию, так как запись принадлежит закрытому периоду!", "Внимание!", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
          return;
        }
        FrmChooseObject frmChooseObject = new FrmChooseObject((LsQuality) this.dgvQuality.CurrentRow.DataBoundItem);
        frmChooseObject.Save = flag;
        frmChooseObject.CodeOperation = num1;
        frmChooseObject.MonthClosed = this.MonthClosed;
        int num3 = (int) frmChooseObject.ShowDialog();
        frmChooseObject.Dispose();
      }
      if (this.tcntrl.SelectedTab == this.tpService && this.tcntrlService.SelectedTab == this.tpLSService && (this.dgvLsService.Rows.Count > 0 && this.dgvLsService.CurrentRow.Index >= 0))
      {
        if (!this.PastTimeLsService)
        {
          if (((LsService) this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].DataBoundItem).DEnd > this.LastDayMonthClosed || (int) num1 == 3 && ((LsService) this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].DataBoundItem).DEnd >= this.LastDayMonthClosed)
          {
            if (((LsService) this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].DataBoundItem).DBeg <= this.LastDayMonthClosed)
              ((LsService) this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].DataBoundItem).DBeg = this.LastDayMonthClosed.AddDays(1.0);
            FrmChooseObject frmChooseObject = new FrmChooseObject((LsService) this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].DataBoundItem);
            frmChooseObject.Save = flag;
            frmChooseObject.CodeOperation = num1;
            frmChooseObject.MonthClosed = this.MonthClosed;
            int num2 = (int) frmChooseObject.ShowDialog();
            frmChooseObject.Dispose();
          }
          else
          {
            int num2 = (int) MessageBox.Show("Не могу скопировать запись, так как она принадлежит закрытому периоду!", "Внимание!", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            return;
          }
        }
        else if (((LsService) this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].DataBoundItem).Period.PeriodId > this.MonthClosed.PeriodId)
        {
          FrmChooseObject frmChooseObject = new FrmChooseObject((LsService) this.dgvLsService.Rows[this.dgvLsService.CurrentRow.Index].DataBoundItem);
          frmChooseObject.Save = flag;
          frmChooseObject.CodeOperation = num1;
          frmChooseObject.MonthClosed = this.MonthClosed;
          int num2 = (int) frmChooseObject.ShowDialog();
          frmChooseObject.Dispose();
        }
        else
        {
          int num2 = (int) MessageBox.Show("Не могу выполнить операцию, так как запись принадлежит закрытому периоду!", "Внимание!", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
          return;
        }
      }
      if (this.tcntrl.SelectedTab == this.tpCounters && (this.dgvMainCounters.Focused && this.dgvMainCounters.Rows.Count > 0 && (this.dgvMainCounters.CurrentRow != null && this.dgvMainCounters.CurrentRow.Index >= 0) && !this.fCounter))
      {
        Kvartplata.Classes.CounterRelation dataBoundItem = (Kvartplata.Classes.CounterRelation) this.dgvMainCounters.CurrentRow.DataBoundItem;
        if (!this.PastTime)
        {
          if (dataBoundItem.DBeg > this.LastDayMonthClosed || (int) num1 == 3)
          {
            FrmChooseObject frmChooseObject = new FrmChooseObject(dataBoundItem);
            frmChooseObject.Save = flag;
            frmChooseObject.CodeOperation = num1;
            frmChooseObject.MonthClosed = this.MonthClosed;
            int num2 = (int) frmChooseObject.ShowDialog();
            frmChooseObject.Dispose();
          }
          else
          {
            int num2 = (int) MessageBox.Show("Не могу скопировать запись, так как она принадлежит закрытому периоду!", "Внимание!", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            return;
          }
        }
        else if (dataBoundItem.DBeg <= this.LastDayMonthClosed && dataBoundItem.DEnd <= this.LastDayMonthClosed || (int) num1 == 3)
        {
          FrmChooseObject frmChooseObject = new FrmChooseObject(dataBoundItem);
          frmChooseObject.Save = flag;
          frmChooseObject.CodeOperation = num1;
          frmChooseObject.MonthClosed = this.MonthClosed;
          int num2 = (int) frmChooseObject.ShowDialog();
          frmChooseObject.Dispose();
        }
        else
        {
          int num2 = (int) MessageBox.Show("Не могу выполнить операцию, так как запись принадлежит закрытому периоду!", "Внимание!", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
          return;
        }
      }
      if (this.tcntrl.SelectedTab == this.tpMessage && (this.dgvMessage.Rows.Count > 0 && this.dgvMessage.CurrentRow.Index >= 0))
      {
        if (((HomesPhones) this.dgvMessage.CurrentRow.DataBoundItem).DBeg > this.LastDayMonthClosed || (int) num1 == 3)
        {
          FrmChooseObject frmChooseObject = new FrmChooseObject((HomesPhones) this.dgvMessage.CurrentRow.DataBoundItem, 1);
          frmChooseObject.Save = flag;
          frmChooseObject.CodeOperation = num1;
          frmChooseObject.MonthClosed = this.MonthClosed;
          int num2 = (int) frmChooseObject.ShowDialog();
          frmChooseObject.Dispose();
        }
        else
        {
          int num2 = (int) MessageBox.Show("Не могу выполнить операцию, так как запись принадлежит закрытому периоду!", "Внимание!", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
          return;
        }
      }
      if (this.tcntrl.SelectedTab != this.tpService || this.tcntrlService.SelectedTab != this.tpServiceParam || !Kvartplata.Classes.KvrplHelper.CheckProxy(40, 2, this.session.Get<Kvartplata.Classes.Company>((object) Convert.ToInt16(this.CompanyId)), true) || (this.dgvServiceParam.Rows.Count <= 0 || this.dgvServiceParam.CurrentRow.Index < 0))
        return;
      if (!this.PastTime)
      {
        if (((LsServiceParam) this.dgvServiceParam.CurrentRow.DataBoundItem).DEnd > this.LastDayMonthClosed || (int) num1 == 3 && ((LsServiceParam) this.dgvServiceParam.CurrentRow.DataBoundItem).DEnd >= this.LastDayMonthClosed)
        {
          if (((LsServiceParam) this.dgvServiceParam.CurrentRow.DataBoundItem).DBeg <= this.LastDayMonthClosed)
            ((LsServiceParam) this.dgvServiceParam.CurrentRow.DataBoundItem).DBeg = this.LastDayMonthClosed.AddDays(1.0);
          FrmChooseObject frmChooseObject = new FrmChooseObject((LsServiceParam) this.dgvServiceParam.CurrentRow.DataBoundItem, this.dgvServiceParam.CurrentRow.Cells["PValue"].FormattedValue.ToString());
          frmChooseObject.Save = flag;
          frmChooseObject.CodeOperation = num1;
          frmChooseObject.MonthClosed = this.MonthClosed;
          int num2 = (int) frmChooseObject.ShowDialog();
          frmChooseObject.Dispose();
        }
        else
        {
          int num4 = (int) MessageBox.Show("Не могу выполнить операцию, так как запись принадлежит закрытому периоду!", "Внимание!", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
      }
      else if (((LsServiceParam) this.dgvServiceParam.CurrentRow.DataBoundItem).Period.PeriodId > this.MonthClosed.PeriodId)
      {
        FrmChooseObject frmChooseObject = new FrmChooseObject((LsServiceParam) this.dgvServiceParam.CurrentRow.DataBoundItem, this.dgvServiceParam.CurrentRow.Cells["PValue"].FormattedValue.ToString());
        frmChooseObject.Save = flag;
        frmChooseObject.CodeOperation = num1;
        frmChooseObject.MonthClosed = this.MonthClosed;
        int num2 = (int) frmChooseObject.ShowDialog();
        frmChooseObject.Dispose();
      }
      else
      {
        int num5 = (int) MessageBox.Show("Не могу выполнить операцию, так как запись принадлежит закрытому периоду!", "Внимание!", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
      }
    }

    private void dataGridView1_CellMouseDown(object sender, DataGridViewCellMouseEventArgs e)
    {
      if (e.RowIndex == -1 || e.ColumnIndex == -1)
        return;
      this.dgvParams.CurrentCell = this.dgvParams.Rows[e.RowIndex].Cells[e.ColumnIndex];
      this.SelectedIndexClientParam = this.dgvParams.Rows[e.RowIndex].Index;
    }

    private void dataGridView1_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
    {
      if (this.dgvParams.CurrentRow == null)
        return;
      this.OldClientParam = new ClientParam();
      this.OldClientParam.ClientId = ((ClientParam) this.dgvParams.Rows[this.dgvParams.CurrentRow.Index].DataBoundItem).ClientId;
      this.OldClientParam.DBeg = ((ClientParam) this.dgvParams.Rows[this.dgvParams.CurrentRow.Index].DataBoundItem).DBeg;
      this.OldClientParam.DEnd = ((ClientParam) this.dgvParams.Rows[this.dgvParams.CurrentRow.Index].DataBoundItem).DEnd;
      this.OldClientParam.Param = ((ClientParam) this.dgvParams.Rows[this.dgvParams.CurrentRow.Index].DataBoundItem).Param;
      try
      {
        this.OldClientParam.DBeg = Convert.ToDateTime(this.dgvParams.Rows[this.dgvParams.CurrentRow.Index].Cells["MDBeg"].Value);
      }
      catch
      {
      }
      try
      {
        this.OldClientParam.DEnd = Convert.ToDateTime(this.dgvParams.Rows[this.dgvParams.CurrentRow.Index].Cells["MDEnd"].Value);
      }
      catch
      {
      }
      this.OldClientParam.Period = ((ClientParam) this.dgvParams.Rows[this.dgvParams.CurrentRow.Index].DataBoundItem).Period;
      try
      {
        this.OldClientParam.ParamValue = Convert.ToDouble(this.dgvParams.Rows[this.dgvParams.CurrentRow.Index].Cells["PValue"].Value);
      }
      catch
      {
        this.OldClientParam.ParamValue = 0.0;
        this.dgvParams.Rows[this.dgvParams.CurrentRow.Index].Cells["PValue"].Value = (object) 0;
      }
      this.btnSave.Enabled = true;
      ((ClientParam) this.dgvParams.Rows[this.dgvParams.CurrentRow.Index].DataBoundItem).IsEdit = true;
    }

    private void dataGridView1_CellValueChanged(object sender, DataGridViewCellEventArgs e)
    {
      if (this.dgvParams.Rows.Count <= 0 || this.dgvParams.CurrentRow == null || this.dgvParams.CurrentRow.Index < 0 || this.InitGrid)
        return;
      this.btnDelRecord.Enabled = false;
    }

    private void dataGridView1_DataError(object sender, DataGridViewDataErrorEventArgs e)
    {
      Kvartplata.Classes.KvrplHelper.WriteError(this.Name, ((Control) sender).Name, e, this.ClientId);
    }

    private void btnExit_Click(object sender, EventArgs e)
    {
      this.Close();
    }

    private void btnSave_Click(object sender, EventArgs e)
    {
      if (this.tcntrl.SelectedTab == this.tpTitul)
      {
        if (!Kvartplata.Classes.KvrplHelper.CheckProxy(38, 2, this.Client.Company, false))
        {
          if (!Kvartplata.Classes.KvrplHelper.CheckProxy(77, 2, this.Client.Company, false))
            return;
          if (this.SaveTitul())
            this.LoadTitul((short) 1);
        }
        else if (this.SaveTitul())
          this.LoadTitul((short) 1);
      }
      if (this.tcntrl.SelectedTab == this.tpArenda)
      {
        this.SaveArenda();
        this.SaveAllSupplierClientForArenda();
      }
      if (this.tpOptions.Visible)
      {
        if (Kvartplata.Classes.KvrplHelper.CheckProxy(39, 2, this.Client.Company, false))
        {
          if (this.OldClientParam != null)
          {
            bool flag = false;
            this.SaveAllParams();
            if (!flag)
              this.LoadParam();
          }
        }
        else
        {
          if (!Kvartplata.Classes.KvrplHelper.CheckProxy(39, 1, this.Client.Company, true) || !Kvartplata.Classes.KvrplHelper.CheckProxy(86, 2, this.Client.Company, true) || this.OldClientParam == null)
            return;
          bool flag = false;
          this.SaveAllParams();
          if (!flag)
            this.LoadParam();
          return;
        }
      }
      if (this.tcntrl.SelectedTab == this.tpSaldo && (this.tcntrlBalance.SelectedIndex == 0 && this.PastTime))
      {
        if (!Kvartplata.Classes.KvrplHelper.CheckProxy(45, 2, this.Client.Company, true))
          return;
        this.SaveHandMade();
        if (!this.InsertRecord)
          this.LoadHandMade();
      }
      if (this.tcntrl.SelectedTab == this.tpLodgers)
      {
        if (!Kvartplata.Classes.KvrplHelper.CheckProxy(47, 2, this.Client.Company, true))
          return;
        this.SaveAllPerson();
      }
      if (this.tcntrl.SelectedTab == this.tpOwners)
      {
        if (!Kvartplata.Classes.KvrplHelper.CheckProxy(47, 2, this.Client.Company, true))
          return;
        this.SaveOwnerDoc();
        if (!this.InsertRecord)
          this.LoadOwnerDoc();
      }
      if (this.tcntrl.SelectedTab == this.tpQuality)
      {
        if (!Kvartplata.Classes.KvrplHelper.CheckProxy(43, 2, this.Client.Company, true))
          return;
        this.SaveAllQuality();
        if (!this.InsertRecord)
          this.LoadQuality();
      }
      if (this.tcntrl.SelectedTab == this.tpAbsence)
      {
        if (!Kvartplata.Classes.KvrplHelper.CheckProxy(44, 2, this.Client.Company, true))
          return;
        this.SaveAllAbsence();
        if (!this.InsertRecord)
          this.LoadAbsence();
      }
      if (this.tcntrl.SelectedTab == this.tpMSP && this.tcntrlMsp.SelectedIndex == 0)
      {
        if (!Kvartplata.Classes.KvrplHelper.CheckProxy(46, 2, this.Client.Company, true))
          return;
        this.SaveAllMsp();
      }
      if (this.tcntrl.SelectedTab == this.tpCounters)
      {
        if (this.tcntrlCounters.SelectedIndex == 1)
          this.SaveAllMainCounter();
        if (this.tcntrlCounters.SelectedIndex == 0)
        {
          if (!Kvartplata.Classes.KvrplHelper.CheckProxy(42, 2, this.Client.Company, true))
            return;
          this.SaveAllEvidence();
        }
        if (this.tcntrlCounters.SelectedTab == this.tpAudit)
        {
          if (!Kvartplata.Classes.KvrplHelper.CheckProxy(42, 2, this.Client.Company, true))
            return;
          this.SaveAllAudit();
        }
        if (this.tcntrlCounters.SelectedTab == this.tpSeal)
        {
          if (!Kvartplata.Classes.KvrplHelper.CheckProxy(42, 2, this.Client.Company, true))
            return;
          this.SaveAllSeal();
        }
      }
      if (this.tcntrl.SelectedTab == this.tpService && this.tcntrlService.SelectedTab == this.tpServiceParam)
      {
        if (!Kvartplata.Classes.KvrplHelper.CheckProxy(40, 2, this.Client.Company, true))
          return;
        this.SaveAllServiceParam();
        if (!this.InsertRecord)
          this.LoadServiceParam();
      }
      if (this.tcntrl.SelectedTab == this.tpMessage)
        this.SaveAllMessage();
      if (this.tcntrl.SelectedTab == this.tpUZP)
        this.SaveAllBond();
      if (this.tcntrl.SelectedTab != this.tpPayWork)
        return;
      this.SaveWorkDistribute();
    }

    private void btnAddRecord_Click(object sender, EventArgs e)
    {
      if (this.tcntrl.SelectedTab == this.tpTitul)
        this.InsertSupplierClient();
      if (this.tcntrl.SelectedTab == this.tpArenda)
        this.InsertSupplierClientForArenda();
      if (this.tpOptions.Visible)
      {
        if (Kvartplata.Classes.KvrplHelper.CheckProxy(39, 2, this.Client.Company, false))
        {
          this.InsertParam(false);
        }
        else
        {
          if (!Kvartplata.Classes.KvrplHelper.CheckProxy(39, 1, this.Client.Company, true) || !Kvartplata.Classes.KvrplHelper.CheckProxy(86, 2, this.Client.Company, true))
            return;
          this.InsertParam(true);
        }
      }
      if (this.tcntrl.SelectedTab == this.tpSaldo && (this.tcntrlBalance.SelectedIndex == 0 && this.PastTime))
      {
        if (!Kvartplata.Classes.KvrplHelper.CheckProxy(45, 2, this.Client.Company, true))
          return;
        this.InsertHandMade();
      }
      if (this.tcntrl.SelectedTab == this.tpLodgers)
      {
        if (!Kvartplata.Classes.KvrplHelper.CheckProxy(47, 2, this.Client.Company, true))
          return;
        this.InsertPerson();
      }
      if (this.tcntrl.SelectedTab == this.tpOwners)
      {
        if (!Kvartplata.Classes.KvrplHelper.CheckProxy(47, 2, this.Client.Company, true))
          return;
        this.btnDelRecord.Enabled = false;
        this.btnSave.Enabled = true;
        this.btnAddOwner.Enabled = false;
        this.btnDelOwner.Enabled = false;
        this.btnSaveOwner.Enabled = false;
        this.InsertOwnerDoc();
      }
      if (this.tcntrl.SelectedTab == this.tpQuality)
      {
        if (!Kvartplata.Classes.KvrplHelper.CheckProxy(43, 2, this.Client.Company, true))
          return;
        this.InsertQuality();
      }
      if (this.tcntrl.SelectedTab == this.tpAbsence)
      {
        if (!Kvartplata.Classes.KvrplHelper.CheckProxy(44, 2, this.Client.Company, true))
          return;
        this.InsertAbsence();
      }
      if (this.tcntrl.SelectedTab == this.tpCounters)
      {
        if (!Kvartplata.Classes.KvrplHelper.CheckProxy(42, 2, this.Client.Company, true))
          return;
        DateTime dateTime = this.MonthClosed.PeriodName.Value;
        DateTime? periodName = Kvartplata.Classes.Options.Period.PeriodName;
        if (periodName.HasValue && dateTime >= periodName.GetValueOrDefault())
        {
          int num = (int) MessageBox.Show("Невозможен ввод данных в закрытом месяце", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
          return;
        }
        if (this.tcntrlCounters.SelectedIndex == 1)
          this.InsertMainCounter();
        if (this.tcntrlCounters.SelectedIndex == 0)
          this.InsertEvidence();
        if (this.tcntrlCounters.SelectedTab == this.tpAudit)
          this.InsertAudit();
        if (this.tcntrlCounters.SelectedTab == this.tpSeal)
          this.InsertSeal();
        this.btnDelRecord.Enabled = false;
        this.btnSave.Enabled = true;
      }
      if (this.tcntrl.SelectedTab == this.tpMSP)
      {
        if (!Kvartplata.Classes.KvrplHelper.CheckProxy(46, 2, this.Client.Company, true))
          return;
        this.InsertMsp();
      }
      if (this.tcntrl.SelectedTab == this.tpService && this.tcntrlService.SelectedTab == this.tpServiceParam)
      {
        if (!Kvartplata.Classes.KvrplHelper.CheckProxy(40, 2, this.Client.Company, true))
          return;
        this.InsertServiceParam();
      }
      if (this.tcntrl.SelectedTab == this.tpMessage)
        this.InsertMessage();
      if (this.tcntrl.SelectedTab == this.tpUZP)
        this.InsertBond();
      if (this.tcntrl.SelectedTab != this.tpPayWork)
        return;
      this.InsertWorkDistribute();
      this.btnDelRecord.Enabled = false;
      this.btnSave.Enabled = true;
    }

    private void dtmpCurrentPeriod_ValueChanged(object sender, EventArgs e)
    {
      this.CurrentPeriod = Kvartplata.Classes.KvrplHelper.SaveCurrentPeriod(this.mpCurrentPeriod.Value);
      Kvartplata.Classes.Options.Period = this.CurrentPeriod;
      if (this.PastTime)
      {
        if (this.tcntrl.SelectedTab == this.tpOptions)
          this.LoadParam();
        if (this.tcntrl.SelectedTab == this.tpSaldo)
        {
          if (this.tcntrlBalance.SelectedIndex == 0)
            this.LoadHandMade();
          else
            this.LoadPeni();
        }
        if (this.tcntrl.SelectedTab == this.tpMSP && this.tcntrlMsp.SelectedIndex == 1)
          this.LoadFrFamily();
        if (this.tcntrl.SelectedTab == this.tpMSP && this.tcntrlMsp.SelectedIndex == 0)
          this.LoadMsp();
        if (this.tcntrl.SelectedTab == this.tpService && this.tcntrlService.SelectedTab == this.tpServiceParam)
          this.LoadServiceParam();
        if (this.tcntrl.SelectedTab == this.tpCounters && this.tcntrlCounters.SelectedTab == this.tpAudit)
          this.LoadAudit();
        if (this.tcntrl.SelectedTab == this.tpCounters && this.tcntrlCounters.SelectedTab == this.tpNumCounters)
          this.LoadCounters();
      }
      else
      {
        if (this.tcntrl.SelectedTab == this.tpArenda)
          this.LoadBill();
        if (this.tcntrl.SelectedTab == this.tpSaldo)
        {
          if (this.tcntrlBalance.SelectedIndex == 0)
            this.LoadBalance();
          if (this.tcntrlBalance.SelectedIndex == 1)
            this.LoadPeni();
          if (this.tcntrlBalance.SelectedTab == this.tpSocSaldo)
          {
            this.LoadCmbPersonSocSaldo();
            this.LoadSocSaldo();
          }
        }
        if (this.tcntrl.SelectedTab == this.tpLodgers)
          this.LoadPersons();
        if (this.tcntrl.SelectedTab == this.tpQuality)
          this.LoadQuality();
        if (this.tcntrl.SelectedTab == this.tpAbsence)
          this.LoadAbsence();
        if (this.tcntrl.SelectedTab == this.tpCounters)
        {
          if (this.tcntrlCounters.SelectedIndex == 1)
            this.LoadCounters();
          if (this.tcntrlCounters.SelectedIndex == 0)
            this.LoadEvidence();
          if (this.tcntrlCounters.SelectedTab == this.tpAudit)
            this.LoadAudit();
          if (this.tcntrlCounters.SelectedTab == this.tpDetailEvidence && (this.mpCurrentPeriod.OldMonth != 1 && this.mpCurrentPeriod.Value.Month != 12 || this.mpCurrentPeriod.Value.Month != 1 && this.mpCurrentPeriod.OldMonth != 12 || this.mpCurrentPeriod.OldMonth == this.mpCurrentPeriod.Value.Month))
            this.LoadDetailEvidence();
        }
        if (this.tcntrl.SelectedTab == this.tpService && this.tcntrlService.SelectedTab == this.tpServiceParam)
          this.LoadServiceParam();
        if (this.tcntrl.SelectedTab == this.tpPayWork)
          this.LoadWorkDistribute();
      }
      if (this.tcntrl.SelectedTab == this.tpService)
      {
        if (this.PastTimeLsService)
          this.LoadService();
        this.dgvLsService.Refresh();
        if (this.ucLsSupplier1.PastTime)
        {
          this.ucLsSupplier1.CurrentPeriod = this.CurrentPeriod;
          this.ucLsSupplier1.RefreshGrid();
          if (this.dgvLsService.CurrentRow != null)
          {
            this.ucLsSupplier1.LsService = (LsService) this.dgvLsService.CurrentRow.DataBoundItem;
            this.ucLsSupplier1.LoadLsSupplier();
          }
          else
            this.ucLsSupplier1.Clear();
        }
      }
      if (this.tcntrl.SelectedTab == this.tpOptions)
        this.dgvParams.Refresh();
      if (this.tcntrl.SelectedTab == this.tpMSP && this.tcntrlMsp.SelectedIndex == 0)
        this.dgvMsp.Refresh();
      if (this.tcntrl.SelectedTab == this.tpMSP && this.tcntrlMsp.SelectedIndex == 1)
        this.dgvFrFamily.Refresh();
      if (this.tcntrl.SelectedTab != this.tpRentMSP)
        return;
      this.LoadParamForeign();
    }

    private void butDelRecord_Click(object sender, EventArgs e)
    {
      this.btnAddRecord.Enabled = true;
      this.btnSave.Enabled = false;
      this.btnDelRecord.Enabled = true;
      if (this.tcntrl.SelectedTab == this.tpTitul)
        this.DeleteSupplierClient();
      if (this.tcntrl.SelectedTab == this.tpArenda)
      {
        this.DeleteBill();
        this.DeleteSupplierClientForArenda();
      }
      if (this.tpOptions.Visible)
      {
        if (Kvartplata.Classes.KvrplHelper.CheckProxy(39, 2, this.Client.Company, false))
        {
          this.DelParam(false);
        }
        else
        {
          if (!Kvartplata.Classes.KvrplHelper.CheckProxy(39, 1, this.Client.Company, true) || !Kvartplata.Classes.KvrplHelper.CheckProxy(86, 2, this.Client.Company, true))
            return;
          this.DelParam(true);
        }
        this.LoadParam();
      }
      if (this.tcntrl.SelectedTab == this.tpSaldo && (this.PastTime && this.tcntrlBalance.SelectedIndex == 0))
      {
        if (!Kvartplata.Classes.KvrplHelper.CheckProxy(45, 2, this.Client.Company, true))
          return;
        this.DelHandMade();
        this.LoadHandMade();
      }
      if (this.tcntrl.SelectedTab == this.tpLodgers)
      {
        if (!Kvartplata.Classes.KvrplHelper.CheckProxy(47, 2, this.Client.Company, true))
          return;
        this.DelPerson();
      }
      if (this.tcntrl.SelectedTab == this.tpOwners)
      {
        if (!Kvartplata.Classes.KvrplHelper.CheckProxy(47, 2, this.Client.Company, true))
          return;
        this.DelOwnerDoc();
        this.LoadOwnerDoc();
      }
      if (this.tcntrl.SelectedTab == this.tpQuality)
      {
        if (!Kvartplata.Classes.KvrplHelper.CheckProxy(43, 2, this.Client.Company, true))
          return;
        this.DelQuality();
      }
      if (this.tcntrl.SelectedTab == this.tpAbsence)
      {
        if (!Kvartplata.Classes.KvrplHelper.CheckProxy(44, 2, this.Client.Company, true))
          return;
        this.DelAbsence();
      }
      if (this.tcntrl.SelectedTab == this.tpMSP && this.tcntrlMsp.SelectedIndex == 0)
      {
        if (!Kvartplata.Classes.KvrplHelper.CheckProxy(46, 2, this.Client.Company, true))
          return;
        if (this.DelMsp())
          this.LoadMsp();
      }
      if (this.tcntrl.SelectedTab == this.tpCounters)
      {
        if (!Kvartplata.Classes.KvrplHelper.CheckProxy(42, 2, this.Client.Company, true))
          return;
        if (this.tcntrlCounters.SelectedIndex == 1)
        {
          this.DelMainCounter();
          this.LoadMainCounters();
        }
        if (this.tcntrlCounters.SelectedIndex == 0)
        {
          this.DelEvidence();
          this.LoadEvidence();
        }
        if (this.tcntrlCounters.SelectedTab == this.tpAudit)
        {
          this.DelAudit();
          this.LoadAudit();
        }
        if (this.tcntrlCounters.SelectedTab == this.tpSeal)
        {
          this.DelSeal();
          this.LoadSeal();
        }
      }
      if (this.tcntrl.SelectedTab == this.tpService && this.tcntrlService.SelectedTab == this.tpServiceParam)
      {
        if (!Kvartplata.Classes.KvrplHelper.CheckProxy(40, 2, this.Client.Company, true))
          return;
        this.DelServiceParam();
        this.LoadServiceParam();
      }
      if (this.tcntrl.SelectedTab == this.tpMessage)
      {
        this.DelMessage();
        this.LoadMessage();
      }
      if (this.tcntrl.SelectedTab == this.tpUZP)
      {
        this.DelBond();
        this.LoadBond();
      }
      if (this.tcntrl.SelectedTab != this.tpPayWork)
        return;
      this.DeleteWorkDistribute();
    }

    private void toolStripButton1_Click(object sender, EventArgs e)
    {
      if (!this.PastTime)
      {
        if ((this.tcntrl.SelectedTab != this.tpService || this.tcntrlService.SelectedTab != this.tpLSService) && this.tcntrl.SelectedTab != this.tpSaldo)
        {
          this.tsbMultiPastTime.BackColor = Color.DarkOrange;
          this.PastTime = true;
          this.tmr.Start();
        }
        if (this.tcntrl.SelectedTab == this.tpOptions)
          this.LoadParam();
        if (this.tcntrl.SelectedTab == this.tpQuality)
          this.LoadQuality();
        if (this.tcntrl.SelectedTab == this.tpMSP && this.tcntrlMsp.SelectedIndex == 1)
          this.LoadFrFamily();
        if (this.tcntrl.SelectedTab == this.tpMSP && this.tcntrlMsp.SelectedIndex == 0)
          this.LoadMsp();
        if (this.tcntrl.SelectedTab == this.tpService && this.tcntrlService.SelectedTab == this.tpServiceParam)
          this.LoadServiceParam();
      }
      else
      {
        if (this.tcntrl.SelectedTab != this.tpService || this.tcntrlService.SelectedTab != this.tpLSService)
        {
          this.tsbMultiPastTime.BackColor = this.ts.BackColor;
          this.lblPastTime.ForeColor = this.pnUp.BackColor;
          this.PastTime = false;
          this.tmr.Stop();
        }
        if (this.tcntrl.SelectedTab == this.tpOptions)
          this.LoadParam();
        if (this.tcntrl.SelectedTab == this.tpSaldo && this.tcntrlBalance.SelectedIndex == 0)
          this.LoadBalance();
        if (this.tcntrl.SelectedTab == this.tpQuality)
          this.LoadQuality();
        if (this.tcntrl.SelectedTab == this.tpMSP && this.tcntrlMsp.SelectedIndex == 1)
          this.LoadFrFamily();
        if (this.tcntrl.SelectedTab == this.tpMSP && this.tcntrlMsp.SelectedIndex == 0)
          this.LoadMsp();
        if (this.tcntrl.SelectedTab == this.tpService && this.tcntrlService.SelectedTab == this.tpServiceParam)
          this.LoadServiceParam();
      }
      if (this.tcntrl.SelectedTab == this.tpCounters && this.tcntrlCounters.SelectedIndex == 1)
        this.LoadMainCounters();
      if (this.tcntrl.SelectedTab == this.tpCounters && this.tcntrlCounters.SelectedTab == this.tpAudit)
        this.LoadAudit();
      this.tsmiInPastTime.Visible = !this.PastTime;
    }

    private void tsbPayment_Click(object sender, EventArgs e)
    {
      if (this.Client.Home.IdHome == 1)
      {
        FrmPaymentOhl frmPaymentOhl = new FrmPaymentOhl(this.Client);
        int num = (int) frmPaymentOhl.ShowDialog();
        frmPaymentOhl.Dispose();
      }
      else
      {
        FrmPayment frmPayment = new FrmPayment(this.session.Get<Kvartplata.Classes.Raion>((object) Kvartplata.Classes.Options.Raion), this.Client.Company, this.Client.Home, this.Client, 4);
        int num = (int) frmPayment.ShowDialog();
        frmPayment.Dispose();
      }
    }

    private void tsbCounters_Click(object sender, EventArgs e)
    {
      new FrmCounters((short) 3, this.Client.Company, this.session.Get<Kvartplata.Classes.Home>((object) this.Client.Home.IdHome)).Show();
    }

    private void tsmiPersonalSearch_Click(object sender, EventArgs e)
    {
      FrmSearch frmSearch = new FrmSearch(1, this.Client.Company, this.Client.Home);
      int num = (int) frmSearch.ShowDialog();
      if (frmSearch.lsClient != null)
      {
        this.Client = frmSearch.lsClient;
        this.ClientId = frmSearch.lsClient.ClientId;
        this.LoadTitul((short) 1);
        this.ShowHideArenda();
        this.tabControl1_SelectedIndexChanged(sender, e);
      }
      frmSearch.Dispose();
    }

    private void tsmiFlatSearch_Click(object sender, EventArgs e)
    {
      FrmSearch frmSearch = new FrmSearch(2, this.Client.Company, this.Client.Home);
      int num = (int) frmSearch.ShowDialog();
      if (frmSearch.lsClient != null)
      {
        this.Client = frmSearch.lsClient;
        this.ClientId = frmSearch.lsClient.ClientId;
        this.tabControl1_SelectedIndexChanged(sender, e);
        this.LoadTitul((short) 0);
        this.ShowHideArenda();
      }
      frmSearch.Dispose();
    }

    private void tsmiContractSearch_Click(object sender, EventArgs e)
    {
      FrmSearchDog frmSearchDog = new FrmSearchDog();
      int num = (int) frmSearchDog.ShowDialog();
      if (frmSearchDog.Client != null)
      {
        this.Client = frmSearchDog.Client;
        this.ClientId = frmSearchDog.Client.ClientId;
        this.tabControl1_SelectedIndexChanged(sender, e);
        this.LoadTitul((short) 1);
        this.ShowHideArenda();
      }
      frmSearchDog.Dispose();
    }

    private void tabControl1_SelectedIndexChanged(object sender, EventArgs e)
    {
      this.lblEdit.Visible = false;
      this.cbShowAnotherOrg.Enabled = false;
      this.btnEdit.BackColor = this.pnEvidence.BackColor;
      this.tmrEvidence.Stop();
      this.editEvidence = false;
      this.tsbMultiPastTime.DropDown = (ToolStripDropDown) null;
      this.tsbMultiPastTime.Enabled = true;
      this.tsmiInPastTime.Visible = !this.PastTime;
      this.tpWorkDistribute.Parent = (Control) null;
      this.tpWorkDistribute.Visible = false;
      this.chbArhiv.Visible = false;
      this.lblPastTimeLsService.Visible = false;
      if (this.tcntrl.SelectedTab == this.tpTitul)
      {
        this.btnAddRecord.Enabled = false;
        this.btnSave.Enabled = false;
        this.btnDelRecord.Enabled = false;
        this.LoadTitul((short) 1);
      }
      if (this.tcntrl.SelectedTab == this.tpArenda)
        this.LoadArenda();
      if (this.tpOptions.Visible)
      {
        this.CreateComboBoxField = true;
        this.LoadParam();
        this.chbArhiv.Visible = true;
        this.dgvParams.Focus();
      }
      if (this.tpService.Visible)
      {
        if (this.tcntrlService.SelectedTab == this.tpLSService)
        {
          this.btnAddRecord.Enabled = false;
          this.btnSave.Enabled = false;
          this.btnDelRecord.Enabled = false;
          this.chbArhiv.Visible = true;
          this.lblPastTimeLsService.Visible = true;
          this.ucLsSupplier1.Clear();
          this.LoadService();
          this.dgvLsService.Focus();
          this.tsmiInPastTime.Visible = !this.PastTimeLsService;
        }
        if (this.tcntrlService.SelectedTab == this.tpServiceParam)
        {
          this.BeforeLoadServiceParam();
          this.LoadServiceParam();
        }
      }
      if (this.tcntrl.SelectedTab == this.tpSaldo)
      {
        if (this.tcntrlBalance.SelectedIndex == 0)
        {
          this.LoadCBReceiptType();
          this.LoadBalance();
        }
        if (this.tcntrlBalance.SelectedIndex == 1)
        {
          this.LoadCBPeniReceiptType();
          this.LoadPeni();
        }
        if (this.tcntrlBalance.SelectedTab == this.tpSocSaldo)
        {
          this.LoadCmbPersonSocSaldo();
          this.LoadCbMSPReceiptType();
          this.LoadSocSaldo();
        }
      }
      if (this.tcntrl.SelectedTab == this.tpLodgers)
        this.LoadPersons();
      if (this.tcntrl.SelectedTab == this.tpOwners)
        this.LoadOwners();
      if (this.tcntrl.SelectedTab == this.tpQuality)
        this.LoadQuality();
      if (this.tcntrl.SelectedTab == this.tpAbsence)
        this.LoadAbsence();
      if (this.tcntrl.SelectedTab == this.tpCounters)
      {
        this.cbShowAnotherOrg.Enabled = true;
        if (this.tcntrlCounters.SelectedIndex == 1)
          this.LoadCounters();
        if (this.tcntrlCounters.SelectedIndex == 0)
        {
          this.PrepareEvidence();
          this.LoadEvidence();
        }
        if (this.tcntrlCounters.SelectedTab == this.tpAudit)
          this.LoadAudit();
        if (this.tcntrlCounters.SelectedTab == this.tpSeal)
          this.LoadSeal();
        if (this.tcntrlCounters.SelectedTab == this.tpDetailEvidence)
          this.LoadDetailEvidence();
      }
      if (this.tcntrl.SelectedTab == this.tpMSP)
      {
        if (this.tcntrlMsp.SelectedIndex == 0)
        {
          this.chbArhiv.Visible = true;
          this.LoadMsp();
          this.dgvMsp.Focus();
        }
        if (this.tcntrlMsp.SelectedIndex == 1)
          this.LoadLsFamily();
        if (this.tcntrlMsp.SelectedIndex == 2)
          this.LoadMspDocument();
        if (this.tcntrlMsp.SelectedIndex == 3)
          this.LoadPensDoc();
      }
      if (this.tcntrl.SelectedTab == this.tpMessage)
        this.LoadMessage();
      if (this.tcntrl.SelectedTab == this.tpUZP)
        this.LoadUZP();
      if (this.tcntrl.SelectedTab == this.tpRentMSP)
        this.LoadParamForeign();
      if (this.tcntrl.SelectedTab != this.tpPayWork)
        return;
      this.chbArhiv.Visible = true;
      this.PrepareWorkDistribute();
      this.LoadWorkDistribute();
    }

    private void tsmiLsService_Click(object sender, EventArgs e)
    {
      this.ucLsSupplier1.Clear();
      if (!this.PastTimeLsService)
      {
        this.PastTimeLsService = true;
        if (!this.PastTimeLsSupplier)
        {
          this.tsbMultiPastTime.BackColor = Color.DarkOrange;
          this.PastTime = true;
          this.tmr.Start();
        }
      }
      else
      {
        this.PastTimeLsService = false;
        if (!this.PastTimeLsSupplier)
        {
          this.tsbMultiPastTime.BackColor = this.ts.BackColor;
          this.lblPastTime.ForeColor = this.pnUp.BackColor;
          this.PastTime = false;
          this.tmr.Stop();
        }
      }
      this.LoadService();
    }

    private void tsmiLsSupplier_Click(object sender, EventArgs e)
    {
      if (!this.PastTimeLsSupplier)
      {
        this.PastTimeLsSupplier = true;
        if (!this.PastTimeLsService)
        {
          this.tsbMultiPastTime.BackColor = Color.DarkOrange;
          this.PastTime = true;
          this.tmr.Start();
        }
      }
      else
      {
        this.PastTimeLsSupplier = false;
        if (!this.PastTimeLsService)
        {
          this.tsbMultiPastTime.BackColor = this.ts.BackColor;
          this.lblPastTime.ForeColor = this.pnUp.BackColor;
          this.PastTime = false;
          this.tmr.Stop();
        }
      }
      this.ucLsSupplier1.PastTime = this.PastTimeLsSupplier;
      this.ucLsSupplier1.CurrentPeriod = this.CurrentPeriod;
      this.ucLsSupplier1.RefreshGrid();
      if (this.dgvLsService.CurrentRow != null)
      {
        this.ucLsSupplier1.LsService = (LsService) this.dgvLsService.CurrentRow.DataBoundItem;
        this.ucLsSupplier1.LoadLsSupplier();
      }
      else
        this.ucLsSupplier1.Clear();
    }

    private void tsmiCreateClientsNum_Click(object sender, EventArgs e)
    {
      if (!Kvartplata.Classes.Options.Kvartplata)
        this.CreateLsClient(Kvartplata.Classes.Options.ComplexArenda);
      if (!Kvartplata.Classes.Options.Arenda)
        this.CreateLsClient(Kvartplata.Classes.Options.Complex);
      this.ShowHideArenda();
    }

    private void tsmiLsKvartplata_Click(object sender, EventArgs e)
    {
      this.CreateLsClient(this.session.Get<Kvartplata.Classes.Complex>((object) Convert.ToInt32(((ToolStripItem) sender).Tag)));
      this.ShowHideArenda();
    }

    private void tsmiDeleteClient_Click(object sender, EventArgs e)
    {
      if (MessageBox.Show("Вы действительно хотите удалить лицевой?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) != DialogResult.OK)
        return;
      this.session.Clear();
      bool flag = false;
      if ((uint) this.session.CreateQuery(string.Format("select b.LsClient.ClientId from Balance b where b.Period.PeriodId<={0} and b.LsClient.ClientId={1} ", (object) this.MonthClosed.PeriodId, (object) this.Client.ClientId)).List().Count > 0U)
        flag = true;
      ISession session1 = this.session;
      string format1 = "select p.ClientId from ClientParam p where ((p.DBeg<='{1}' and p.Period.PeriodId=0) or (p.Period.PeriodId<={2} and p.Period.PeriodId<>0)) and p.ClientId={0}";
      // ISSUE: variable of a boxed type
      int clientId1 = this.Client.ClientId;
      DateTime? periodName = this.MonthClosed.PeriodName;
      string baseFormat1 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(periodName.Value);
      // ISSUE: variable of a boxed type
      int periodId1 = this.MonthClosed.PeriodId;
      string queryString1 = string.Format(format1, (object) clientId1, (object) baseFormat1, (object) periodId1);
      if ((uint) session1.CreateQuery(queryString1).List().Count > 0U)
        flag = true;
      ISession session2 = this.session;
      string format2 = "from LsService where ((DBeg<='{1}' and Period.PeriodId=0) or (Period.PeriodId<={2} and Period.PeriodId<>0)) and Client.ClientId={0}";
      // ISSUE: variable of a boxed type
      int clientId2 = this.Client.ClientId;
      periodName = this.MonthClosed.PeriodName;
      string baseFormat2 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(periodName.Value);
      // ISSUE: variable of a boxed type
      int periodId2 = this.MonthClosed.PeriodId;
      string queryString2 = string.Format(format2, (object) clientId2, (object) baseFormat2, (object) periodId2);
      if ((uint) session2.CreateQuery(queryString2).List().Count > 0U)
        flag = true;
      ISession session3 = this.session;
      string format3 = "from Person where FirstPropDate<='{1}' and LsClient.ClientId={0}";
      // ISSUE: variable of a boxed type
      int clientId3 = this.Client.ClientId;
      periodName = this.MonthClosed.PeriodName;
      string baseFormat3 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(periodName.Value);
      // ISSUE: variable of a boxed type
      int periodId3 = this.MonthClosed.PeriodId;
      string queryString3 = string.Format(format3, (object) clientId3, (object) baseFormat3, (object) periodId3);
      if ((uint) session3.CreateQuery(queryString3).List().Count > 0U)
        flag = true;
      ISession session4 = this.session;
      string format4 = "from Owner where FirstPropDate<='{1}' and LsClient.ClientId={0}";
      // ISSUE: variable of a boxed type
      int clientId4 = this.Client.ClientId;
      periodName = this.MonthClosed.PeriodName;
      string baseFormat4 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(periodName.Value);
      // ISSUE: variable of a boxed type
      int periodId4 = this.MonthClosed.PeriodId;
      string queryString4 = string.Format(format4, (object) clientId4, (object) baseFormat4, (object) periodId4);
      if ((uint) session4.CreateQuery(queryString4).List().Count > 0U)
        flag = true;
      if (flag)
      {
        int num1 = (int) MessageBox.Show("Удаление невозможно. На лицевом есть записи, принадлежащие закрытому периоду. Закройте лицевой.", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
      }
      else
      {
        try
        {
          this.session.CreateQuery(string.Format("delete from ClientParam where ClientId={0}", (object) this.Client.ClientId)).ExecuteUpdate();
          this.session.CreateQuery(string.Format("delete from Balance where LsClient.ClientId={0}", (object) this.Client.ClientId)).ExecuteUpdate();
          this.session.CreateQuery(string.Format("delete from Rent where LsClient.ClientId={0}", (object) this.Client.ClientId)).ExecuteUpdate();
          this.session.CreateQuery(string.Format("delete from RentMSP where LsClient.ClientId={0}", (object) this.Client.ClientId)).ExecuteUpdate();
          this.session.CreateQuery(string.Format("delete from Payment where LsClient.ClientId={0}", (object) this.Client.ClientId)).ExecuteUpdate();
          this.session.CreateQuery(string.Format("delete from Overpay where LsClient.ClientId={0}", (object) this.Client.ClientId)).ExecuteUpdate();
          this.session.CreateQuery(string.Format("delete from LsSupplier where LsClient.ClientId={0}", (object) this.Client.ClientId)).ExecuteUpdate();
          this.session.CreateQuery(string.Format("delete from LsService where Client.ClientId={0}", (object) this.Client.ClientId)).ExecuteUpdate();
          this.session.CreateQuery(string.Format("delete from LsServiceParam where LsClient.ClientId={0}", (object) this.Client.ClientId)).ExecuteUpdate();
          this.session.CreateQuery(string.Format("delete from LsMSPGku where LsClient.ClientId={0}", (object) this.Client.ClientId)).ExecuteUpdate();
          this.session.CreateQuery(string.Format("delete from LsAbsence where LsClient.ClientId={0}", (object) this.Client.ClientId)).ExecuteUpdate();
          this.session.CreateQuery(string.Format("delete from LsQuality where LsClient.ClientId={0}", (object) this.Client.ClientId)).ExecuteUpdate();
          this.session.CreateQuery(string.Format("delete from Person where LsClient.ClientId={0}", (object) this.Client.ClientId)).ExecuteUpdate();
          this.session.CreateQuery(string.Format("delete from Owner where LsClient.ClientId={0}", (object) this.Client.ClientId)).ExecuteUpdate();
          this.session.CreateQuery(string.Format("delete from CounterRelation where LsClient.ClientId={0}", (object) this.Client.ClientId)).ExecuteUpdate();
          this.session.CreateQuery(string.Format("delete from Evidence where Counter.CounterId in (select CounterId from Counter where LsClient.ClientId={0} and BaseCounter.Id=2)", (object) this.Client.ClientId)).ExecuteUpdate();
          this.session.CreateQuery(string.Format("delete from Counter where LsClient.ClientId={0} and BaseCounter.Id=2", (object) this.Client.ClientId)).ExecuteUpdate();
          try
          {
            this.session.CreateSQLQuery(string.Format("delete from DBA.tenant where idlic={0}", (object) this.Client.ClientId)).ExecuteUpdate();
          }
          catch
          {
          }
          this.session.CreateQuery(string.Format("delete from LsArenda where LsClient.ClientId={0}", (object) this.Client.ClientId)).ExecuteUpdate();
          this.session.CreateQuery(string.Format("delete from LsClient where ClientId={0}", (object) this.Client.ClientId)).ExecuteUpdate();
          this.reloadList = true;
          this.Client.Complex = Kvartplata.Classes.Options.Complex;
          this.session.Clear();
          this.Close();
          int num2 = (int) MessageBox.Show("Удаление прошло успешно", "", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
        catch (Exception ex)
        {
          int num2 = (int) MessageBox.Show("Удаление прошло с ошибками", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
        }
      }
    }

    private void chbArhiv_CheckedChanged(object sender, EventArgs e)
    {
      this.Arhiv = this.chbArhiv.Checked;
      if (this.tcntrl.SelectedTab == this.tpOptions)
        this.LoadParam();
      if (this.tcntrl.SelectedTab == this.tpService && this.tcntrlService.SelectedTab == this.tpLSService)
        this.LoadService();
      if (this.tcntrl.SelectedTab == this.tpAbsence)
        this.LoadAbsence();
      if (this.tcntrl.SelectedTab == this.tpQuality)
        this.LoadQuality();
      if (this.tcntrl.SelectedTab == this.tpMSP && this.tcntrlMsp.SelectedIndex == 0)
        this.LoadMsp();
      if (this.tcntrl.SelectedTab == this.tpService && this.tcntrlService.SelectedTab == this.tpServiceParam)
        this.LoadServiceParam();
      if (this.tcntrl.SelectedTab == this.tpCounters && this.tcntrlCounters.SelectedTab == this.tpEvidence)
        this.LoadEvidence();
      if (this.tcntrl.SelectedTab == this.tpCounters && this.tcntrlCounters.SelectedTab == this.tpNumCounters)
        this.LoadCounters();
      if (this.tcntrl.SelectedTab == this.tpCounters && this.tcntrlCounters.SelectedTab == this.tpAudit)
        this.LoadAudit();
      if (this.tcntrl.SelectedTab == this.tpCounters && this.tcntrlCounters.SelectedTab == this.tpDetailEvidence)
        this.LoadDetailEvidence();
      if (this.tcntrl.SelectedTab == this.tpMessage)
        this.LoadMessage();
      if (this.tcntrl.SelectedTab == this.tpPayWork)
        this.LoadWorkDistribute();
      if (this.tcntrl.SelectedTab != this.tpOwners)
        return;
      this.LoadOwners();
    }

    private void tsmiCopyRecordInPastTime_Click(object sender, EventArgs e)
    {
      if (this.tcntrl.SelectedTab != this.tpMSP || this.tcntrlMsp.SelectedIndex != 0 || this.dgvMsp.CurrentRow == null)
        return;
      DateTime dateTime1 = this.mpCurrentPeriod.Value;
      DateTime? periodName = this.MonthClosed.PeriodName;
      DateTime dateTime2 = periodName.Value;
      if (dateTime1 <= dateTime2)
      {
        int num1 = (int) MessageBox.Show("Невозможно скопировать запись в закрытом месяце!", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
      }
      else
      {
        LsMSPGku dataBoundItem = (LsMSPGku) this.dgvMsp.CurrentRow.DataBoundItem;
        dataBoundItem.Period = Kvartplata.Classes.KvrplHelper.GetPeriod(this.mpCurrentPeriod.Value);
        LsMSPGku lsMspGku1 = dataBoundItem;
        periodName = this.MonthClosed.PeriodName;
        DateTime dateTime3 = periodName.Value;
        lsMspGku1.DBeg = dateTime3;
        LsMSPGku lsMspGku2 = dataBoundItem;
        periodName = this.MonthClosed.PeriodName;
        DateTime dateTime4 = Kvartplata.Classes.KvrplHelper.LastDay(periodName.Value);
        lsMspGku2.DEnd = dateTime4;
        try
        {
          this.session.Save((object) dataBoundItem);
          this.session.Flush();
          int num2 = (int) MessageBox.Show(string.Format("Запись успешно скопирована в прошлое время {0}", (object) this.mpCurrentPeriod.Value.ToShortDateString()), "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
        catch (Exception ex)
        {
          int num2 = (int) MessageBox.Show("Невозможно скопировать запись", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
        }
        this.session.Clear();
      }
    }

    private void tsmiClose_Click(object sender, EventArgs e)
    {
      this.mcArchive.MinDate = this.MonthClosed.PeriodName.Value.AddMonths(1);
      this.mcArchive.Parent = (Control) Form.ActiveForm;
      this.mcArchive.BringToFront();
      this.mcArchive.Visible = true;
      this.mcArchive.Focus();
      this.mcArchive.Show();
    }

    private void CloseCard()
    {
      if (MessageBox.Show("Закрыть карточку c " + this.dateArchive.ToShortDateString() + "?", "", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) != DialogResult.OK)
        return;
      ITransaction transaction = this.session.BeginTransaction();
      this.session.Clear();
      try
      {
        this.session.CreateQuery("update ClientParam set DEnd=:dend,Dedit=today(),Uname=:uname where ClientId=:client and Period.PeriodId=0 and DEnd>:dend").SetParameter<string>("dend", Kvartplata.Classes.KvrplHelper.DateToBaseFormat(this.dateArchive.AddDays(-1.0))).SetParameter<string>("uname", Kvartplata.Classes.Options.Login).SetParameter<int>("client", this.Client.ClientId).ExecuteUpdate();
        this.session.Save((object) new ClientParam()
        {
          ClientId = this.Client.ClientId,
          DBeg = this.dateArchive,
          DEnd = Convert.ToDateTime("2999-12-31"),
          Period = this.session.Get<Kvartplata.Classes.Period>((object) 0),
          Param = this.session.Get<Param>((object) Convert.ToInt16(107)),
          ParamValue = 4.0,
          Dedit = DateTime.Now,
          Uname = Kvartplata.Classes.Options.Login
        });
        this.session.Flush();
        this.session.CreateQuery("update LsService set DEnd=:dend,Dedit=today(),Uname=:uname where Client.ClientId=:client and Period.PeriodId=0 and Complex.IdFk=:compl and DEnd>:dend").SetParameter<string>("dend", Kvartplata.Classes.KvrplHelper.DateToBaseFormat(this.dateArchive.AddDays(-1.0))).SetParameter<string>("uname", Kvartplata.Classes.Options.Login).SetParameter<int>("client", this.Client.ClientId).SetParameter<int>("compl", Kvartplata.Classes.Options.Complex.IdFk).ExecuteUpdate();
        this.session.CreateQuery("update LsSupplier set DEnd=:dend,Dedit=today(),Uname=:uname where LsClient.ClientId=:client and Period.PeriodId=0 and DEnd>:dend ").SetParameter<string>("dend", Kvartplata.Classes.KvrplHelper.DateToBaseFormat(this.dateArchive.AddDays(-1.0))).SetParameter<string>("uname", Kvartplata.Classes.Options.Login).SetParameter<int>("client", this.Client.ClientId).ExecuteUpdate();
        this.session.CreateQuery("update LsMSPGku set DEnd=:dend,Dedit=today(),Uname=:uname where LsClient.ClientId=:client and Period.PeriodId=0 and DEnd>:dend").SetParameter<string>("dend", Kvartplata.Classes.KvrplHelper.DateToBaseFormat(this.dateArchive.AddDays(-1.0))).SetParameter<string>("uname", Kvartplata.Classes.Options.Login).SetParameter<int>("client", this.Client.ClientId).ExecuteUpdate();
        this.session.CreateQuery(string.Format("update Counter set ArchivesDate='{0}' where LsClient.ClientId=:client and Complex.IdFk=:compl and isnull(ArchivesDate,'2999-12-31')>'{0}'", (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(this.dateArchive))).SetParameter<int>("compl", Kvartplata.Classes.Options.Complex.IdFk).SetParameter<int>("client", this.Client.ClientId).ExecuteUpdate();
        transaction.Commit();
        int num = (int) MessageBox.Show("Карточка закрыта");
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show("Не удалось закрыть карточку. Изменения не сохранены", "Ошибка", MessageBoxButtons.OK);
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
        transaction.Rollback();
      }
    }

    private void tmr_Tick(object sender, EventArgs e)
    {
      if (this.PastTime)
      {
        if (this.tcntrl.SelectedTab != this.tpService || this.tcntrlService.SelectedTab != this.tpLSService)
        {
          if (this.lblPastTime.ForeColor == Color.DarkOrange)
            this.lblPastTime.ForeColor = this.pnUp.BackColor;
          else
            this.lblPastTime.ForeColor = Color.DarkOrange;
        }
        else
          this.lblPastTime.ForeColor = this.pnUp.BackColor;
      }
      else
        this.lblPastTime.ForeColor = this.pnUp.BackColor;
    }

    private void tsmiDeleteRecord_Click(object sender, EventArgs e)
    {
      this.tsmiCopyRecord_Click(sender, e);
    }

    private void tmrEvidence_Tick(object sender, EventArgs e)
    {
      if (this.editEvidence)
      {
        if (this.lblEdit.ForeColor == Color.DarkOrange)
          this.lblEdit.ForeColor = this.pnUp.BackColor;
        else
          this.lblEdit.ForeColor = Color.DarkOrange;
      }
      else
        this.lblEdit.ForeColor = this.pnUp.BackColor;
    }

    private void tsbStack_Click(object sender, EventArgs e)
    {
      try
      {
        CallDll.View(this.Client.ClientId, Kvartplata.Classes.Options.Period.PeriodName.Value.ToOADate());
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show("Невозможно осуществить доступ к внешним данным", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, (Kvartplata.Classes.LsClient) null);
      }
    }

    private void cbShowAnotherOrg_CheckedChanged(object sender, EventArgs e)
    {
      Kvartplata.Classes.Options.ShowAnotherOrg = this.cbShowAnotherOrg.Checked;
      if (this.tcntrl.SelectedTab == this.tpCounters && this.tcntrlCounters.SelectedTab == this.tpEvidence)
        this.LoadEvidence();
      else
        this.tabControl1_SelectedIndexChanged((object) null, (EventArgs) null);
    }

    private void btnAgreement_Click(object sender, EventArgs e)
    {
      FrmAgreement frmAgreement = new FrmAgreement(this.Client);
      int num = (int) frmAgreement.ShowDialog();
      frmAgreement.Dispose();
    }

    private void tmrArError_Tick(object sender, EventArgs e)
    {
      if (this.lblArError.ForeColor == Color.DarkOrange)
        this.lblArError.ForeColor = this.pnUp.BackColor;
      else
        this.lblArError.ForeColor = Color.DarkOrange;
    }

    private void tsmiDetailAllRent_Click(object sender, EventArgs e)
    {
      Kvartplata.Classes.Service service = new Kvartplata.Classes.Service();
      if (this.dgvBalance.Rows.Count > 1)
        service = this.session.Get<Kvartplata.Classes.Service>((object) Convert.ToInt16(this.dgvBalance.CurrentRow.Cells[0].Value));
      new FrmDetailAllRent(this.Client, service).Show();
    }

    private void cbReceiptType_SelectedIndexChanged(object sender, EventArgs e)
    {
      if ((Receipt) this.cbReceiptType.SelectedItem != null && (int) ((Receipt) this.cbReceiptType.SelectedItem).ReceiptId != (int) this.Receipt_id)
        this.Receipt_id = ((Receipt) this.cbReceiptType.SelectedItem).ReceiptId;
      this.LoadBalance();
    }

    private void cbPeniReceiptType_SelectedIndexChanged(object sender, EventArgs e)
    {
      if ((Receipt) this.cbPeniReceiptType.SelectedItem != null && (int) ((Receipt) this.cbPeniReceiptType.SelectedItem).ReceiptId != this.ReceiptPeni_id)
        this.ReceiptPeni_id = (int) ((Receipt) this.cbPeniReceiptType.SelectedItem).ReceiptId;
      this.LoadPeni();
    }

    private void tsmiInPastTime_Click(object sender, EventArgs e)
    {
      if (Kvartplata.Classes.Options.Period.PeriodId < this.MonthClosed.PeriodId + 1)
      {
        int num1 = (int) MessageBox.Show("Невозможно скопировать запись в закрытом периоде", "Ошибка", MessageBoxButtons.OK);
      }
      else
      {
        this.session.Clear();
        if (this.tcntrl.SelectedTab == this.tpOptions)
        {
          try
          {
            ClientParam clientParam1 = new ClientParam();
            ClientParam dataBoundItem = (ClientParam) this.dgvParams.CurrentRow.DataBoundItem;
            if ((int) dataBoundItem.Param.ParamId == 117 && !Kvartplata.Classes.KvrplHelper.CheckProxy(86, 2, this.session.Get<Kvartplata.Classes.Company>((object) Convert.ToInt16(this.CompanyId)), true))
              return;
            if ((int) dataBoundItem.Param.ParamId == 115)
            {
              if (!Kvartplata.Classes.KvrplHelper.CheckProxy(86, 2, this.session.Get<Kvartplata.Classes.Company>((object) Convert.ToInt16(this.CompanyId)), true))
                return;
            }
            else if (!Kvartplata.Classes.KvrplHelper.CheckProxy(39, 2, this.Client.Company, true))
              return;
            ClientParam clientParam2 = new ClientParam();
            clientParam2.ClientId = this.Client.ClientId;
            clientParam2.Period = Kvartplata.Classes.Options.Period;
            ClientParam clientParam3 = clientParam2;
            DateTime? periodName = this.MonthClosed.PeriodName;
            DateTime dateTime1 = periodName.Value;
            clientParam3.DBeg = dateTime1;
            ClientParam clientParam4 = clientParam2;
            periodName = this.MonthClosed.PeriodName;
            DateTime dateTime2 = periodName.Value;
            dateTime2 = dateTime2.AddMonths(1);
            DateTime dateTime3 = dateTime2.AddDays(-1.0);
            clientParam4.DEnd = dateTime3;
            clientParam2.Dedit = DateTime.Now;
            clientParam2.Param = dataBoundItem.Param;
            clientParam2.ParamValue = dataBoundItem.ParamValue;
            clientParam2.Uname = Kvartplata.Classes.Options.Login;
            this.session.Save((object) clientParam2);
            this.session.Flush();
            if (Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(32, this.Client.Company)) == 1)
            {
              if (this.city == 28)
              {
                if (MessageBox.Show("Внести основание?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
                {
                  FrmArgument frmArgument = new FrmArgument();
                  int num2 = (int) frmArgument.ShowDialog();
                  ClientParam clientParam5 = clientParam2;
                  Kvartplata.Classes.LsClient client = this.Client;
                  int num3 = 1;
                  string str = this.dgvParams.CurrentRow.Cells["PValue"].FormattedValue.ToString();
                  string note = frmArgument.Argument();
                  int num4 = 1;
                  periodName = this.MonthClosed.PeriodName;
                  DateTime monthClosed = periodName.Value;
                  Kvartplata.Classes.KvrplHelper.SaveParamToNoteBook(clientParam5, client, (short) num3, str, note, num4 != 0, monthClosed);
                  frmArgument.Dispose();
                }
              }
              else
              {
                ClientParam clientParam5 = clientParam2;
                Kvartplata.Classes.LsClient client = this.Client;
                int num2 = 1;
                string str = this.dgvParams.CurrentRow.Cells["PValue"].FormattedValue.ToString();
                string note = "";
                int num3 = 1;
                periodName = this.MonthClosed.PeriodName;
                DateTime monthClosed = periodName.Value;
                Kvartplata.Classes.KvrplHelper.SaveParamToNoteBook(clientParam5, client, (short) num2, str, note, num3 != 0, monthClosed);
              }
            }
            int num5 = (int) MessageBox.Show("Запись успешно сохранена", "", MessageBoxButtons.OK);
          }
          catch (Exception ex)
          {
            int num2 = (int) MessageBox.Show("Не удалось скопировать запись в прошлое время. Воспользуйтесь ручным вводом", "Ошибка", MessageBoxButtons.OK);
            Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
          }
        }
        else if (this.tcntrl.SelectedTab == this.tpService && this.tcntrlService.SelectedTab == this.tpLSService)
        {
          try
          {
            LsService dataBoundItem = (LsService) this.dgvLsService.CurrentRow.DataBoundItem;
            LsService service = new LsService();
            service.Client = this.Client;
            service.Complex = Kvartplata.Classes.Options.Complex;
            service.Period = Kvartplata.Classes.Options.Period;
            service.DBeg = this.MonthClosed.PeriodName.Value;
            service.DEnd = this.MonthClosed.PeriodName.Value.AddMonths(1).AddDays(-1.0);
            service.Dedit = DateTime.Now;
            service.Norm = dataBoundItem.Norm;
            service.Service = dataBoundItem.Service;
            service.Tariff = dataBoundItem.Tariff;
            service.Uname = Kvartplata.Classes.Options.Login;
            this.session.Save((object) service);
            this.session.Flush();
            if (Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(32, this.Client.Company)) == 1)
            {
              if (this.city == 28)
              {
                if (MessageBox.Show("Внести основание?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
                {
                  FrmArgument frmArgument = new FrmArgument();
                  int num2 = (int) frmArgument.ShowDialog();
                  Kvartplata.Classes.KvrplHelper.SaveServiceToNoteBook(service, (short) 1, frmArgument.Argument(), true, this.MonthClosed.PeriodName.Value);
                  frmArgument.Dispose();
                }
              }
              else
                Kvartplata.Classes.KvrplHelper.SaveServiceToNoteBook(service, (short) 1, "", true, this.MonthClosed.PeriodName.Value);
            }
            int num3 = (int) MessageBox.Show("Запись успешно сохранена", "", MessageBoxButtons.OK);
          }
          catch (Exception ex)
          {
            int num2 = (int) MessageBox.Show("Не удалось скопировать запись в прошлое время. Воспользуйтесь ручным вводом", "Ошибка", MessageBoxButtons.OK);
            Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
          }
        }
        else if (this.tcntrl.SelectedTab == this.tpService && this.tcntrlService.SelectedTab == this.tpServiceParam)
        {
          if (!Kvartplata.Classes.KvrplHelper.CheckProxy(40, 2, this.session.Get<Kvartplata.Classes.Company>((object) Convert.ToInt16(this.CompanyId)), true))
            return;
          try
          {
            LsServiceParam dataBoundItem = (LsServiceParam) this.dgvServiceParam.CurrentRow.DataBoundItem;
            LsServiceParam lsServiceParam1 = new LsServiceParam();
            lsServiceParam1.LsClient = this.Client;
            lsServiceParam1.Period = Kvartplata.Classes.Options.Period;
            lsServiceParam1.DBeg = this.MonthClosed.PeriodName.Value;
            LsServiceParam lsServiceParam2 = lsServiceParam1;
            DateTime? periodName = this.MonthClosed.PeriodName;
            DateTime dateTime1 = periodName.Value;
            dateTime1 = dateTime1.AddMonths(1);
            DateTime dateTime2 = dateTime1.AddDays(-1.0);
            lsServiceParam2.DEnd = dateTime2;
            lsServiceParam1.Param = dataBoundItem.Param;
            lsServiceParam1.Service = dataBoundItem.Service;
            lsServiceParam1.ParamValue = dataBoundItem.ParamValue;
            lsServiceParam1.UName = Kvartplata.Classes.Options.Login;
            this.session.Save((object) lsServiceParam1);
            this.session.Flush();
            if (Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(32, this.Client.Company)) == 1)
            {
              if (this.city == 28)
              {
                if (MessageBox.Show("Внести основание?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
                {
                  FrmArgument frmArgument = new FrmArgument();
                  int num2 = (int) frmArgument.ShowDialog();
                  LsServiceParam serviceparam = lsServiceParam1;
                  Kvartplata.Classes.LsClient client = this.Client;
                  int num3 = 1;
                  string str = this.dgvServiceParam.CurrentRow.Cells["PValue"].FormattedValue.ToString();
                  string notetext = frmArgument.Argument();
                  int num4 = 1;
                  periodName = this.MonthClosed.PeriodName;
                  DateTime monthClosed = periodName.Value;
                  Kvartplata.Classes.KvrplHelper.SaveServiceParamToNoteBook(serviceparam, client, (short) num3, str, notetext, num4 != 0, monthClosed);
                  frmArgument.Dispose();
                }
              }
              else
              {
                LsServiceParam serviceparam = lsServiceParam1;
                Kvartplata.Classes.LsClient client = this.Client;
                int num2 = 1;
                string str = this.dgvServiceParam.CurrentRow.Cells["PValue"].FormattedValue.ToString();
                string notetext = "";
                int num3 = 1;
                periodName = this.MonthClosed.PeriodName;
                DateTime monthClosed = periodName.Value;
                Kvartplata.Classes.KvrplHelper.SaveServiceParamToNoteBook(serviceparam, client, (short) num2, str, notetext, num3 != 0, monthClosed);
              }
            }
            int num5 = (int) MessageBox.Show("Запись успешно сохранена", "", MessageBoxButtons.OK);
          }
          catch (Exception ex)
          {
            int num2 = (int) MessageBox.Show("Не удалось скопировать запись в прошлое время. Воспользуйтесь ручным вводом", "Ошибка", MessageBoxButtons.OK);
            Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
          }
        }
        else if (this.tcntrl.SelectedTab == this.tpCounters && this.tcntrlCounters.SelectedTab == this.tpNumCounters)
        {
          try
          {
            Kvartplata.Classes.CounterRelation counterRelation1 = new Kvartplata.Classes.CounterRelation();
            Kvartplata.Classes.CounterRelation dataBoundItem = (Kvartplata.Classes.CounterRelation) this.dgvMainCounters.CurrentRow.DataBoundItem;
            Kvartplata.Classes.CounterRelation counterRelation2 = new Kvartplata.Classes.CounterRelation();
            counterRelation2.Counter = dataBoundItem.Counter;
            Kvartplata.Classes.CounterRelation counterRelation3 = counterRelation2;
            DateTime? periodName = this.MonthClosed.PeriodName;
            DateTime dateTime1 = periodName.Value;
            counterRelation3.DBeg = dateTime1;
            Kvartplata.Classes.CounterRelation counterRelation4 = counterRelation2;
            periodName = this.MonthClosed.PeriodName;
            DateTime dateTime2 = periodName.Value;
            dateTime2 = dateTime2.AddMonths(1);
            DateTime dateTime3 = dateTime2.AddDays(-1.0);
            counterRelation4.DEnd = dateTime3;
            counterRelation2.Period = Kvartplata.Classes.Options.Period;
            counterRelation2.LsClient = this.Client;
            counterRelation2.DEdit = DateTime.Now;
            counterRelation2.UName = Kvartplata.Classes.Options.Login;
            counterRelation2.OnOff = dataBoundItem.OnOff;
            this.session.Save((object) counterRelation2);
            this.session.Flush();
            if (Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(32, this.Client.Company)) == 1)
            {
              if (this.city == 28)
              {
                if (MessageBox.Show("Внести основание?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
                {
                  FrmArgument frmArgument = new FrmArgument();
                  int num2 = (int) frmArgument.ShowDialog();
                  Kvartplata.Classes.CounterRelation counterRelation5 = counterRelation2;
                                    // ISSUE: variable of the null type
                  CounterRelation local = null;
                  Kvartplata.Classes.LsClient client = this.Client;
                  int num3 = 1;
                  string notetext = frmArgument.Argument();
                  int num4 = 1;
                  periodName = this.MonthClosed.PeriodName;
                  DateTime monthClosed = periodName.Value;
                  Kvartplata.Classes.KvrplHelper.SaveMainCounterToNoteBook(counterRelation5, (Kvartplata.Classes.CounterRelation) local, client, (short) num3, notetext, num4 != 0, monthClosed);
                  frmArgument.Dispose();
                }
              }
              else
              {
                Kvartplata.Classes.CounterRelation counterRelation5 = counterRelation2;
                                // ISSUE: variable of the null type
                CounterRelation local = null;
                Kvartplata.Classes.LsClient client = this.Client;
                int num2 = 1;
                string notetext = "";
                int num3 = 1;
                periodName = this.MonthClosed.PeriodName;
                DateTime monthClosed = periodName.Value;
                Kvartplata.Classes.KvrplHelper.SaveMainCounterToNoteBook(counterRelation5, (Kvartplata.Classes.CounterRelation) local, client, (short) num2, notetext, num3 != 0, monthClosed);
              }
            }
            int num5 = (int) MessageBox.Show("Запись успешно сохранена", "", MessageBoxButtons.OK);
          }
          catch (Exception ex)
          {
            int num2 = (int) MessageBox.Show("Не удалось скопировать запись в прошлое время. Воспользуйтесь ручным вводом", "Ошибка", MessageBoxButtons.OK);
            Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
          }
        }
        else
        {
          int num6 = (int) MessageBox.Show("Опция недоступна");
        }
      }
    }

    private void LoadPersons()
    {
      this.session = Kvartplata.Domain.CurrentSession;
      this.transfer = new Transfer();
      IList list = this.session.CreateCriteria(typeof (Transfer)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Company", (object) this.Client.Company)).List();
      if ((uint) list.Count > 0U)
        this.transfer = (Transfer) list[0];
      this.dgvLodgers.Columns.Clear();
      this.dgvLodgers.DataSource = (object) null;
      this.lodgers = this.session.CreateCriteria(typeof (Person)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).Add((ICriterion) NHibernate.Criterion.Restrictions.In("Reg.RegId", (ICollection) new int[2]{ 1, 2 })).Add((ICriterion) NHibernate.Criterion.Restrictions.Or((ICriterion) NHibernate.Criterion.Restrictions.Lt("Archive", (object) 3), (ICriterion) NHibernate.Criterion.Restrictions.Eq("Archive", (object) 5))).AddOrder(Order.Asc("Archive")).AddOrder(Order.Asc("Relation.RelationId")).List<Person>();
      foreach (Person lodger in (IEnumerable<Person>) this.lodgers)
        Kvartplata.Classes.KvrplHelper.GetFamily(lodger, 1, false);
      this.dgvLodgers.DataSource = (object) this.lodgers;
      this.SetViewLodgers();
      this.btnAddRecord.Enabled = true;
      this.btnDelRecord.Enabled = true;
      this.btnSave.Enabled = false;
      short? paspCmp = this.transfer.PaspCmp;
      int? nullable = paspCmp.HasValue ? new int?((int) paspCmp.GetValueOrDefault()) : new int?();
      int companyId = (int) this.Client.Company.CompanyId;
      if (nullable.GetValueOrDefault() != companyId || !nullable.HasValue)
      {
        this.btnAddRecord.Enabled = true;
        this.btnDelRecord.Enabled = true;
        this.btnSave.Enabled = false;
      }
      else
      {
        this.btnAddRecord.Enabled = false;
        this.btnDelRecord.Enabled = false;
        this.btnSave.Enabled = false;
        foreach (DataGridViewColumn column in (BaseCollection) this.dgvLodgers.Columns)
        {
          if (column.Name != "Consent" && column.Name != "RegDate" && column.Name != "RegOutDate")
            column.ReadOnly = true;
        }
      }
      this.tsbMultiPastTime.Enabled = false;
      IList<ClientParam> clientParamList = this.session.CreateQuery(string.Format(" from ClientParam where ClientId={0} and Period.PeriodId=0 and DBeg<='{1}' and DEnd>='{1}' and Param.ParamId in (101,102)", (object) this.Client.ClientId, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.Options.Period.PeriodName.Value))).List<ClientParam>();
      this.txtJil.Text = "";
      this.txtVrJil.Text = "";
      foreach (ClientParam clientParam in (IEnumerable<ClientParam>) clientParamList)
      {
        if ((int) clientParam.ParamId == 101)
          this.txtJil.Text = clientParam.ParamValue.ToString();
        if ((int) clientParam.ParamId == 102)
          this.txtVrJil.Text = clientParam.ParamValue.ToString();
      }
      this.dgvLodgers.Focus();
      this.InsertRecord = false;
      this.session.Clear();
      this.MySettingsLsPersons.GridName = "LsPersons";
      this.LoadSettingsLsPersons();
    }

    private void LoadSettingsLsPersons()
    {
      this.MySettingsLsPersons.Load();
      foreach (DataGridViewColumn column in (BaseCollection) this.dgvLodgers.Columns)
        this.MySettingsLsPersons.GetMySettings(column);
    }

    private void dgvLodgers_ColumnWidthChanged(object sender, DataGridViewColumnEventArgs e)
    {
      if (this.MySettingsLsPersons.FindByName(e.Column.Name) < 0)
        return;
      this.MySettingsLsPersons.Columns[this.MySettingsLsPersons.FindByName(e.Column.Name)].Width = e.Column.Width;
      this.MySettingsLsPersons.Save();
    }

    private void InsertPerson()
    {
      this.btnDelRecord.Enabled = false;
      this.btnSave.Enabled = true;
      this.session = Kvartplata.Domain.CurrentSession;
      this.InsertRecord = true;
      Person person = new Person();
      person.Reg = this.session.Get<Registration>((object) 1);
      person.Consent = new int?();
      IList<Person> personList = (IList<Person>) new List<Person>();
      if ((uint) this.dgvLodgers.Rows.Count > 0U)
        personList = (IList<Person>) (this.dgvLodgers.DataSource as List<Person>);
      personList.Add(person);
      this.dgvLodgers.Columns.Clear();
      this.dgvLodgers.DataSource = (object) null;
      this.dgvLodgers.DataSource = (object) personList;
      this.session.Clear();
      this.SetViewLodgers();
      this.dgvLodgers.CurrentCell = this.dgvLodgers.Rows[this.dgvLodgers.Rows.Count - 1].Cells[0];
    }

    private void SetViewLodgers()
    {
      bool flag = false;
      this.dgvLodgers.Columns["Family"].HeaderText = "Фамилия";
      this.dgvLodgers.Columns["Name"].HeaderText = "Имя";
      this.dgvLodgers.Columns["LastName"].HeaderText = "Отчество";
      this.dgvLodgers.Columns["Family"].DisplayIndex = 0;
      this.dgvLodgers.Columns["Name"].DisplayIndex = 1;
      this.dgvLodgers.Columns["LastName"].DisplayIndex = 2;
      this.dgvLodgers.Columns["FirstPropDate"].Visible = false;
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(48, 2, this.Client.Company, false))
      {
        this.dgvLodgers.Columns["Family"].ReadOnly = true;
        this.dgvLodgers.Columns["Name"].ReadOnly = true;
        this.dgvLodgers.Columns["LastName"].ReadOnly = true;
        if (!Kvartplata.Classes.KvrplHelper.CheckProxy(48, 1, this.Client.Company, false))
          flag = true;
      }
      this.dgvLodgers.Columns["FIO"].Visible = false;
      this.dgvLodgers.Columns["PersonId"].Visible = false;
      this.dgvLodgers.Columns["Number"].Visible = false;
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvLodgers, 3, (IList) this.session.CreateCriteria(typeof (Registration)).Add((ICriterion) NHibernate.Criterion.Restrictions.In("RegId", (ICollection) new int[2]{ 1, 2 })).List<Registration>(), "RegId", "RegName", "Тип прописки", "Reg", 160, 120);
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvLodgers, 0, (IList) this.session.CreateCriteria(typeof (Relation)).List<Relation>(), "RelationId", "RelationName", "Родство", "Rel", 160, 120);
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvLodgers, 5, "Дата регистрации", "FirstPropDate");
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvLodgers, 6, "Дата выписки", "OutToDate");
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvLodgers, 7, "Дата рождения", "BornDate");
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvLodgers, 8, "По дату", "LastPropDate");
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvLodgers, 9, "Учет даты регистрации", "RegDate");
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvLodgers, 10, "Учет даты выписки", "RegOutDate");
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvLodgers, 11, "Дата смерти", "DieDate");
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvLodgers, 12, (IList) this.session.CreateCriteria(typeof (YesNo)).List<YesNo>(), "YesNoId", "YesNoName", "Работа с персон-ми данными", "Consent", 100, 100);
      foreach (DataGridViewRow row in (IEnumerable) this.dgvLodgers.Rows)
      {
        row.Cells["FirstPropDate"].Value = (object) ((Person) row.DataBoundItem).FirstPropDate;
        row.Cells["OutToDate"].Value = (object) ((Person) row.DataBoundItem).OutToDate;
        row.Cells["BornDate"].Value = (object) ((Person) row.DataBoundItem).BornDate;
        row.Cells["LastPropDate"].Value = (object) ((Person) row.DataBoundItem).LastPropDate;
        row.Cells["RegDate"].Value = (object) ((Person) row.DataBoundItem).RegDate;
        row.Cells["RegOutDate"].Value = (object) ((Person) row.DataBoundItem).RegOutDate;
        row.Cells["DieDate"].Value = (object) ((Person) row.DataBoundItem).DieDate;
        int? consent = ((Person) row.DataBoundItem).Consent;
        int num1 = 0;
        int num2;
        if ((consent.GetValueOrDefault() == num1 ? (consent.HasValue ? 1 : 0) : 0) == 0)
        {
          consent = ((Person) row.DataBoundItem).Consent;
          int num3 = 1;
          num2 = consent.GetValueOrDefault() == num3 ? (consent.HasValue ? 1 : 0) : 0;
        }
        else
          num2 = 1;
        if (num2 != 0)
        {
          DataGridViewCell cell = row.Cells["Consent"];
          consent = ((Person) row.DataBoundItem).Consent;
          // ISSUE: variable of a boxed type
          short int16 = Convert.ToInt16(consent.Value);
          cell.Value = (object) int16;
        }
        if (((Person) row.DataBoundItem).Reg != null)
          row.Cells["Reg"].Value = (object) ((Person) row.DataBoundItem).Reg.RegId;
        if (((Person) row.DataBoundItem).Relation != null)
          row.Cells["Rel"].Value = (object) ((Person) row.DataBoundItem).Relation.RelationId;
        if (flag)
        {
          row.Cells["Family"].Value = (object) ((Person) row.DataBoundItem).PersonId;
          row.Cells["Name"].Value = (object) "***";
          row.Cells["LastName"].Value = (object) "***";
        }
      }
      if (!this.transfer.PaspCmp.HasValue)
        return;
      foreach (DataGridViewColumn column in (BaseCollection) this.dgvLodgers.Columns)
      {
        if (column.Name != "Consent" && column.Name != "RegDate" && column.Name != "RegOutDate")
          column.ReadOnly = true;
      }
    }

    private void SaveAllPerson()
    {
      foreach (DataGridViewRow row in (IEnumerable) this.dgvLodgers.Rows)
      {
        this.dgvLodgers.CurrentCell = row.Cells["Family"];
        row.Selected = true;
        if (((Person) row.DataBoundItem).IsEdit)
          this.SavePerson();
        ((Person) row.DataBoundItem).IsEdit = false;
      }
      this.btnAddRecord.Enabled = true;
      this.btnDelRecord.Enabled = true;
      this.LoadPersons();
    }

    private void SavePerson()
    {
      if (this.dgvLodgers.Rows.Count <= 0 || this.dgvLodgers.CurrentRow.Index < 0)
        return;
      this.session = Kvartplata.Domain.CurrentSession;
      Person dataBoundItem = (Person) this.dgvLodgers.CurrentRow.DataBoundItem;
      int personId = dataBoundItem.PersonId;
      if ((uint) dataBoundItem.PersonId > 0U)
      {
        this.InsertRecord = false;
      }
      else
      {
        IList<int> intList = this.session.CreateSQLQuery("select DBA.gen_id('Form_a',1)").List<int>();
        dataBoundItem.PersonId = intList[0];
        this.InsertRecord = true;
      }
      try
      {
        if (this.dgvLodgers.CurrentRow.Cells["FirstPropDate"].Value != null)
          dataBoundItem.FirstPropDate = new DateTime?(Convert.ToDateTime(this.dgvLodgers.CurrentRow.Cells["FirstPropDate"].Value));
        if (this.dgvLodgers.CurrentRow.Cells["OutToDate"].Value != null)
          dataBoundItem.OutToDate = !(this.dgvLodgers.CurrentRow.Cells["OutToDate"].Value.ToString() != "  .  .") ? new DateTime?() : new DateTime?(Convert.ToDateTime(this.dgvLodgers.CurrentRow.Cells["OutToDate"].Value));
        if (this.dgvLodgers.CurrentRow.Cells["BornDate"].Value != null)
          dataBoundItem.BornDate = !(this.dgvLodgers.CurrentRow.Cells["BornDate"].Value.ToString() != "  .  .") ? new DateTime?() : new DateTime?(Convert.ToDateTime(this.dgvLodgers.CurrentRow.Cells["BornDate"].Value));
        if (this.dgvLodgers.CurrentRow.Cells["LastPropDate"].Value != null)
          dataBoundItem.LastPropDate = !(this.dgvLodgers.CurrentRow.Cells["LastPropDate"].Value.ToString() != "  .  .") ? new DateTime?() : new DateTime?(Convert.ToDateTime(this.dgvLodgers.CurrentRow.Cells["LastPropDate"].Value));
        if (this.dgvLodgers.CurrentRow.Cells["RegDate"].Value != null)
          dataBoundItem.RegDate = !(this.dgvLodgers.CurrentRow.Cells["RegDate"].Value.ToString() != "  .  .") ? new DateTime?() : new DateTime?(Convert.ToDateTime(this.dgvLodgers.CurrentRow.Cells["RegDate"].Value));
        if (this.dgvLodgers.CurrentRow.Cells["RegOutDate"].Value != null)
          dataBoundItem.RegOutDate = !(this.dgvLodgers.CurrentRow.Cells["RegOutDate"].Value.ToString() != "  .  .") ? new DateTime?() : new DateTime?(Convert.ToDateTime(this.dgvLodgers.CurrentRow.Cells["RegOutDate"].Value));
        if (this.dgvLodgers.CurrentRow.Cells["DieDate"].Value != null)
          dataBoundItem.DieDate = !(this.dgvLodgers.CurrentRow.Cells["DieDate"].Value.ToString() != "  .  .") ? new DateTime?() : new DateTime?(Convert.ToDateTime(this.dgvLodgers.CurrentRow.Cells["DieDate"].Value));
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show("Некорректно введена дата", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return;
      }
      if (this.dgvLodgers.CurrentRow.Cells["Consent"].Value != null)
      {
        try
        {
          dataBoundItem.Consent = new int?(Convert.ToInt32(this.dgvLodgers.CurrentRow.Cells["Consent"].Value));
        }
        catch (Exception ex)
        {
        }
      }
      if (dataBoundItem.Family == null || dataBoundItem.Name == null || dataBoundItem.LastName == null)
      {
        int num1 = (int) MessageBox.Show("Введите ФИО", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
      }
      else if (!dataBoundItem.FirstPropDate.HasValue)
      {
        int num2 = (int) MessageBox.Show("Дата регистрации не введена!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
      }
      else
      {
        DateTime? nullable1 = dataBoundItem.BornDate;
        DateTime? nullable2;
        int num3;
        if (nullable1.HasValue)
        {
          nullable1 = dataBoundItem.FirstPropDate;
          nullable2 = dataBoundItem.BornDate;
          num3 = nullable1.HasValue & nullable2.HasValue ? (nullable1.GetValueOrDefault() < nullable2.GetValueOrDefault() ? 1 : 0) : 0;
        }
        else
          num3 = 0;
        if (num3 != 0)
        {
          int num4 = (int) MessageBox.Show("Дата регистрации больше даты рождения", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
        else
        {
          if (this.dgvLodgers.Rows[this.dgvLodgers.CurrentRow.Index].Cells["Rel"].Value != null)
          {
            dataBoundItem.Relation = this.session.Get<Relation>(this.dgvLodgers.Rows[this.dgvLodgers.CurrentRow.Index].Cells["Rel"].Value);
          }
          else
          {
            dataBoundItem.Relation = this.session.Get<Relation>((object) -1);
            this.dgvLodgers.Rows[this.dgvLodgers.CurrentRow.Index].Cells["Rel"].Value = (object) ((Person) this.dgvLodgers.Rows[this.dgvLodgers.CurrentRow.Index].DataBoundItem).Relation.RelationId;
          }
          if (this.dgvLodgers.Rows[this.dgvLodgers.CurrentRow.Index].Cells["Reg"].Value != null)
          {
            dataBoundItem.Reg = this.session.Get<Registration>(this.dgvLodgers.Rows[this.dgvLodgers.CurrentRow.Index].Cells["Reg"].Value);
          }
          else
          {
            dataBoundItem.Reg = this.session.Get<Registration>((object) 1);
            this.dgvLodgers.Rows[this.dgvLodgers.CurrentRow.Index].Cells["Reg"].Value = (object) ((Person) this.dgvLodgers.Rows[this.dgvLodgers.CurrentRow.Index].DataBoundItem).Reg.RegId;
          }
          nullable2 = dataBoundItem.OutToDate;
          if (nullable2.HasValue & dataBoundItem.Archive == 0 && MessageBox.Show("Отправить запись в архив", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
            dataBoundItem.Archive = 1;
          dataBoundItem.LsClient = this.Client;
          nullable2 = dataBoundItem.RegDate;
          if (!nullable2.HasValue)
          {
            ISession session = this.session;
            string format = "select DBA.form_reg({0},'{1}')";
            // ISSUE: variable of a boxed type
            int clientId = dataBoundItem.LsClient.ClientId;
            nullable2 = dataBoundItem.FirstPropDate;
            string baseFormat = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(nullable2.Value);
            string queryString = string.Format(format, (object) clientId, (object) baseFormat);
            IList<DateTime> dateTimeList = session.CreateSQLQuery(queryString).List<DateTime>();
            dataBoundItem.RegDate = new DateTime?(dateTimeList[0]);
            dataBoundItem.RegDEdit = new DateTime?(DateTime.Now);
            dataBoundItem.UNameReg = Kvartplata.Classes.Options.Login;
          }
          nullable2 = dataBoundItem.RegOutDate;
          int num5 = !nullable2.HasValue ? 1 : 0;
          nullable2 = dataBoundItem.OutToDate;
          int num6 = nullable2.HasValue ? 1 : 0;
          if ((num5 & num6) != 0)
          {
            ISession session = this.session;
            string format = "select DBA.form_reg({0},'{1}')";
            // ISSUE: variable of a boxed type
            int clientId = dataBoundItem.LsClient.ClientId;
            nullable2 = dataBoundItem.OutToDate;
            string baseFormat = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(nullable2.Value);
            string queryString = string.Format(format, (object) clientId, (object) baseFormat);
            IList<DateTime> dateTimeList = session.CreateSQLQuery(queryString).List<DateTime>();
            dataBoundItem.RegOutDate = new DateTime?(dateTimeList[0]);
            dataBoundItem.OutDEdit = new DateTime?(DateTime.Now);
            dataBoundItem.UNameUnReg = Kvartplata.Classes.Options.Login;
          }
          dataBoundItem.FamilyNum = 1;
          if (dataBoundItem.UNameReg == null)
            dataBoundItem.UNameReg = "";
          if (dataBoundItem.UNameUnReg == null)
            dataBoundItem.UNameUnReg = "";
          if (dataBoundItem.Snils == null)
            dataBoundItem.Snils = "";
          try
          {
            if (this.InsertRecord)
            {
              this.InsertRecord = false;
              this.session.Save((object) dataBoundItem);
            }
            else
              this.session.Update((object) dataBoundItem);
            this.session.Flush();
          }
          catch (Exception ex)
          {
            int num7 = (int) MessageBox.Show("Невозможно сохранить изменения", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
          }
          this.session.Clear();
        }
      }
    }

    private void DelPerson()
    {
      this.session = Kvartplata.Domain.CurrentSession;
      if (this.dgvLodgers.Rows.Count > 0 && this.dgvLodgers.CurrentRow.Index >= 0)
      {
        Person dataBoundItem = (Person) this.dgvLodgers.CurrentRow.DataBoundItem;
        if (MessageBox.Show("Вы уверены, что хотите удалить запись", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
        {
          try
          {
            this.session.Delete((object) dataBoundItem);
            this.session.Flush();
          }
          catch (Exception ex)
          {
            int num = (int) MessageBox.Show("Невозможно удалить запись", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
          }
          this.LoadPersons();
        }
      }
      this.session.Clear();
    }

    private void dgvLodgers_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
    {
      if (((DataGridView) sender).DataSource == null)
        return;
      DataGridViewRow row = ((DataGridView) sender).Rows[e.RowIndex];
      if (((Person) row.DataBoundItem).Archive != 1 && ((Person) row.DataBoundItem).Archive != 2)
      {
        row.DefaultCellStyle.BackColor = Color.PapayaWhip;
        if (((Person) row.DataBoundItem).Owner != null)
          row.DefaultCellStyle.Font = new Font("Sans Serif", 10f, FontStyle.Bold);
      }
      else
      {
        row.DefaultCellStyle.ForeColor = Color.Gray;
        if (((Person) row.DataBoundItem).Owner != null)
          row.DefaultCellStyle.Font = new Font("Sans Serif", 10f, FontStyle.Bold);
      }
    }

    private void TsmiPutDownStatusOwner_Click(object sender, EventArgs e)
    {
      if (this.dgvLodgers.Rows.Count <= 0 || this.dgvLodgers.CurrentRow == null)
        return;
      Person dataBoundItem = (Person) this.dgvLodgers.CurrentRow.DataBoundItem;
      if (dataBoundItem.Owner != null)
      {
        int num1 = (int) MessageBox.Show("Статус уже проставлен", "Внимание!", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
      }
      else
      {
        FrmChoice frmChoice = new FrmChoice(this.Client, dataBoundItem, 1);
        frmChoice.Text = "Выберите собственника";
        int num2 = (int) frmChoice.ShowDialog();
        frmChoice.Dispose();
        this.LoadPersons();
      }
    }

    private void TsmiRemoveStatusOwner_Click(object sender, EventArgs e)
    {
      if (this.dgvLodgers.Rows.Count <= 0 || this.dgvLodgers.CurrentRow == null)
        return;
      this.session = Kvartplata.Domain.CurrentSession;
      Person dataBoundItem = (Person) this.dgvLodgers.CurrentRow.DataBoundItem;
      try
      {
        this.session.CreateSQLQuery(string.Format("update dba.form_a set owner=null where idform={0}", (object) dataBoundItem.PersonId)).ExecuteUpdate();
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show("Невозможно снять статус", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
      }
      this.session.Clear();
      this.LoadPersons();
    }

    private void dgvLodgers_CellMouseDown(object sender, DataGridViewCellMouseEventArgs e)
    {
      if (e.RowIndex == -1 || e.ColumnIndex == -1 || e.Button != MouseButtons.Right)
        return;
      ((DataGridView) sender).Rows[e.RowIndex].Selected = true;
      ((DataGridView) sender).CurrentCell = ((DataGridView) sender).Rows[e.RowIndex].Cells[e.ColumnIndex];
    }

    private void dgvLodgers_CellEndEdit(object sender, DataGridViewCellEventArgs e)
    {
      if (this.dgvLodgers.CurrentRow == null)
        return;
      DataGridViewRow row = this.dgvLodgers.Rows[e.RowIndex];
      if (!string.IsNullOrEmpty(((Person) row.DataBoundItem).Family))
      {
        ((Person) row.DataBoundItem).Family = ((Person) row.DataBoundItem).Family.Substring(0, 1).ToUpper() + ((Person) row.DataBoundItem).Family.Substring(1, ((Person) row.DataBoundItem).Family.Length - 1).ToLower();
        this.dgvLodgers.CurrentRow.Cells["Family"].Value = (object) ((Person) row.DataBoundItem).Family;
      }
      if (!string.IsNullOrEmpty(((Person) row.DataBoundItem).Name))
      {
        ((Person) row.DataBoundItem).Name = ((Person) row.DataBoundItem).Name.Substring(0, 1).ToUpper() + ((Person) row.DataBoundItem).Name.Substring(1, ((Person) row.DataBoundItem).Name.Length - 1).ToLower();
        this.dgvLodgers.CurrentRow.Cells["Name"].Value = (object) ((Person) row.DataBoundItem).Name;
      }
      if (!string.IsNullOrEmpty(((Person) row.DataBoundItem).LastName))
      {
        ((Person) row.DataBoundItem).LastName = ((Person) row.DataBoundItem).LastName.Substring(0, 1).ToUpper() + ((Person) row.DataBoundItem).LastName.Substring(1, ((Person) row.DataBoundItem).LastName.Length - 1).ToLower();
        this.dgvLodgers.CurrentRow.Cells["LastName"].Value = (object) ((Person) row.DataBoundItem).LastName;
      }
      Person dataBoundItem = (Person) this.dgvLodgers.CurrentRow.DataBoundItem;
      dataBoundItem.IsEdit = true;
      if (this.dgvLodgers.CurrentCell.Value != null)
      {
        try
        {
          string name = this.dgvLodgers.Columns[e.ColumnIndex].Name;
          // ISSUE: reference to a compiler-generated method
          uint stringHash = PrivateImplementationDetails.ComputeStringHash(name);
          if (stringHash <= 2793348405U)
          {
            if (stringHash <= 1154706206U)
            {
              if ((int) stringHash != 254817837)
              {
                if ((int) stringHash == 1154706206)
                {
                  if (name == "OutToDate")
                  {
                    try
                    {
                      dataBoundItem.OutToDate = new DateTime?(Convert.ToDateTime(this.dgvLodgers.CurrentRow.Cells["OutToDate"].Value));
                    }
                    catch
                    {
                    }
                  }
                }
              }
              else if (name == "DieDate")
              {
                try
                {
                  dataBoundItem.DieDate = new DateTime?(Convert.ToDateTime(this.dgvLodgers.CurrentRow.Cells["DieDate"].Value));
                }
                catch
                {
                }
              }
            }
            else if ((int) stringHash != 1875125080)
            {
              if ((int) stringHash == -1501618891)
              {
                if (name == "Reg")
                  dataBoundItem.Reg = this.session.Get<Registration>(this.dgvLodgers.CurrentRow.Cells["Reg"].Value);
              }
            }
            else if (name == "FirstPropDate")
            {
              try
              {
                dataBoundItem.FirstPropDate = new DateTime?(Convert.ToDateTime(this.dgvLodgers.CurrentRow.Cells["FirstPropDate"].Value));
              }
              catch
              {
              }
            }
          }
          else if (stringHash <= 3201171754U)
          {
            if ((int) stringHash != -1417730796)
            {
              if ((int) stringHash == -1093795542)
              {
                if (name == "BornDate")
                {
                  try
                  {
                    dataBoundItem.BornDate = new DateTime?(Convert.ToDateTime(this.dgvLodgers.CurrentRow.Cells["BornDate"].Value));
                  }
                  catch
                  {
                  }
                }
              }
            }
            else if (name == "Rel")
              dataBoundItem.Relation = this.session.Get<Relation>(this.dgvLodgers.CurrentRow.Cells["Rel"].Value);
          }
          else if ((int) stringHash != -971018103)
          {
            if ((int) stringHash != -274330112)
            {
              if ((int) stringHash == -35833763)
              {
                if (name == "Consent")
                  dataBoundItem.Consent = new int?(Convert.ToInt32(this.dgvLodgers.CurrentRow.Cells["Consent"].Value));
              }
            }
            else if (name == "LastPropDate")
            {
              try
              {
                dataBoundItem.LastPropDate = new DateTime?(Convert.ToDateTime(this.dgvLodgers.CurrentRow.Cells["LastpropDate"].Value));
              }
              catch
              {
              }
            }
          }
          else if (name == "RegDate")
          {
            try
            {
              dataBoundItem.RegDate = new DateTime?(Convert.ToDateTime(this.dgvLodgers.CurrentRow.Cells["RegDate"].Value));
            }
            catch
            {
            }
          }
        }
        catch (Exception ex)
        {
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
        }
      }
    }

    private void dgvLodgers_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
    {
      ((Person) this.dgvLodgers.CurrentRow.DataBoundItem).IsEdit = true;
      this.btnDelRecord.Enabled = false;
      this.btnSave.Enabled = true;
    }

    private void btnNextClient_Click(object sender, EventArgs e)
    {
      this.session.Clear();
      this.session = Kvartplata.Domain.CurrentSession;
      IList<Kvartplata.Classes.LsClient> lsClientList = this.session.CreateQuery(string.Format("from LsClient ls where ls.Home.IdHome = {0} and ls.Company.CompanyId={1} " + Kvartplata.Classes.Options.MainConditions1 + " order by ls.Complex.IdFk,DBA.LENGTHHOME(Flat.NFlat),Flat.IdFlat,dba.LengthHome(ls.SurFlat)", (object) this.Client.Home.IdHome, (object) this.Client.Company.CompanyId)).List<Kvartplata.Classes.LsClient>();
      bool flag = false;
      Kvartplata.Classes.LsClient lsClient1 = new Kvartplata.Classes.LsClient();
      foreach (Kvartplata.Classes.LsClient lsClient2 in (IEnumerable<Kvartplata.Classes.LsClient>) lsClientList)
      {
        if (flag)
        {
          lsClient1 = lsClient2;
          break;
        }
        if (lsClient2.ClientId == this.Client.ClientId)
          flag = true;
      }
      if ((uint) lsClient1.ClientId <= 0U)
        return;
      this.Client = lsClient1;
      this.ClientId = lsClient1.ClientId;
      this.tabControl1_SelectedIndexChanged(sender, e);
      this.LoadTitul((short) 0);
      this.ShowHideArenda();
    }

    private void btnFirstClient_Click(object sender, EventArgs e)
    {
      this.session.Clear();
      this.session = Kvartplata.Domain.CurrentSession;
      IList<Kvartplata.Classes.LsClient> lsClientList = this.session.CreateQuery(string.Format("from LsClient ls where ls.Home.IdHome = {0} and ls.Company.CompanyId={1} " + Kvartplata.Classes.Options.MainConditions1 + " order by ls.Complex.IdFk,DBA.LENGTHHOME(Flat.NFlat),Flat.IdFlat,dba.LengthHome(ls.SurFlat)", (object) this.Client.Home.IdHome, (object) this.Client.Company.CompanyId)).List<Kvartplata.Classes.LsClient>();
      Kvartplata.Classes.LsClient lsClient = new Kvartplata.Classes.LsClient();
      if (lsClientList.Count > 0)
        lsClient = lsClientList[0];
      if ((uint) lsClient.ClientId <= 0U)
        return;
      this.Client = lsClient;
      this.ClientId = lsClient.ClientId;
      this.tabControl1_SelectedIndexChanged(sender, e);
      this.LoadTitul((short) 0);
      this.ShowHideArenda();
    }

    private void btnPrevClient_Click(object sender, EventArgs e)
    {
      this.session.Clear();
      this.session = Kvartplata.Domain.CurrentSession;
      IList<Kvartplata.Classes.LsClient> lsClientList = this.session.CreateQuery(string.Format("from LsClient ls where ls.Home.IdHome = {0} and ls.Company.CompanyId={1} " + Kvartplata.Classes.Options.MainConditions1 + " order by ls.Complex.IdFk,DBA.LENGTHHOME(Flat.NFlat),Flat.IdFlat,dba.LengthHome(ls.SurFlat)", (object) this.Client.Home.IdHome, (object) this.Client.Company.CompanyId)).List<Kvartplata.Classes.LsClient>();
      bool flag = false;
      Kvartplata.Classes.LsClient lsClient = new Kvartplata.Classes.LsClient();
      for (int index = lsClientList.Count - 1; index >= 0; --index)
      {
        if (flag)
        {
          lsClient = lsClientList[index];
          break;
        }
        if (lsClientList[index].ClientId == this.Client.ClientId)
          flag = true;
      }
      if ((uint) lsClient.ClientId <= 0U)
        return;
      this.Client = lsClient;
      this.ClientId = lsClient.ClientId;
      this.tabControl1_SelectedIndexChanged(sender, e);
      this.LoadTitul((short) 0);
      this.ShowHideArenda();
    }

    private void btnLast_Click(object sender, EventArgs e)
    {
      this.session.Clear();
      this.session = Kvartplata.Domain.CurrentSession;
      IList<Kvartplata.Classes.LsClient> lsClientList = this.session.CreateQuery(string.Format("from LsClient ls where ls.Home.IdHome = {0} and ls.Company.CompanyId={1} " + Kvartplata.Classes.Options.MainConditions1 + " order by ls.Complex.IdFk,DBA.LENGTHHOME(Flat.NFlat),Flat.IdFlat,dba.LengthHome(ls.SurFlat)", (object) this.Client.Home.IdHome, (object) this.Client.Company.CompanyId)).List<Kvartplata.Classes.LsClient>();
      Kvartplata.Classes.LsClient lsClient = new Kvartplata.Classes.LsClient();
      if (lsClientList.Count > 0)
        lsClient = lsClientList[lsClientList.Count - 1];
      if ((uint) lsClient.ClientId <= 0U)
        return;
      this.Client = lsClient;
      this.ClientId = lsClient.ClientId;
      this.tabControl1_SelectedIndexChanged(sender, e);
      this.LoadTitul((short) 0);
      this.ShowHideArenda();
    }

    private void LoadOwners()
    {
      this.btnSaveOwner.Enabled = false;
      this.btnAddOwner.Enabled = true;
      this.btnDelOwner.Enabled = true;
      this.tsbMultiPastTime.Enabled = false;
      this.chbArhiv.Enabled = true;
      this.chbArhiv.Visible = true;
      this.session = Kvartplata.Domain.CurrentSession;
      this.dgvOwners.Columns.Clear();
      this.dgvOwners.DataSource = (object) null;
      this.owners = this.chbArhiv.Checked ? this.session.CreateCriteria(typeof (Owner)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).AddOrder(Order.Asc("Archive")).List<Owner>() : this.session.CreateCriteria(typeof (Owner)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Archive", (object) 0)).AddOrder(Order.Asc("Archive")).List<Owner>();
      foreach (Owner owner in (IEnumerable<Owner>) this.owners)
        Kvartplata.Classes.KvrplHelper.GetOwnerFamily(owner, 2);
      this.dgvOwners.DataSource = (object) this.owners;
      this.SetViewOwners();
      this.LoadOwnerDoc();
      this.dgvOwners.Focus();
      if (this.dgvOwners.Rows.Count > 0)
        this.dgvOwners.CurrentCell = this.dgvOwners.Rows[0].Cells[0];
      this.InsertRecord = false;
      this.session.Clear();
      this.MySettingsLsOwners.GridName = "LsOwners";
      this.LoadSettingsLsOwners();
    }

    private void LoadSettingsLsOwners()
    {
      this.MySettingsLsOwners.Load();
      foreach (DataGridViewColumn column in (BaseCollection) this.dgvOwners.Columns)
        this.MySettingsLsOwners.GetMySettings(column);
    }

    private void dgvOwners_ColumnWidthChanged(object sender, DataGridViewColumnEventArgs e)
    {
      if (this.MySettingsLsOwners.FindByName(e.Column.Name) < 0)
        return;
      this.MySettingsLsOwners.Columns[this.MySettingsLsOwners.FindByName(e.Column.Name)].Width = e.Column.Width;
      this.MySettingsLsOwners.Save();
    }

    private void SetViewOwners()
    {
      this.session = Kvartplata.Domain.CurrentSession;
      bool flag = false;
      this.dgvOwners.Columns["Family"].HeaderText = "Фамилия";
      this.dgvOwners.Columns["Name"].HeaderText = "Имя";
      this.dgvOwners.Columns["LastName"].HeaderText = "Отчество";
      this.dgvOwners.Columns["FamilyNum"].HeaderText = "Номер семьи";
      this.dgvOwners.Columns["Note"].HeaderText = "Примечания";
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(48, 2, this.Client.Company, false))
      {
        this.dgvOwners.Columns["Family"].ReadOnly = true;
        this.dgvOwners.Columns["Name"].ReadOnly = true;
        this.dgvOwners.Columns["LastName"].ReadOnly = true;
        if (!Kvartplata.Classes.KvrplHelper.CheckProxy(48, 1, this.Client.Company, false))
          flag = true;
      }
      this.dgvOwners.Columns["FirstPropDate"].Visible = false;
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvOwners, 0, (IList) this.session.CreateCriteria(typeof (Relation)).List<Relation>(), "RelationId", "RelationName", "Родство", "Rel", 160, 120);
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvOwners, 4, "Дата приобретения", "FirstPropDate");
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvOwners, 5, "Дата изменения", "OutToDate");
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvOwners, 6, "Дата рождения", "BornDate");
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvOwners, 7, "Учет даты приобретения", "RegDate");
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvOwners, 8, "Учет даты изменения", "RegOutDate");
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvOwners, 9, (IList) this.session.CreateCriteria(typeof (YesNo)).List<YesNo>(), "YesNoId", "YesNoName", "Работа с персон-ми данными", "Consent", 100, 100);
      foreach (DataGridViewRow row in (IEnumerable) this.dgvOwners.Rows)
      {
        row.Cells["FirstPropDate"].Value = (object) ((Owner) row.DataBoundItem).FirstPropDate;
        row.Cells["OutToDate"].Value = (object) ((Owner) row.DataBoundItem).OutToDate;
        row.Cells["BornDate"].Value = (object) ((Owner) row.DataBoundItem).BornDate;
        row.Cells["RegDate"].Value = (object) ((Owner) row.DataBoundItem).RegDate;
        row.Cells["RegOutDate"].Value = (object) ((Owner) row.DataBoundItem).RegOutDate;
        if (((Owner) row.DataBoundItem).Relation != null)
          row.Cells["Rel"].Value = (object) ((Owner) row.DataBoundItem).Relation.RelationId;
        int? consent = ((Owner) row.DataBoundItem).Consent;
        int num1 = 0;
        int num2;
        if ((consent.GetValueOrDefault() == num1 ? (consent.HasValue ? 1 : 0) : 0) == 0)
        {
          consent = ((Owner) row.DataBoundItem).Consent;
          int num3 = 1;
          num2 = consent.GetValueOrDefault() == num3 ? (consent.HasValue ? 1 : 0) : 0;
        }
        else
          num2 = 1;
        if (num2 != 0)
        {
          DataGridViewCell cell = row.Cells["Consent"];
          consent = ((Owner) row.DataBoundItem).Consent;
          // ISSUE: variable of a boxed type
          short int16 = Convert.ToInt16(consent.Value);
          cell.Value = (object) int16;
        }
        if (flag)
        {
          row.Cells["Family"].Value = (object) ((Owner) row.DataBoundItem).OwnerId;
          row.Cells["Name"].Value = (object) "***";
          row.Cells["LastName"].Value = (object) "***";
        }
      }
      this.session.Clear();
    }

    private void dgvOwners_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
    {
      if (((DataGridView) sender).DataSource == null)
        return;
      DataGridViewRow row = ((DataGridView) sender).Rows[e.RowIndex];
      if (((Owner) row.DataBoundItem).Archive == 0)
        row.DefaultCellStyle.BackColor = Color.PapayaWhip;
      else
        row.DefaultCellStyle.ForeColor = Color.Gray;
    }

    private void InsertOwner()
    {
      this.InsertRecord = true;
      Owner owner = new Owner();
      IList<Owner> ownerList = (IList<Owner>) new List<Owner>();
      if ((uint) this.dgvOwners.Rows.Count > 0U)
        ownerList = (IList<Owner>) (this.dgvOwners.DataSource as List<Owner>);
      ownerList.Add(owner);
      this.dgvOwners.Columns.Clear();
      this.dgvOwners.DataSource = (object) null;
      this.dgvOwners.DataSource = (object) ownerList;
      this.SetViewOwners();
      this.dgvOwners.CurrentCell = this.dgvOwners.Rows[this.dgvOwners.Rows.Count - 1].Cells[0];
    }

    private void SaveAllOwners()
    {
      foreach (DataGridViewRow row in (IEnumerable) this.dgvOwners.Rows)
      {
        this.dgvOwners.CurrentCell = row.Cells["Family"];
        row.Selected = true;
        if (((Owner) row.DataBoundItem).IsEdit)
          this.SaveOwner();
        ((Owner) row.DataBoundItem).IsEdit = false;
      }
      this.btnAddOwner.Enabled = true;
      this.btnDelOwner.Enabled = true;
    }

    private void SaveOwner()
    {
      if (this.dgvOwners.Rows.Count <= 0 || this.dgvOwners.CurrentRow.Index < 0)
        return;
      this.session.Clear();
      this.session = Kvartplata.Domain.CurrentSession;
      Owner dataBoundItem = (Owner) this.dgvOwners.CurrentRow.DataBoundItem;
      int ownerId = dataBoundItem.OwnerId;
      this.InsertRecord = dataBoundItem.OwnerId == 0;
      dataBoundItem.LsClient = this.Client;
      if (this.dgvOwners.CurrentRow.Cells["FirstPropDate"].Value != null)
      {
        try
        {
          dataBoundItem.FirstPropDate = new DateTime?(Convert.ToDateTime(this.dgvOwners.CurrentRow.Cells["FirstPropDate"].Value));
        }
        catch (Exception ex)
        {
          int num = (int) MessageBox.Show("Дата приобретения некорректна", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          return;
        }
        if (this.dgvOwners.CurrentRow.Cells["OutToDate"].Value != null)
        {
          try
          {
            dataBoundItem.OutToDate = !(this.dgvOwners.CurrentRow.Cells["OutToDate"].Value.ToString() != "  .  .") ? new DateTime?() : new DateTime?(Convert.ToDateTime(this.dgvOwners.CurrentRow.Cells["OutToDate"].Value));
          }
          catch (Exception ex)
          {
          }
        }
        if (this.dgvOwners.CurrentRow.Cells["BornDate"].Value != null)
        {
          try
          {
            dataBoundItem.BornDate = !(this.dgvOwners.CurrentRow.Cells["BornDate"].Value.ToString() != "  .  .") ? new DateTime?() : new DateTime?(Convert.ToDateTime(this.dgvOwners.CurrentRow.Cells["BornDate"].Value));
          }
          catch (Exception ex)
          {
          }
        }
        if (this.dgvOwners.CurrentRow.Cells["RegOutDate"].Value != null)
          dataBoundItem.RegOutDate = !(this.dgvOwners.CurrentRow.Cells["RegOutDate"].Value.ToString() != "  .  .") ? new DateTime?() : new DateTime?(Convert.ToDateTime(this.dgvOwners.CurrentRow.Cells["RegOutDate"].Value));
        DateTime? nullable;
        if (this.dgvOwners.CurrentRow.Cells["RegDate"].Value != null)
        {
          try
          {
            dataBoundItem.RegDate = new DateTime?(Convert.ToDateTime(this.dgvOwners.CurrentRow.Cells["RegDate"].Value));
          }
          catch (Exception ex)
          {
          }
        }
        else
        {
          this.session.CreateSQLQuery("call my_login").ExecuteUpdate();
          ISession session = this.session;
          string format = "select DBA.form_reg({0},'{1}')";
          // ISSUE: variable of a boxed type
          int clientId = dataBoundItem.LsClient.ClientId;
          nullable = dataBoundItem.FirstPropDate;
          string baseFormat = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(nullable.Value);
          string queryString = string.Format(format, (object) clientId, (object) baseFormat);
          IList<DateTime> dateTimeList = session.CreateSQLQuery(queryString).List<DateTime>();
          dataBoundItem.RegDate = new DateTime?(dateTimeList[0]);
          dataBoundItem.RegDEdit = new DateTime?(DateTime.Now);
          dataBoundItem.UNameReg = Kvartplata.Classes.Options.Login;
        }
        if (this.dgvOwners.CurrentRow.Cells["Consent"].Value != null)
          dataBoundItem.Consent = new int?(Convert.ToInt32(this.dgvOwners.CurrentRow.Cells["Consent"].Value));
        if (dataBoundItem.Family == null || dataBoundItem.Name == null || dataBoundItem.LastName == null)
        {
          int num1 = (int) MessageBox.Show("Введите ФИО", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
        else
        {
          nullable = dataBoundItem.FirstPropDate;
          if (!nullable.HasValue)
          {
            int num2 = (int) MessageBox.Show("Дата приобретения статуса 'собственник' не введена!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
          }
          else
          {
            if (this.dgvOwners.Rows[this.dgvOwners.CurrentRow.Index].Cells["Rel"].Value != null)
            {
              dataBoundItem.Relation = this.session.Get<Relation>(this.dgvOwners.Rows[this.dgvOwners.CurrentRow.Index].Cells["Rel"].Value);
            }
            else
            {
              dataBoundItem.Relation = this.session.Get<Relation>((object) -1);
              this.dgvOwners.Rows[this.dgvOwners.CurrentRow.Index].Cells["Rel"].Value = (object) ((Owner) this.dgvOwners.Rows[this.dgvOwners.CurrentRow.Index].DataBoundItem).Relation.RelationId;
            }
            nullable = dataBoundItem.OutToDate;
            if (nullable.HasValue & dataBoundItem.Archive == 0)
            {
              if (MessageBox.Show("Отправить запись в архив", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) != DialogResult.OK)
                return;
              dataBoundItem.Archive = 1;
            }
            if (dataBoundItem.FamilyNum == 0)
              dataBoundItem.FamilyNum = 1;
            if (dataBoundItem.Note == null)
              dataBoundItem.Note = "";
            nullable = dataBoundItem.RegOutDate;
            int num3 = !nullable.HasValue ? 1 : 0;
            nullable = dataBoundItem.OutToDate;
            int num4 = nullable.HasValue ? 1 : 0;
            if ((num3 & num4) != 0)
            {
              ISession session = this.session;
              string format = "select DBA.form_reg({0},'{1}')";
              // ISSUE: variable of a boxed type
              int clientId = dataBoundItem.LsClient.ClientId;
              nullable = dataBoundItem.OutToDate;
              string baseFormat = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(nullable.Value);
              string queryString = string.Format(format, (object) clientId, (object) baseFormat);
              IList<DateTime> dateTimeList = session.CreateSQLQuery(queryString).List<DateTime>();
              dataBoundItem.RegOutDate = new DateTime?(dateTimeList[0]);
              dataBoundItem.OutDEdit = new DateTime?(DateTime.Now);
              dataBoundItem.UNameUnReg = Kvartplata.Classes.Options.Login;
            }
            if (dataBoundItem.UNameReg == null)
              dataBoundItem.UNameReg = "";
            if (dataBoundItem.UNameUnReg == null)
              dataBoundItem.UNameUnReg = "";
            int num5;
            if (this.oldOwner != null)
            {
              if (!(dataBoundItem.Family != this.oldOwner.Family) && !(dataBoundItem.Name != this.oldOwner.Name) && !(dataBoundItem.LastName != this.oldOwner.LastName))
              {
                nullable = dataBoundItem.BornDate;
                DateTime? bornDate = this.oldOwner.BornDate;
                num5 = nullable.HasValue == bornDate.HasValue ? (nullable.HasValue ? (nullable.GetValueOrDefault() != bornDate.GetValueOrDefault() ? 1 : 0) : 0) : 1;
              }
              else
                num5 = 1;
            }
            else
              num5 = 0;
            if (num5 != 0 && this.session.CreateQuery(string.Format("from Person where Owner.OwnerId={0}", (object) dataBoundItem.OwnerId)).List<Person>().Count > 0)
            {
              int num6 = (int) MessageBox.Show("Невозможно изменить ФИО и дату рождения. Есть привязка к жильцу.", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
            else
            {
              try
              {
                if (this.InsertRecord)
                {
                  this.InsertRecord = false;
                  this.session.Save((object) dataBoundItem);
                }
                else
                  this.session.Update((object) dataBoundItem);
                this.session.Flush();
              }
              catch (Exception ex)
              {
                Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
              }
              this.session.Clear();
              this.oldOwner = (Owner) null;
              this.btnAddOwner.Enabled = true;
              this.btnSaveOwner.Enabled = false;
              this.btnDelOwner.Enabled = true;
              this.btnAddRecord.Enabled = true;
              this.btnDelRecord.Enabled = true;
              this.btnSave.Enabled = false;
            }
          }
        }
      }
      else
      {
        int num7 = (int) MessageBox.Show("Дата приобретения не введена", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    private void DelOwner()
    {
      this.session = Kvartplata.Domain.CurrentSession;
      if (this.dgvOwners.Rows.Count > 0 && this.dgvOwners.CurrentRow.Index >= 0)
      {
        Owner dataBoundItem = (Owner) this.dgvOwners.CurrentRow.DataBoundItem;
        int num1;
        if (dataBoundItem != null)
        {
          DateTime? firstPropDate = dataBoundItem.FirstPropDate;
          DateTime? periodName = this.MonthClosed.PeriodName;
          num1 = firstPropDate.HasValue & periodName.HasValue ? (firstPropDate.GetValueOrDefault() <= periodName.GetValueOrDefault() ? 1 : 0) : 0;
        }
        else
          num1 = 0;
        if (num1 != 0)
        {
          if (MessageBox.Show("Невозможно удалить запись, т.к. запись принадлежит закрытому периоду. Отправить запись в архив?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) != DialogResult.OK)
            return;
          dataBoundItem.Archive = 1;
          dataBoundItem.OutToDate = new DateTime?(DateTime.Now);
          try
          {
            this.session.Update((object) dataBoundItem);
            this.session.Flush();
          }
          catch (Exception ex)
          {
            int num2 = (int) MessageBox.Show("Невозможно отправить запись в архив", "Ошибка", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
            Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
          }
          this.LoadOwners();
          return;
        }
        if (MessageBox.Show("Вы уверены, что хотите удалить запись", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
        {
          try
          {
            this.session.Delete((object) dataBoundItem);
            this.session.Flush();
          }
          catch (Exception ex)
          {
            int num2 = (int) MessageBox.Show("Невозможно удалить запись", "Ошибка", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
            Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
          }
          this.LoadOwners();
        }
      }
      this.session.Clear();
    }

    private void btnDelOwner_Click(object sender, EventArgs e)
    {
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(47, 2, this.Client.Company, true))
        return;
      this.DelOwner();
    }

    private void btnAddOwner_Click(object sender, EventArgs e)
    {
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(47, 2, this.Client.Company, true))
        return;
      this.btnSaveOwner.Enabled = true;
      this.btnDelOwner.Enabled = false;
      this.btnAddRecord.Enabled = false;
      this.btnDelRecord.Enabled = false;
      this.btnSave.Enabled = false;
      this.InsertOwner();
    }

    private void btnSaveOwner_Click(object sender, EventArgs e)
    {
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(47, 2, this.Client.Company, true))
        return;
      this.SaveAllOwners();
      if (this.InsertRecord)
        return;
      this.LoadOwners();
    }

    private void dgvOwners_KeyUp(object sender, KeyEventArgs e)
    {
      if (e.KeyCode != Keys.Up && e.KeyCode != Keys.Down)
        return;
      this.LoadOwnerDoc();
      this.dgvOwners.Focus();
    }

    private void dgvOwners_CellClick(object sender, DataGridViewCellEventArgs e)
    {
      this.LoadOwnerDoc();
    }

    private void TsmiSelectOwners_Click(object sender, EventArgs e)
    {
      FrmChoice frmChoice = new FrmChoice(this.Client, (Person) null, 2);
      frmChoice.Text = "Выберите жильца";
      int num = (int) frmChoice.ShowDialog();
      frmChoice.Dispose();
      this.LoadOwners();
    }

    private void dgvOwners_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
    {
      if (this.oldOwner == null)
      {
        this.oldOwner = new Owner();
        this.oldOwner = this.session.Get<Owner>((object) ((Owner) this.dgvOwners.CurrentRow.DataBoundItem).OwnerId);
        this.session.Clear();
      }
      this.btnSaveOwner.Enabled = true;
      ((Owner) this.dgvOwners.CurrentRow.DataBoundItem).IsEdit = true;
    }

    private void dgvOwners_CellEndEdit(object sender, DataGridViewCellEventArgs e)
    {
      if (this.dgvOwners.CurrentRow != null)
      {
        DataGridViewRow row = this.dgvOwners.Rows[e.RowIndex];
        if (!string.IsNullOrEmpty(((Owner) row.DataBoundItem).Family))
        {
          ((Owner) row.DataBoundItem).Family = ((Owner) row.DataBoundItem).Family.Substring(0, 1).ToUpper() + ((Owner) row.DataBoundItem).Family.Substring(1, ((Owner) row.DataBoundItem).Family.Length - 1);
          this.dgvOwners.CurrentRow.Cells["Family"].Value = (object) ((Owner) row.DataBoundItem).Family;
        }
        if (!string.IsNullOrEmpty(((Owner) row.DataBoundItem).Name))
        {
          ((Owner) row.DataBoundItem).Name = ((Owner) row.DataBoundItem).Name.Substring(0, 1).ToUpper() + ((Owner) row.DataBoundItem).Name.Substring(1, ((Owner) row.DataBoundItem).Name.Length - 1).ToLower();
          this.dgvOwners.CurrentRow.Cells["Name"].Value = (object) ((Owner) row.DataBoundItem).Name;
        }
        if (!string.IsNullOrEmpty(((Owner) row.DataBoundItem).LastName))
        {
          ((Owner) row.DataBoundItem).LastName = ((Owner) row.DataBoundItem).LastName.Substring(0, 1).ToUpper() + ((Owner) row.DataBoundItem).LastName.Substring(1, ((Owner) row.DataBoundItem).LastName.Length - 1).ToLower();
          this.dgvOwners.CurrentRow.Cells["LastName"].Value = (object) ((Owner) row.DataBoundItem).LastName;
        }
      }
      Owner dataBoundItem = (Owner) this.dgvOwners.CurrentRow.DataBoundItem;
      dataBoundItem.IsEdit = true;
      if (this.dgvOwners.CurrentCell.Value == null)
        return;
      try
      {
        string name = this.dgvOwners.Columns[e.ColumnIndex].Name;
        if (!(name == "Rel"))
        {
          if (!(name == "FirstPropDate"))
          {
            if (!(name == "OutToDate"))
            {
              if (!(name == "BornDate"))
              {
                if (!(name == "RegDate"))
                {
                  if (name == "Consent")
                    dataBoundItem.Consent = new int?(Convert.ToInt32(this.dgvOwners.CurrentRow.Cells["Consent"].Value));
                }
                else
                {
                  try
                  {
                    dataBoundItem.RegDate = new DateTime?(Convert.ToDateTime(this.dgvOwners.CurrentRow.Cells["RegDate"].Value));
                  }
                  catch
                  {
                  }
                }
              }
              else
              {
                try
                {
                  dataBoundItem.BornDate = new DateTime?(Convert.ToDateTime(this.dgvOwners.CurrentRow.Cells["BornDate"].Value));
                }
                catch
                {
                }
              }
            }
            else
            {
              try
              {
                dataBoundItem.OutToDate = new DateTime?(Convert.ToDateTime(this.dgvOwners.CurrentRow.Cells["OutToDate"].Value));
              }
              catch
              {
              }
            }
          }
          else
          {
            try
            {
              dataBoundItem.FirstPropDate = new DateTime?(Convert.ToDateTime(this.dgvOwners.CurrentRow.Cells["FirstPropDate"].Value));
            }
            catch
            {
            }
          }
        }
        else
          dataBoundItem.Relation = this.session.Get<Relation>(this.dgvOwners.CurrentRow.Cells["Rel"].Value);
      }
      catch (Exception ex)
      {
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
      }
    }

    private void LoadOwnerDoc()
    {
      this.dgvOwnerDoc.Columns.Clear();
      this.dgvOwnerDoc.DataSource = (object) null;
      if (this.dgvOwners.Rows.Count <= 0 || (uint) ((Owner) this.dgvOwners.CurrentRow.DataBoundItem).OwnerId <= 0U)
        return;
      this.btnSave.Enabled = false;
      this.btnAddRecord.Enabled = true;
      this.btnDelRecord.Enabled = true;
      this.session = Kvartplata.Domain.CurrentSession;
      Owner dataBoundItem = (Owner) this.dgvOwners.CurrentRow.DataBoundItem;
      IList<OwnerDoc> ownerDocList = (IList<OwnerDoc>) new List<OwnerDoc>();
      this.dgvOwnerDoc.DataSource = this.chbArhiv.Checked ? (object) this.session.CreateCriteria(typeof (OwnerDoc)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Owner", (object) dataBoundItem)).List<OwnerDoc>() : (object) this.session.CreateCriteria(typeof (OwnerDoc)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Owner", (object) dataBoundItem)).Add((ICriterion) NHibernate.Criterion.Restrictions.Not((ICriterion) NHibernate.Criterion.Restrictions.Eq("Archive", (object) this.session.Get<YesNo>((object) Convert.ToInt16(1))))).List<OwnerDoc>();
      this.SetViewOwnerDoc();
      this.InsertRecord = false;
      this.btnSave.Enabled = false;
      this.session.Clear();
    }

    private void SetViewOwnerDoc()
    {
      this.dgvOwnerDoc.Columns["OwnerDocId"].Visible = false;
      this.dgvOwnerDoc.Columns["Percent"].HeaderText = "Доля собственности";
      this.dgvOwnerDoc.Columns["DocNum"].HeaderText = "№ в реестре";
      this.dgvOwnerDoc.Columns["Seria"].HeaderText = "Серия";
      this.dgvOwnerDoc.Columns["Number"].HeaderText = "Номер";
      this.dgvOwnerDoc.Columns["Percent"].DisplayIndex = 0;
      this.dgvOwnerDoc.Columns["DocNum"].DisplayIndex = 1;
      this.dgvOwnerDoc.Columns["Seria"].DisplayIndex = 3;
      this.dgvOwnerDoc.Columns["Number"].DisplayIndex = 4;
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvOwnerDoc, 0, (IList) this.session.CreateCriteria(typeof (RightDoc)).List<RightDoc>(), "RightDocId", "RightDocName", "Вид собственности", "RightDoc", 160, 120);
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvOwnerDoc, 3, "Дата в реестре", "DocDate");
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvOwnerDoc, 4, (IList) this.session.CreateCriteria(typeof (OwnDoc)).List<OwnDoc>(), "Id", "Name", "Документ", "OwnDoc", 160, 120);
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvOwnerDoc, 8, "Дата", "Date");
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvOwnerDoc, 9, (IList) this.session.CreateCriteria(typeof (YesNo)).List<YesNo>(), "YesNoId", "YesNoName", "Архив", "Archive", 80, 80);
      foreach (DataGridViewRow row in (IEnumerable) this.dgvOwnerDoc.Rows)
      {
        row.Cells["DocDate"].Value = (object) ((OwnerDoc) row.DataBoundItem).DocDate;
        row.Cells["Date"].Value = (object) ((OwnerDoc) row.DataBoundItem).Date;
        if (((OwnerDoc) row.DataBoundItem).RightDoc != null)
          row.Cells["RightDoc"].Value = (object) ((OwnerDoc) row.DataBoundItem).RightDoc.RightDocId;
        if (((OwnerDoc) row.DataBoundItem).OwnDoc != null)
          row.Cells["OwnDoc"].Value = (object) ((OwnerDoc) row.DataBoundItem).OwnDoc.Id;
        if (((OwnerDoc) row.DataBoundItem).Archive != null)
          row.Cells["Archive"].Value = (object) ((OwnerDoc) row.DataBoundItem).Archive.YesNoId;
      }
    }

    private void InsertOwnerDoc()
    {
      if (this.dgvOwners.Rows.Count > 0 && this.dgvOwners.CurrentRow != null)
      {
        this.InsertRecord = true;
        OwnerDoc ownerDoc = new OwnerDoc();
        ownerDoc.Owner = (Owner) this.dgvOwners.CurrentRow.DataBoundItem;
        this.session = Kvartplata.Domain.CurrentSession;
        ownerDoc.Archive = this.session.Get<YesNo>((object) Convert.ToInt16(0));
        this.session.Clear();
        IList<OwnerDoc> ownerDocList = (IList<OwnerDoc>) new List<OwnerDoc>();
        if ((uint) this.dgvOwnerDoc.Rows.Count > 0U)
          ownerDocList = (IList<OwnerDoc>) (this.dgvOwnerDoc.DataSource as List<OwnerDoc>);
        ownerDocList.Add(ownerDoc);
        this.dgvOwnerDoc.Columns.Clear();
        this.dgvOwnerDoc.DataSource = (object) null;
        this.dgvOwnerDoc.DataSource = (object) ownerDocList;
        this.SetViewOwnerDoc();
        this.dgvOwnerDoc.CurrentCell = this.dgvOwnerDoc.Rows[this.dgvOwnerDoc.Rows.Count - 1].Cells[0];
      }
      else
      {
        this.btnDelRecord.Enabled = true;
        this.btnSave.Enabled = false;
        this.btnDelOwner.Enabled = true;
        this.btnAddOwner.Enabled = true;
      }
    }

    private void SaveOwnerDoc()
    {
      if (this.dgvOwners.Rows.Count <= 0 || this.dgvOwners.CurrentRow.Index < 0)
        return;
      this.session.Clear();
      this.session = Kvartplata.Domain.CurrentSession;
      OwnerDoc dataBoundItem = (OwnerDoc) this.dgvOwnerDoc.CurrentRow.DataBoundItem;
      if (this.dgvOwnerDoc.CurrentRow.Cells["RightDoc"].Value == null)
      {
        int num1 = (int) MessageBox.Show("Выберите вид собственности", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
      else
      {
        dataBoundItem.RightDoc = this.session.Get<RightDoc>(this.dgvOwnerDoc.CurrentRow.Cells["RightDoc"].Value);
        if (this.dgvOwnerDoc.CurrentRow.Cells["OwnDoc"].Value != null)
          dataBoundItem.OwnDoc = this.session.Get<OwnDoc>(this.dgvOwnerDoc.CurrentRow.Cells["OwnDoc"].Value);
        try
        {
          if (Convert.ToDateTime(this.dgvOwnerDoc.CurrentRow.Cells["DocDate"].Value) != Convert.ToDateTime("01.01.0001"))
            dataBoundItem.DocDate = new DateTime?(Convert.ToDateTime(this.dgvOwnerDoc.CurrentRow.Cells["DocDate"].Value));
          if (Convert.ToDateTime(this.dgvOwnerDoc.CurrentRow.Cells["Date"].Value) != Convert.ToDateTime("01.01.0001"))
            dataBoundItem.Date = new DateTime?(Convert.ToDateTime(this.dgvOwnerDoc.CurrentRow.Cells["Date"].Value));
        }
        catch
        {
          int num2 = (int) MessageBox.Show("Проверьте корректность введенных дат", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          return;
        }
        dataBoundItem.Archive = this.session.Get<YesNo>(this.dgvOwnerDoc.CurrentRow.Cells["Archive"].Value);
        if (dataBoundItem.Percent == null)
          dataBoundItem.Percent = " ";
        if (dataBoundItem.DocNum == null)
          dataBoundItem.DocNum = " ";
        if (dataBoundItem.Number == null)
          dataBoundItem.Number = " ";
        if (dataBoundItem.Seria == null)
          dataBoundItem.Seria = " ";
        dataBoundItem.UName = Kvartplata.Classes.Options.Login;
        dataBoundItem.DEdit = DateTime.Now;
        try
        {
          if (this.InsertRecord)
          {
            this.InsertRecord = false;
            this.session.Save((object) dataBoundItem);
          }
          else
            this.session.Update((object) dataBoundItem);
          this.session.Flush();
        }
        catch (Exception ex)
        {
          int num2 = (int) MessageBox.Show("Невозможно сохранить изменения", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
        }
        this.session.Clear();
        this.btnAddOwner.Enabled = true;
        this.btnSaveOwner.Enabled = false;
        this.btnDelOwner.Enabled = true;
        this.btnAddRecord.Enabled = true;
        this.btnDelRecord.Enabled = true;
        this.btnSave.Enabled = false;
      }
    }

    private void DelOwnerDoc()
    {
      this.session = Kvartplata.Domain.CurrentSession;
      if (this.dgvOwnerDoc.Rows.Count > 0 && this.dgvOwnerDoc.CurrentRow != null && this.dgvOwnerDoc.CurrentRow.Index >= 0)
      {
        OwnerDoc dataBoundItem = (OwnerDoc) this.dgvOwnerDoc.CurrentRow.DataBoundItem;
        int num1;
        if (dataBoundItem != null)
        {
          DateTime? docDate = dataBoundItem.DocDate;
          DateTime? periodName = this.MonthClosed.PeriodName;
          num1 = docDate.HasValue & periodName.HasValue ? (docDate.GetValueOrDefault() <= periodName.GetValueOrDefault() ? 1 : 0) : 0;
        }
        else
          num1 = 0;
        if (num1 != 0)
        {
          if (MessageBox.Show("Невозможно удалить запись, т.к. запись принадлежит закрытому периоду. Отправить запись в архив?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) != DialogResult.OK)
            return;
          dataBoundItem.Archive = this.session.Get<YesNo>((object) Convert.ToInt16(1));
          dataBoundItem.Date = new DateTime?(DateTime.Now);
          try
          {
            this.session.Update((object) dataBoundItem);
            this.session.Flush();
            return;
          }
          catch (Exception ex)
          {
            int num2 = (int) MessageBox.Show("Невозможно отправить запись в архив", "Ошибка", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
            Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
            return;
          }
        }
        else if (MessageBox.Show("Вы уверены, что хотите удалить запись", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
        {
          try
          {
            this.session.Delete((object) dataBoundItem);
            this.session.Flush();
          }
          catch (Exception ex)
          {
            int num2 = (int) MessageBox.Show("Невозможно удалить запись", "Ошибка", MessageBoxButtons.OKCancel, MessageBoxIcon.Hand);
            Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
          }
        }
      }
      this.session.Clear();
    }

    private void TsmiCopyRec_Click(object sender, EventArgs e)
    {
      if (this.tcntrl.SelectedTab == this.tpOwners && this.dgvOwners.Rows.Count > 0 && this.dgvOwnerDoc.Rows.Count > 0)
      {
        this.copyOwnerDoc = (OwnerDoc) null;
        this.copyOwnerDoc = new OwnerDoc();
        this.copyOwnerDoc = (OwnerDoc) this.dgvOwnerDoc.CurrentRow.DataBoundItem;
      }
      if (this.tcntrl.SelectedTab != this.tpAbsence || this.dgvAbsence.Rows.Count <= 0)
        return;
      this.session.Clear();
      this.copyAbsence = (LsAbsence) null;
      this.copyAbsence = new LsAbsence();
      this.copyAbsence = (LsAbsence) this.dgvAbsence.CurrentRow.DataBoundItem;
    }

    private void TsmiInsertRecord_Click(object sender, EventArgs e)
    {
      this.session = Kvartplata.Domain.CurrentSession;
      this.InsertRecord = true;
      if (this.tcntrl.SelectedTab == this.tpOwners && this.copyOwnerDoc != null)
      {
        OwnerDoc copyOwnerDoc = this.copyOwnerDoc;
        Owner dataBoundItem = (Owner) this.dgvOwners.CurrentRow.DataBoundItem;
        copyOwnerDoc.Owner = dataBoundItem;
        copyOwnerDoc.Number = "";
        IList<OwnerDoc> ownerDocList = (IList<OwnerDoc>) new List<OwnerDoc>();
        if ((uint) this.dgvOwnerDoc.Rows.Count > 0U)
          ownerDocList = (IList<OwnerDoc>) (this.dgvOwnerDoc.DataSource as List<OwnerDoc>);
        ownerDocList.Add(copyOwnerDoc);
        this.dgvOwnerDoc.Columns.Clear();
        this.dgvOwnerDoc.DataSource = (object) null;
        this.dgvOwnerDoc.DataSource = (object) ownerDocList;
        this.SetViewOwnerDoc();
        this.dgvOwnerDoc.CurrentCell = this.dgvOwnerDoc.Rows[this.dgvOwnerDoc.Rows.Count - 1].Cells[0];
        this.SaveOwnerDoc();
        this.LoadOwnerDoc();
      }
      if (this.tcntrl.SelectedTab == this.tpAbsence && this.copyAbsence != null)
      {
        if (!Kvartplata.Classes.KvrplHelper.CheckProxy(44, 2, this.Client.Company, true))
          return;
        LsAbsence lsAbsence = new LsAbsence();
        lsAbsence.Absence = this.copyAbsence.Absence;
        lsAbsence.DBeg = this.copyAbsence.DBeg;
        lsAbsence.DEnd = this.copyAbsence.DEnd;
        lsAbsence.Document = this.copyAbsence.Document;
        lsAbsence.LsClient = this.Client;
        lsAbsence.Period = this.copyAbsence.Period;
        lsAbsence.Person = this.copyAbsence.Person;
        lsAbsence.OnOff = this.copyAbsence.OnOff;
        IList<LsAbsence> lsAbsenceList = (IList<LsAbsence>) new List<LsAbsence>();
        if ((uint) this.dgvAbsence.Rows.Count > 0U)
          lsAbsenceList = (IList<LsAbsence>) (this.dgvAbsence.DataSource as List<LsAbsence>);
        lsAbsenceList.Add(lsAbsence);
        this.dgvAbsence.Columns.Clear();
        this.dgvAbsence.DataSource = (object) null;
        this.dgvAbsence.DataSource = (object) lsAbsenceList;
        this.SetViewAbsence();
        this.dgvAbsence.CurrentCell = this.dgvAbsence.Rows[this.dgvAbsence.Rows.Count - 1].Cells[0];
      }
      this.session.Clear();
    }

    private void dgvOwnerDoc_CellMouseDown(object sender, DataGridViewCellMouseEventArgs e)
    {
      if (e == null || e.RowIndex == -1 || e.ColumnIndex == -1)
        return;
      this.dgvOwnerDoc.Rows[e.RowIndex].Selected = true;
      this.dgvOwnerDoc.CurrentCell = this.dgvOwnerDoc.Rows[e.RowIndex].Cells[e.ColumnIndex];
    }

    private void dgvOwnerDoc_CellClick(object sender, DataGridViewCellEventArgs e)
    {
      this.btnSaveOwner.Enabled = false;
      this.btnSave.Enabled = true;
    }

    private void dgvOwnerDoc_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
    {
      if (((DataGridView) sender).DataSource == null)
        return;
      DataGridViewRow row = ((DataGridView) sender).Rows[e.RowIndex];
      if ((int) ((OwnerDoc) row.DataBoundItem).Archive.YesNoId == 0)
        row.DefaultCellStyle.BackColor = Color.PapayaWhip;
      else
        row.DefaultCellStyle.ForeColor = Color.Gray;
    }

    private void dgvOwnerDoc_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
    {
      this.btnAddRecord.Enabled = false;
      this.btnSave.Enabled = true;
    }

    private void LoadQuality()
    {
      this.Cursor = Cursors.WaitCursor;
      this.btnAddRecord.Enabled = true;
      this.btnDelRecord.Enabled = true;
      this.btnSave.Enabled = false;
      this.tsbMultiPastTime.Enabled = false;
      this.chbArhiv.Enabled = true;
      this.chbArhiv.Visible = true;
      this.session = Kvartplata.Domain.CurrentSession;
      this.dgvQuality.Columns.Clear();
      this.dgvQuality.DataSource = (object) null;
      IList<LsQuality> lsQualityList = (IList<LsQuality>) new List<LsQuality>();
      this.dgvQuality.DataSource = this.chbArhiv.Checked ? (object) this.session.CreateCriteria(typeof (LsQuality)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).SetFetchMode("Quality", FetchMode.Join).AddOrder(Order.Desc("Period.PeriodId")).List<LsQuality>() : (object) this.session.CreateCriteria(typeof (LsQuality)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Period", (object) Kvartplata.Classes.Options.Period)).SetFetchMode("Quality", FetchMode.Join).List<LsQuality>();
      this.SetViewQuality();
      this.dgvQuality.Focus();
      this.InsertRecord = false;
      this.session.Clear();
      this.Cursor = Cursors.Default;
    }

    private void SetViewQuality()
    {
      IList<Kvartplata.Classes.Service> serviceList1 = this.session.CreateQuery(string.Format("select s from Service s,ServiceParam sp where sp.Service_id=s.ServiceId and s.Root=0 and s.ServiceId<>0 and sp.Company_id={0} and sp.Complex.IdFk={1} order by " + Kvartplata.Classes.Options.SortService, (object) this.Client.Company.CompanyId, (object) this.Client.Complex.IdFk)).List<Kvartplata.Classes.Service>();
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvQuality, 0, "Дата начала", "DBeg");
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvQuality, 1, "Дата окончания", "DEnd");
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvQuality, 2, (IList) serviceList1, "ServiceId", "ServiceName", "Услуга", "Service", 160, 120);
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvQuality, 3, (IList) null, (string) null, (string) null, "Составляющая", "ChildService", 160, 120);
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvQuality, 4, (IList) null, (string) null, (string) null, "Причина", "Quality", 160, 120);
      Kvartplata.Classes.KvrplHelper.AddTextBoxColumn(this.dgvQuality, 5, "Коэффициент", "Coeff", 120, true);
      this.dgvQuality.Columns["UName"].DisplayIndex = 6;
      this.dgvQuality.Columns["DEdit"].DisplayIndex = 7;
      Kvartplata.Classes.KvrplHelper.ViewEdit(this.dgvQuality);
      if (this.chbArhiv.Checked)
      {
        Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvQuality, 0, "Период", "Period");
        this.dgvQuality.Columns["Period"].ReadOnly = true;
      }
      foreach (DataGridViewRow row in (IEnumerable) this.dgvQuality.Rows)
      {
        row.Cells["DBeg"].Value = (object) ((LsQuality) row.DataBoundItem).DBeg;
        row.Cells["DEnd"].Value = (object) ((LsQuality) row.DataBoundItem).DEnd;
        if (this.chbArhiv.Checked && ((LsQuality) row.DataBoundItem).Period != null)
          row.Cells["Period"].Value = (object) this.session.Get<Kvartplata.Classes.Period>((object) ((LsQuality) row.DataBoundItem).Period.PeriodId).PeriodName.Value;
        if (((LsQuality) row.DataBoundItem).Quality != null)
        {
          Kvartplata.Classes.Service service = this.session.Get<Kvartplata.Classes.Service>((object) ((LsQuality) row.DataBoundItem).Quality.Service_id);
          IList<Kvartplata.Classes.Service> serviceList2 = (IList<Kvartplata.Classes.Service>) new List<Kvartplata.Classes.Service>();
          DataGridViewComboBoxCell viewComboBoxCell = new DataGridViewComboBoxCell();
          viewComboBoxCell.DisplayStyleForCurrentCellOnly = true;
          viewComboBoxCell.ValueMember = "ServiceId";
          viewComboBoxCell.DisplayMember = "ServiceName";
          if (serviceList1.IndexOf(service) != -1)
          {
            row.Cells["Service"].Value = (object) ((LsQuality) row.DataBoundItem).Quality.Service_id;
            IList<Kvartplata.Classes.Service> serviceList3 = this.session.CreateQuery(string.Format("select s from Service s where s.Root={0} order by " + Kvartplata.Classes.Options.SortService, (object) service.ServiceId)).List<Kvartplata.Classes.Service>();
            viewComboBoxCell.DataSource = (object) serviceList3;
            row.Cells["ChildService"] = (DataGridViewCell) viewComboBoxCell;
          }
          else
          {
            ISession session = this.session;
            string format = "select s from Service s where s.Root={0} order by " + Kvartplata.Classes.Options.SortService;
            short? root = service.Root;
            // ISSUE: variable of a boxed type
            short local1 = root.Value;
            string queryString = string.Format(format, (object) local1);
            IList<Kvartplata.Classes.Service> serviceList3 = session.CreateQuery(queryString).List<Kvartplata.Classes.Service>();
            viewComboBoxCell.DataSource = (object) serviceList3;
            row.Cells["ChildService"] = (DataGridViewCell) viewComboBoxCell;
            row.Cells["ChildService"].Value = (object) ((LsQuality) row.DataBoundItem).Quality.Service_id;
            DataGridViewCell cell = row.Cells["Service"];
            root = service.Root;
            // ISSUE: variable of a boxed type
            short local2 = root.Value;
            cell.Value = (object) local2;
          }
          IList<Quality> qualityList = this.session.CreateCriteria(typeof (Quality)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Service_id", (object) ((LsQuality) row.DataBoundItem).Quality.Service_id)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Company_id", (object) this.Client.Company.CompanyId)).List<Quality>();
          row.Cells["Quality"] = (DataGridViewCell) new DataGridViewComboBoxCell()
          {
            DisplayStyleForCurrentCellOnly = true,
            ValueMember = "Quality_id",
            DisplayMember = "Quality_name",
            DataSource = (object) qualityList
          };
          row.Cells["Quality"].Value = (object) ((LsQuality) row.DataBoundItem).Quality.Quality_id;
          row.Cells["Coeff"].Value = (object) ((LsQuality) row.DataBoundItem).Quality.Coeff;
        }
      }
    }

    private void InsertQuality()
    {
      this.btnDelRecord.Enabled = false;
      this.btnSave.Enabled = true;
      LsQuality lsQuality1 = new LsQuality();
      lsQuality1.LsClient = this.Client;
      lsQuality1.Period = Kvartplata.Classes.Options.Period;
      lsQuality1.IsEdit = true;
      lsQuality1.DBeg = !(this.MonthClosed.PeriodName.Value.AddMonths(1) <= Kvartplata.Classes.Options.Period.PeriodName.Value) ? this.MonthClosed.PeriodName.Value.AddMonths(1) : Kvartplata.Classes.Options.Period.PeriodName.Value;
      LsQuality lsQuality2 = lsQuality1;
      DateTime dateTime = lsQuality1.DBeg;
      dateTime = dateTime.AddMonths(1);
      DateTime? nullable = new DateTime?(dateTime.AddDays(-1.0));
      lsQuality2.DEnd = nullable;
      IList<LsQuality> lsQualityList = (IList<LsQuality>) new List<LsQuality>();
      if ((uint) this.dgvQuality.Rows.Count > 0U)
        lsQualityList = (IList<LsQuality>) (this.dgvQuality.DataSource as List<LsQuality>);
      lsQualityList.Add(lsQuality1);
      this.dgvQuality.Columns.Clear();
      this.dgvQuality.DataSource = (object) null;
      this.dgvQuality.DataSource = (object) lsQualityList;
      this.SetViewQuality();
      this.dgvQuality.CurrentCell = this.dgvQuality.Rows[this.dgvQuality.Rows.Count - 1].Cells[0];
    }

    private void SaveAllQuality()
    {
      bool flag = false;
      foreach (DataGridViewRow row in (IEnumerable) this.dgvQuality.Rows)
      {
        this.dgvQuality.CurrentCell = row.Cells["DBeg"];
        row.Selected = true;
        if (((LsQuality) row.DataBoundItem).IsEdit && !this.SaveQuality())
          flag = true;
        ((LsQuality) row.DataBoundItem).IsEdit = false;
      }
      this.btnAddRecord.Enabled = true;
      this.btnDelRecord.Enabled = true;
      this.btnSave.Enabled = false;
      if (flag)
        return;
      this.LoadQuality();
    }

    private bool SaveQuality()
    {
      if (this.dgvQuality.Rows.Count > 0 && this.dgvQuality.CurrentRow.Index >= 0)
      {
        this.session = Kvartplata.Domain.CurrentSession;
        LsQuality dataBoundItem = (LsQuality) this.dgvQuality.CurrentRow.DataBoundItem;
        this.InsertRecord = dataBoundItem.UName == null;
        if (dataBoundItem.Period.PeriodId <= this.MonthClosed.PeriodId)
        {
          int num = (int) MessageBox.Show("Невозможно внести запись в закрытый месяц", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          return false;
        }
        if (this.dgvQuality.CurrentRow.Cells["Quality"].Value == null)
        {
          int num = (int) MessageBox.Show("Введите причину", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          return false;
        }
        Quality quality1 = this.session.Get<Quality>(this.dgvQuality.CurrentRow.Cells["Quality"].Value);
        dataBoundItem.Quality = quality1;
        try
        {
          dataBoundItem.DBeg = Convert.ToDateTime(this.dgvQuality.CurrentRow.Cells["DBeg"].Value);
          dataBoundItem.DEnd = new DateTime?(Convert.ToDateTime(this.dgvQuality.CurrentRow.Cells["DEnd"].Value));
        }
        catch
        {
          int num = (int) MessageBox.Show("Проверьте правильность введенных дат", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          return false;
        }
        dataBoundItem.UName = Kvartplata.Classes.Options.Login;
        LsQuality lsQuality = dataBoundItem;
        DateTime dateTime1 = DateTime.Now;
        DateTime date = dateTime1.Date;
        lsQuality.DEdit = date;
        DateTime? nullable = dataBoundItem.DEnd;
        dateTime1 = Kvartplata.Classes.Options.Period.PeriodName.Value.AddMonths(1);
        if (nullable.HasValue && nullable.GetValueOrDefault() >= dateTime1)
        {
          int num = (int) MessageBox.Show("Невозможно внести запись c датами более текущего месяца", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          return false;
        }
        dateTime1 = dataBoundItem.DBeg;
        nullable = dataBoundItem.DEnd;
        if (nullable.HasValue && dateTime1 > nullable.GetValueOrDefault())
        {
          int num = (int) MessageBox.Show("Дата начала больше даты окончания", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          return false;
        }
        DateTime dbeg1 = dataBoundItem.DBeg;
        dateTime1 = DateTime.Now;
        DateTime dateTime2 = dateTime1.AddYears(-3);
        int num1;
        if (!(dbeg1 <= dateTime2))
        {
          DateTime dbeg2 = dataBoundItem.DBeg;
          dateTime1 = DateTime.Now;
          DateTime dateTime3 = dateTime1.AddYears(3);
          num1 = dbeg2 >= dateTime3 ? 1 : 0;
        }
        else
          num1 = 1;
        if (num1 != 0 && MessageBox.Show("Дата начала отличается от текущей более, чем на 3 года. Продолжить", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.Cancel)
          return false;
        try
        {
          if (this.InsertRecord)
          {
            this.session.Save((object) dataBoundItem);
          }
          else
          {
            IList<LsQuality> lsQualityList = (IList<LsQuality>) new List<LsQuality>();
            this.oldQuality = this.session.CreateCriteria(typeof (LsQuality)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Period", (object) Kvartplata.Classes.Options.Period)).List<LsQuality>()[this.dgvQuality.CurrentRow.Index];
            IQuery query = this.session.GetNamedQuery("UpdateQuality").SetDateTime("dbeg1", dataBoundItem.DBeg);
            string name = "dend";
            nullable = dataBoundItem.DEnd;
            DateTime val = nullable.Value;
            query.SetDateTime(name, val).SetParameter<Quality>("quality1", dataBoundItem.Quality).SetParameter<string>("uname", dataBoundItem.UName).SetParameter<DateTime>("dedit", dataBoundItem.DEdit).SetDateTime("dbeg2", this.oldQuality.DBeg).SetEntity("client", (object) this.Client).SetEntity("period", (object) this.oldQuality.Period).SetEntity("quality2", (object) this.oldQuality.Quality).ExecuteUpdate();
          }
          this.session.Flush();
          if (Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(32, this.Client.Company)) == 1)
          {
            if (this.InsertRecord)
            {
              LsQuality quality2 = dataBoundItem;
              LsQuality oldQuality = this.oldQuality;
              Kvartplata.Classes.LsClient client = this.Client;
              int num2 = 1;
              nullable = this.MonthClosed.PeriodName;
              DateTime monthClosed = nullable.Value;
              Kvartplata.Classes.KvrplHelper.SaveQualityToNoteBook(quality2, oldQuality, client, (short) num2, monthClosed);
            }
            else
            {
              LsQuality quality2 = dataBoundItem;
              LsQuality oldQuality = this.oldQuality;
              Kvartplata.Classes.LsClient client = this.Client;
              int num2 = 2;
              nullable = this.MonthClosed.PeriodName;
              DateTime monthClosed = nullable.Value;
              Kvartplata.Classes.KvrplHelper.SaveQualityToNoteBook(quality2, oldQuality, client, (short) num2, monthClosed);
            }
          }
        }
        catch (Exception ex)
        {
          int num2 = (int) MessageBox.Show("Невозможно сохранить изменения", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
          return false;
        }
        this.session.Clear();
      }
      return true;
    }

    private void DelQuality()
    {
      if (this.dgvQuality.Rows.Count <= 0 || this.dgvQuality.CurrentRow == null || this.dgvQuality.CurrentRow.Index < 0)
        return;
      this.session = Kvartplata.Domain.CurrentSession;
      LsQuality dataBoundItem = (LsQuality) this.dgvQuality.CurrentRow.DataBoundItem;
      if (MessageBox.Show("Вы уверены, что хотите удалить запись", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
      {
        if (dataBoundItem.Period.PeriodId <= this.MonthClosed.PeriodId)
        {
          int num1 = (int) MessageBox.Show("Запись принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
        else
        {
          try
          {
            this.session.Delete((object) dataBoundItem);
            this.session.Flush();
            if (Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(32, this.Client.Company)) == 1)
              Kvartplata.Classes.KvrplHelper.DeleteQualityFromNoteBook(dataBoundItem, this.Client, (short) 3, this.MonthClosed.PeriodName.Value);
          }
          catch (Exception ex)
          {
            int num2 = (int) MessageBox.Show("Невозможно удалить запись", "Ошибка", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
            Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
          }
          this.session.Clear();
          this.LoadQuality();
        }
      }
    }

    private void dgvQuality_CurrentCellDirtyStateChanged(object sender, EventArgs e)
    {
      if (!this.dgvQuality.IsCurrentCellDirty)
        return;
      this.dgvQuality.CommitEdit(DataGridViewDataErrorContexts.Commit);
      if (this.dgvQuality.CurrentCell.ColumnIndex == this.dgvQuality.Rows[this.dgvQuality.CurrentRow.Index].Cells["Service"].ColumnIndex)
      {
        this.session = Kvartplata.Domain.CurrentSession;
        IList<Quality> qualityList = this.session.CreateCriteria(typeof (Quality)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Service_id", this.dgvQuality.CurrentRow.Cells["Service"].Value)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Company_id", (object) this.Client.Company.CompanyId)).List<Quality>();
        this.session.Clear();
        this.dgvQuality.CurrentRow.Cells["Quality"] = (DataGridViewCell) new DataGridViewComboBoxCell()
        {
          DisplayStyleForCurrentCellOnly = true,
          ValueMember = "Quality_id",
          DisplayMember = "Quality_name",
          DataSource = (object) qualityList
        };
        this.dgvQuality.CurrentRow.Cells["Coeff"].Value = (object) null;
        IList<Kvartplata.Classes.Service> serviceList = this.session.CreateQuery(string.Format("select s from Service s where s.Root={0} order by " + Kvartplata.Classes.Options.SortService, this.dgvQuality.CurrentRow.Cells["Service"].Value)).List<Kvartplata.Classes.Service>();
        this.dgvQuality.CurrentRow.Cells["ChildService"] = (DataGridViewCell) new DataGridViewComboBoxCell()
        {
          DisplayStyleForCurrentCellOnly = true,
          ValueMember = "ServiceId",
          DisplayMember = "ServiceName",
          DataSource = (object) serviceList
        };
      }
      if (this.dgvQuality.CurrentCell.ColumnIndex == this.dgvQuality.Rows[this.dgvQuality.CurrentRow.Index].Cells["ChildService"].ColumnIndex)
      {
        this.session = Kvartplata.Domain.CurrentSession;
        IList<Quality> qualityList = this.session.CreateCriteria(typeof (Quality)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Service_id", this.dgvQuality.CurrentRow.Cells["ChildService"].Value)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Company_id", (object) this.Client.Company.CompanyId)).List<Quality>();
        this.session.Clear();
        this.dgvQuality.CurrentRow.Cells["Quality"] = (DataGridViewCell) new DataGridViewComboBoxCell()
        {
          DisplayStyleForCurrentCellOnly = true,
          ValueMember = "Quality_id",
          DisplayMember = "Quality_name",
          DataSource = (object) qualityList
        };
        this.dgvQuality.CurrentRow.Cells["Coeff"].Value = (object) null;
      }
      if (this.dgvQuality.CurrentCell.ColumnIndex == this.dgvQuality.Rows[this.dgvQuality.CurrentRow.Index].Cells["Quality"].ColumnIndex)
      {
        this.session = Kvartplata.Domain.CurrentSession;
        Quality quality = this.session.Get<Quality>(this.dgvQuality.CurrentRow.Cells["Quality"].Value);
        this.session.Clear();
        this.dgvQuality.CurrentRow.Cells["Coeff"].Value = (object) quality.Coeff;
      }
    }

    private void dgvQuality_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
    {
      this.btnSave.Enabled = true;
      ((LsQuality) this.dgvQuality.CurrentRow.DataBoundItem).IsEdit = true;
    }

    private void dgvQuality_CellEndEdit(object sender, DataGridViewCellEventArgs e)
    {
      this.session.Clear();
      LsQuality dataBoundItem = (LsQuality) this.dgvQuality.CurrentRow.DataBoundItem;
      dataBoundItem.IsEdit = true;
      if (this.dgvQuality.CurrentCell.Value == null)
        return;
      try
      {
        string name = this.dgvQuality.Columns[e.ColumnIndex].Name;
        if (!(name == "Quality"))
        {
          if (!(name == "DBeg"))
          {
            if (name == "DEnd")
            {
              try
              {
                dataBoundItem.DEnd = new DateTime?(Convert.ToDateTime(this.dgvQuality.CurrentRow.Cells["DEnd"].Value));
              }
              catch
              {
              }
            }
          }
          else
          {
            try
            {
              dataBoundItem.DBeg = Convert.ToDateTime(this.dgvQuality.CurrentRow.Cells["DBeg"].Value);
            }
            catch
            {
            }
          }
        }
        else
          dataBoundItem.Quality = this.session.Get<Quality>(this.dgvQuality.CurrentRow.Cells["Quality"].Value);
      }
      catch (Exception ex)
      {
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
      }
    }

    private void LoadAbsence()
    {
      this.btnSave.Enabled = false;
      this.btnAddRecord.Enabled = true;
      this.btnDelRecord.Enabled = true;
      this.tsbMultiPastTime.Enabled = false;
      this.chbArhiv.Enabled = true;
      this.chbArhiv.Visible = true;
      this.session = Kvartplata.Domain.CurrentSession;
      this.dgvAbsence.Columns.Clear();
      this.dgvAbsence.DataSource = (object) null;
      IList<LsAbsence> lsAbsenceList = (IList<LsAbsence>) new List<LsAbsence>();
      ICriteria criteria = !this.chbArhiv.Checked ? this.session.CreateCriteria(typeof (LsAbsence)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Period", (object) Kvartplata.Classes.Options.Period)) : this.session.CreateCriteria(typeof (LsAbsence)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).AddOrder(Order.Desc("Period"));
      this.session.CreateQuery("select distinct ls from LsAbsence ls where ls.LsClient=:cli and ls.Period=:per").SetParameter<Kvartplata.Classes.LsClient>("cli", this.Client).SetParameter<Kvartplata.Classes.Period>("per", Kvartplata.Classes.Options.Period).List<LsAbsence>();
      this.dgvAbsence.DataSource = (object) criteria.List<LsAbsence>();
      this.session.Clear();
      this.oldListAbsence = (IList<LsAbsence>) new List<LsAbsence>();
      this.oldListAbsence = criteria.List<LsAbsence>();
      int index = 0;
      foreach (LsAbsence lsAbsence in (List<LsAbsence>) this.dgvAbsence.DataSource)
      {
        lsAbsence.OldHashCode = lsAbsence.GetHashCode();
        lsAbsence.IsEdit = false;
        this.oldListAbsence[index].OldHashCode = lsAbsence.OldHashCode;
        ++index;
      }
      this.MySettingsLsAbs.GridName = "LsAbs";
      this.SetViewAbsence();
      this.dgvAbsence.Focus();
      this.InsertRecord = false;
      this.session.Clear();
    }

    private void LoadSettingsLsAbs()
    {
      this.MySettingsLsAbs.Load();
      foreach (DataGridViewColumn column in (BaseCollection) this.dgvAbsence.Columns)
        this.MySettingsLsAbs.GetMySettings(column);
    }

    private void dgvAbsence_ColumnWidthChanged(object sender, DataGridViewColumnEventArgs e)
    {
      if (this.MySettingsLsAbs.FindByName(e.Column.Name) < 0)
        return;
      this.MySettingsLsAbs.Columns[this.MySettingsLsAbs.FindByName(e.Column.Name)].Width = e.Column.Width;
      this.MySettingsLsAbs.Save();
    }

    private void SetViewAbsence()
    {
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvAbsence, 0, "Дата начала", "DBeg");
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvAbsence, 1, "Дата окончания", "DEnd");
      IList<Person> personList = this.session.CreateCriteria(typeof (Person)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).Add((ICriterion) NHibernate.Criterion.Restrictions.In("Reg.RegId", (ICollection) new int[2]{ 1, 2 })).Add((ICriterion) NHibernate.Criterion.Restrictions.Or((ICriterion) NHibernate.Criterion.Restrictions.Lt("Archive", (object) 3), (ICriterion) NHibernate.Criterion.Restrictions.Eq("Archive", (object) 5))).AddOrder(Order.Asc("Archive")).AddOrder(Order.Asc("Relation.RelationId")).List<Person>();
      foreach (Person person in (IEnumerable<Person>) personList)
      {
        Kvartplata.Classes.KvrplHelper.GetFamily(person, 1, false);
        person.Family = Kvartplata.Classes.KvrplHelper.FioOut(person.Name, person.LastName, person.Family, person.OutToDate, person.BornDate);
      }
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvAbsence, 2, (IList) personList, "PersonId", "Family", "ФИО жильца", "Person", 320, 220);
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvAbsence, 3, (IList) this.session.CreateCriteria(typeof (Absence)).List<Absence>(), "Absence_id", "Absence_name", "Причина", "Absence", 200, 150);
      this.dgvAbsence.Columns["Document"].HeaderText = "Документ";
      this.dgvAbsence.Columns["Document"].DisplayIndex = 4;
      this.dgvAbsence.Columns["Document"].Width = 250;
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvAbsence, 5, (IList) this.session.CreateCriteria(typeof (YesNo)).List<YesNo>(), "YesNoId", "YesNoName", "Действует", "OnOff", 100, 100);
      this.dgvAbsence.Columns["UName"].DisplayIndex = 6;
      this.dgvAbsence.Columns["DEdit"].DisplayIndex = 7;
      Kvartplata.Classes.KvrplHelper.ViewEdit(this.dgvAbsence);
      if (this.chbArhiv.Checked)
      {
        Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvAbsence, 0, "Период", "Period");
        this.dgvAbsence.Columns["Period"].ReadOnly = true;
      }
      foreach (DataGridViewRow row in (IEnumerable) this.dgvAbsence.Rows)
      {
        row.Cells["DBeg"].Value = (object) ((LsAbsence) row.DataBoundItem).DBeg;
        row.Cells["DEnd"].Value = (object) ((LsAbsence) row.DataBoundItem).DEnd;
        if (((LsAbsence) row.DataBoundItem).Absence != null)
          row.Cells["Absence"].Value = (object) ((LsAbsence) row.DataBoundItem).Absence.Absence_id;
        if (((LsAbsence) row.DataBoundItem).Person != null && ((LsAbsence) row.DataBoundItem).Person != null)
          row.Cells["Person"].Value = (object) ((LsAbsence) row.DataBoundItem).Person.PersonId;
        if (this.chbArhiv.Checked && ((LsAbsence) row.DataBoundItem).Period != null)
          row.Cells["Period"].Value = (object) this.session.Get<Kvartplata.Classes.Period>((object) ((LsAbsence) row.DataBoundItem).Period.PeriodId).PeriodName.Value;
        if (((LsAbsence) row.DataBoundItem).OnOff != null)
          row.Cells["OnOff"].Value = (object) ((LsAbsence) row.DataBoundItem).OnOff.YesNoId;
      }
      this.LoadSettingsLsAbs();
    }

    private void InsertAbsence()
    {
      this.btnSave.Enabled = true;
      this.btnDelRecord.Enabled = false;
      LsAbsence lsAbsence = new LsAbsence();
      lsAbsence.LsClient = this.Client;
      lsAbsence.Period = Kvartplata.Classes.Options.Period;
      lsAbsence.OnOff = this.session.Get<YesNo>((object) Convert.ToInt16(1));
      IList<LsAbsence> lsAbsenceList = (IList<LsAbsence>) new List<LsAbsence>();
      if ((uint) this.dgvAbsence.Rows.Count > 0U)
        lsAbsenceList = (IList<LsAbsence>) (this.dgvAbsence.DataSource as List<LsAbsence>);
      lsAbsenceList.Add(lsAbsence);
      this.dgvAbsence.Columns.Clear();
      this.dgvAbsence.DataSource = (object) null;
      this.dgvAbsence.DataSource = (object) lsAbsenceList;
      this.SetViewAbsence();
      this.dgvAbsence.CurrentCell = this.dgvAbsence.Rows[this.dgvAbsence.Rows.Count - 1].Cells[0];
    }

    private void SaveAllAbsence()
    {
      bool flag = false;
      foreach (DataGridViewRow row in (IEnumerable) this.dgvAbsence.Rows)
      {
        this.dgvAbsence.CurrentCell = row.Cells["DBeg"];
        row.Selected = true;
        if (((LsAbsence) row.DataBoundItem).IsEdit)
        {
          this.oldAbsence = new LsAbsence();
          foreach (LsAbsence lsAbsence in (IEnumerable<LsAbsence>) this.oldListAbsence)
          {
            if (lsAbsence.OldHashCode == ((LsAbsence) row.DataBoundItem).OldHashCode)
            {
              this.oldAbsence = lsAbsence;
              break;
            }
          }
          if (!this.SaveAbsence())
            flag = true;
        }
        ((LsAbsence) row.DataBoundItem).IsEdit = false;
      }
      if (flag)
        return;
      this.LoadAbsence();
    }

    private bool SaveAbsence()
    {
      LsAbsence dataBoundItem = (LsAbsence) this.dgvAbsence.CurrentRow.DataBoundItem;
      this.InsertRecord = dataBoundItem.UName == null;
      if (this.dgvAbsence.CurrentRow.Cells["DBeg"].Value == null || this.dgvAbsence.CurrentRow.Cells["DEnd"].Value == null)
      {
        int num = (int) MessageBox.Show("Введите дату начала и окончания", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      try
      {
        dataBoundItem.DBeg = new DateTime?(Convert.ToDateTime(this.dgvAbsence.CurrentRow.Cells["DBeg"].Value));
        dataBoundItem.DEnd = new DateTime?(Convert.ToDateTime(this.dgvAbsence.CurrentRow.Cells["DEnd"].Value));
      }
      catch
      {
        int num = (int) MessageBox.Show("Некорректно введены даты", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      if (this.dgvAbsence.CurrentRow.Cells["Person"].Value == null)
      {
        int num = (int) MessageBox.Show("Выберите жильца из списка", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      if (this.dgvAbsence.CurrentRow.Cells["Absence"].Value == null)
      {
        int num = (int) MessageBox.Show("Выберите причину отсутствия из списка", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      if (this.dgvAbsence.CurrentRow.Cells["Document"].Value == null)
        dataBoundItem.Document = "";
      DateTime? nullable1 = dataBoundItem.DBeg;
      DateTime? nullable2 = dataBoundItem.DEnd;
      if (nullable1.HasValue & nullable2.HasValue && nullable1.GetValueOrDefault() > nullable2.GetValueOrDefault())
      {
        int num = (int) MessageBox.Show("Дата начала больше даты окончания", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      if (dataBoundItem.Period.PeriodId <= this.MonthClosed.PeriodId)
      {
        int num = (int) MessageBox.Show("Невозможно внести запись в закрытом месяце", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      nullable2 = dataBoundItem.DBeg;
      DateTime dateTime1 = DateTime.Now.AddYears(-3);
      int num1;
      if ((nullable2.HasValue ? (nullable2.GetValueOrDefault() <= dateTime1 ? 1 : 0) : 0) == 0)
      {
        nullable2 = dataBoundItem.DBeg;
        DateTime dateTime2 = DateTime.Now.AddYears(3);
        num1 = nullable2.HasValue ? (nullable2.GetValueOrDefault() >= dateTime2 ? 1 : 0) : 0;
      }
      else
        num1 = 1;
      if (num1 != 0 && MessageBox.Show("Дата начала отличается от текущей более, чем на 3 года. Продолжить", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.Cancel)
        return false;
      this.session = Kvartplata.Domain.CurrentSession;
      Person person = this.session.Get<Person>(this.dgvAbsence.CurrentRow.Cells["Person"].Value);
      dataBoundItem.Person = person;
      this.session.Clear();
      Absence absence = this.session.Get<Absence>(this.dgvAbsence.CurrentRow.Cells["Absence"].Value);
      dataBoundItem.Absence = absence;
      dataBoundItem.OnOff = this.session.Get<YesNo>(this.dgvAbsence.CurrentRow.Cells["OnOff"].Value);
      dataBoundItem.Motive = this.GetMotive();
      IList<LsAbsence> lsAbsenceList1 = (IList<LsAbsence>) new List<LsAbsence>();
      if ((int) dataBoundItem.OnOff.YesNoId == 1)
      {
        ISession session1 = this.session;
        string format1 = "from LsAbsence abs where LsClient.ClientId={0} and Person.PersonId={1} and DBeg<='{2}' and DEnd>='{3}' and OnOff.YesNoId=1 and Absence.Absence_id={4}";
        object[] objArray1 = new object[5];
        objArray1[0] = (object) this.Client.ClientId;
        objArray1[1] = (object) person.PersonId;
        int index1 = 2;
        nullable2 = dataBoundItem.DEnd;
        string baseFormat1 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(nullable2.Value);
        objArray1[index1] = (object) baseFormat1;
        int index2 = 3;
        nullable2 = dataBoundItem.DBeg;
        string baseFormat2 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(nullable2.Value);
        objArray1[index2] = (object) baseFormat2;
        int index3 = 4;
        // ISSUE: variable of a boxed type
        short absenceId1 = absence.Absence_id;
        objArray1[index3] = (object) absenceId1;
        string queryString1 = string.Format(format1, objArray1);
        IList<LsAbsence> lsAbsenceList2 = session1.CreateQuery(queryString1).List<LsAbsence>();
        if (lsAbsenceList2.Count > 1 && !this.InsertRecord || lsAbsenceList2.Count > 0 && this.InsertRecord)
        {
          if (MessageBox.Show("Обратите внимание! На данного жильца уже заведено отсутствие за данный период по выбранной причине. Продолжить?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.Cancel)
          {
            this.session.Clear();
            return false;
          }
        }
        else
        {
          ISession session2 = this.session;
          string format2 = "from LsAbsence abs where LsClient.ClientId={0} and Person.PersonId={1} and DBeg<='{2}' and DEnd>='{3}' and OnOff.YesNoId=1 and Absence.Absence_id<>{4}";
          object[] objArray2 = new object[5];
          objArray2[0] = (object) this.Client.ClientId;
          objArray2[1] = (object) person.PersonId;
          int index4 = 2;
          nullable2 = dataBoundItem.DEnd;
          string baseFormat3 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(nullable2.Value);
          objArray2[index4] = (object) baseFormat3;
          int index5 = 3;
          nullable2 = dataBoundItem.DBeg;
          string baseFormat4 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(nullable2.Value);
          objArray2[index5] = (object) baseFormat4;
          int index6 = 4;
          // ISSUE: variable of a boxed type
          short absenceId2 = absence.Absence_id;
          objArray2[index6] = (object) absenceId2;
          string queryString2 = string.Format(format2, objArray2);
          IList<LsAbsence> lsAbsenceList3 = session2.CreateQuery(queryString2).List<LsAbsence>();
          if ((lsAbsenceList3.Count > 1 && !this.InsertRecord || lsAbsenceList3.Count > 0 && this.InsertRecord) && MessageBox.Show("Обратите внимание! На данного жильца уже заведено отсутствие за данный период по другой причине. Продолжить?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.Cancel)
          {
            this.session.Clear();
            return true;
          }
        }
      }
      ISession session = this.session;
      string format = "from CompanyParam c where c.Param.ParamId = 202 and c.Company.CompanyId={0} and DBeg<='{1}' and DEnd>'{1}'";
      // ISSUE: variable of a boxed type
      short companyId = this.Client.Company.CompanyId;
      nullable2 = Kvartplata.Classes.Options.Period.PeriodName;
      string baseFormat = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(nullable2.Value);
      string queryString = string.Format(format, (object) companyId, (object) baseFormat);
      int num2;
      if (session.CreateQuery(queryString).List<CompanyParam>().Count > 0)
      {
        nullable2 = dataBoundItem.DBeg;
        nullable1 = person.FirstPropDate;
        if ((nullable2.HasValue & nullable1.HasValue ? (nullable2.GetValueOrDefault() < nullable1.GetValueOrDefault() ? 1 : 0) : 0) == 0)
        {
          nullable1 = dataBoundItem.DEnd;
          nullable2 = person.OutToDate;
          num2 = nullable1.HasValue & nullable2.HasValue ? (nullable1.GetValueOrDefault() > nullable2.GetValueOrDefault() ? 1 : 0) : 0;
        }
        else
          num2 = 1;
      }
      else
        num2 = 0;
      if (num2 != 0)
      {
        int num3 = (int) MessageBox.Show("Данный жилец не был зарегистрирован в указанном периоде", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        this.session.Clear();
        return false;
      }
      dataBoundItem.UName = Kvartplata.Classes.Options.Login;
      dataBoundItem.DEdit = DateTime.Now.Date;
      nullable2 = dataBoundItem.DEnd;
      nullable1 = Kvartplata.Classes.Options.Period.PeriodName;
      DateTime dateTime3 = nullable1.Value;
      DateTime dateTime4 = dateTime3.AddMonths(1);
      DateTime dateTime5;
      if (nullable2.HasValue && nullable2.GetValueOrDefault() >= dateTime4)
      {
        bool flag = true;
        nullable2 = Kvartplata.Classes.Options.Period.PeriodName;
        DateTime dateTime2 = nullable2.Value.AddMonths(1);
        if (MessageBox.Show("Дата окончания превышает расчетный период. Разнести время отсутствия в будущие периоды?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
        {
          while (flag)
          {
            LsAbsence lsAbsence1 = new LsAbsence();
            lsAbsence1.Absence = absence;
            lsAbsence1.LsClient = this.Client;
            lsAbsence1.Person = person;
            lsAbsence1.Document = dataBoundItem.Document;
            lsAbsence1.DBeg = new DateTime?(dateTime2);
            IList<Kvartplata.Classes.Period> periodList = this.session.CreateCriteria(typeof (Kvartplata.Classes.Period)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("PeriodName", (object) dateTime2)).List<Kvartplata.Classes.Period>();
            lsAbsence1.Period = periodList[0];
            lsAbsence1.Motive = dataBoundItem.Motive;
            lsAbsence1.UName = Kvartplata.Classes.Options.Login;
            lsAbsence1.DEdit = DateTime.Now;
            lsAbsence1.OnOff = this.session.Get<YesNo>((object) Convert.ToInt16(1));
            nullable2 = dataBoundItem.DEnd;
            dateTime5 = dateTime2.AddMonths(1);
            if (nullable2.HasValue && nullable2.GetValueOrDefault() >= dateTime5)
            {
              LsAbsence lsAbsence2 = lsAbsence1;
              dateTime5 = dateTime2.AddMonths(1);
              DateTime? nullable3 = new DateTime?(dateTime5.AddDays(-1.0));
              lsAbsence2.DEnd = nullable3;
              dateTime2 = dateTime2.AddMonths(1);
            }
            else
            {
              lsAbsence1.DEnd = dataBoundItem.DEnd;
              nullable2 = dataBoundItem.DBeg;
              nullable1 = Kvartplata.Classes.Options.Period.PeriodName;
              dateTime3 = nullable1.Value;
              dateTime5 = dateTime3.AddMonths(1);
              if (nullable2.HasValue && nullable2.GetValueOrDefault() < dateTime5)
              {
                LsAbsence lsAbsence2 = dataBoundItem;
                nullable2 = Kvartplata.Classes.Options.Period.PeriodName;
                dateTime5 = nullable2.Value;
                dateTime5 = dateTime5.AddMonths(1);
                DateTime? nullable3 = new DateTime?(dateTime5.AddDays(-1.0));
                lsAbsence2.DEnd = nullable3;
              }
              flag = false;
            }
            this.session.Save((object) lsAbsence1);
          }
        }
        else
        {
          LsAbsence lsAbsence = dataBoundItem;
          nullable2 = Kvartplata.Classes.Options.Period.PeriodName;
          dateTime5 = nullable2.Value;
          dateTime5 = dateTime5.AddMonths(1);
          DateTime? nullable3 = new DateTime?(dateTime5.AddDays(-1.0));
          lsAbsence.DEnd = nullable3;
        }
      }
      try
      {
        if (this.InsertRecord)
        {
          nullable2 = dataBoundItem.DBeg;
          nullable1 = Kvartplata.Classes.Options.Period.PeriodName;
          dateTime3 = nullable1.Value;
          dateTime5 = dateTime3.AddMonths(1);
          if (nullable2.HasValue && nullable2.GetValueOrDefault() < dateTime5)
            this.session.Save((object) dataBoundItem);
        }
        else
        {
          IQuery namedQuery = this.session.GetNamedQuery("UpdateAbsence");
          string name1 = "dbeg1";
          nullable2 = dataBoundItem.DBeg;
          DateTime val1 = nullable2.Value;
          IQuery query1 = namedQuery.SetDateTime(name1, val1);
          string name2 = "dend";
          nullable2 = dataBoundItem.DEnd;
          DateTime val2 = nullable2.Value;
          IQuery query2 = query1.SetDateTime(name2, val2).SetParameter<Absence>("abs", dataBoundItem.Absence).SetParameter<YesNo>("onoff", dataBoundItem.OnOff).SetParameter<Person>("pers1", dataBoundItem.Person).SetParameter<string>("doc", dataBoundItem.Document).SetParameter<string>("uname", dataBoundItem.UName).SetParameter<DateTime>("dedit", dataBoundItem.DEdit);
          string name3 = "dbeg2";
          nullable2 = this.oldAbsence.DBeg;
          DateTime val3 = nullable2.Value;
          query2.SetDateTime(name3, val3).SetEntity("client", (object) this.Client).SetEntity("period", (object) this.oldAbsence.Period).SetEntity("pers2", (object) this.oldAbsence.Person).SetParameter<Absence>("abs2", this.oldAbsence.Absence).ExecuteUpdate();
        }
        this.session.Flush();
        if (Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(32, this.Client.Company)) == 1)
        {
          try
          {
            short num3 = 1;
            Kvartplata.Classes.KvrplHelper.GetFamily(dataBoundItem.Person, 1, false);
            string str1 = "";
            int clientId;
            if (!this.InsertRecord)
            {
              Kvartplata.Classes.KvrplHelper.GetFamily(this.oldAbsence.Person, 1, false);
              string[] strArray = new string[8];
              strArray[0] = "На ЛС ";
              int index1 = 1;
              clientId = dataBoundItem.LsClient.ClientId;
              string str2 = clientId.ToString();
              strArray[index1] = str2;
              int index2 = 2;
              string str3 = " внесено отсутствие (";
              strArray[index2] = str3;
              int index3 = 3;
              string absenceName = this.oldAbsence.Absence.Absence_name;
              strArray[index3] = absenceName;
              int index4 = 4;
              string str4 = ") с ";
              strArray[index4] = str4;
              int index5 = 5;
              nullable2 = this.oldAbsence.DBeg;
              dateTime5 = nullable2.Value;
              string shortDateString1 = dateTime5.ToShortDateString();
              strArray[index5] = shortDateString1;
              int index6 = 6;
              string str5 = " по ";
              strArray[index6] = str5;
              int index7 = 7;
              nullable2 = this.oldAbsence.DEnd;
              dateTime5 = nullable2.Value;
              string shortDateString2 = dateTime5.ToShortDateString();
              strArray[index7] = shortDateString2;
              str1 = string.Concat(strArray);
              num3 = (short) 2;
            }
            Kvartplata.Classes.Company company = this.Client.Company;
            Kvartplata.Classes.Home home = this.Client.Home;
                        // ISSUE: variable of the null type
            LsClient local = null;
            int num4 = (int) num3;
            string[] strArray1 = new string[8];
            strArray1[0] = "На ЛС ";
            int index8 = 1;
            clientId = dataBoundItem.LsClient.ClientId;
            string str6 = clientId.ToString();
            strArray1[index8] = str6;
            int index9 = 2;
            string str7 = " внесено отсутствие (";
            strArray1[index9] = str7;
            int index10 = 3;
            string absenceName1 = dataBoundItem.Absence.Absence_name;
            strArray1[index10] = absenceName1;
            int index11 = 4;
            string str8 = ") с ";
            strArray1[index11] = str8;
            int index12 = 5;
            nullable2 = dataBoundItem.DBeg;
            dateTime5 = nullable2.Value;
            string shortDateString3 = dateTime5.ToShortDateString();
            strArray1[index12] = shortDateString3;
            int index13 = 6;
            string str9 = " по ";
            strArray1[index13] = str9;
            int index14 = 7;
            nullable2 = dataBoundItem.DEnd;
            dateTime5 = nullable2.Value;
            string shortDateString4 = dateTime5.ToShortDateString();
            strArray1[index14] = shortDateString4;
            string Text = string.Concat(strArray1);
            string OldText = str1;
            string document = dataBoundItem.Document;
            nullable2 = this.MonthClosed.PeriodName;
            DateTime monthClosed = nullable2.Value;
            int num5 = 0;
            Kvartplata.Classes.KvrplHelper.WriteNote(company, home, (Kvartplata.Classes.LsClient) local, (short) num4, Text, OldText, document, monthClosed, num5 != 0);
          }
          catch (Exception ex)
          {
            Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
          }
        }
      }
      catch (Exception ex)
      {
        int num3 = (int) MessageBox.Show("Невозможно сохранить изменения", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
        return false;
      }
      this.session.Clear();
      return true;
    }

    private void DelAbsence()
    {
      if (this.dgvAbsence.Rows.Count <= 0 || this.dgvAbsence.CurrentRow == null)
        return;
      this.session.Clear();
      LsAbsence dataBoundItem = (LsAbsence) this.dgvAbsence.CurrentRow.DataBoundItem;
      if (MessageBox.Show("Вы уверены, что хотите удалить запись?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
      {
        if (dataBoundItem.Period.PeriodId <= this.MonthClosed.PeriodId)
        {
          int num1 = (int) MessageBox.Show("Запись принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        }
        else
        {
          if (this.session.CreateQuery(string.Format("from LsAbsence where LsClient.ClientId={0} and Period.PeriodId>{1} and Person.PersonId={2} and Absence.Absence_id={3}", (object) dataBoundItem.LsClient.ClientId, (object) Kvartplata.Classes.Options.Period.PeriodId, (object) dataBoundItem.Person.PersonId, (object) dataBoundItem.Absence.Absence_id)).List<LsAbsence>().Count > 0 && MessageBox.Show("Удалить записи с выбранной причиной из последующих периодов?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
          {
            try
            {
              this.session.CreateQuery(string.Format("delete from LsAbsence where LsClient.ClientId={0} and Period.PeriodId>={1} and Person.PersonId={2} and Absence.Absence_id={3}", (object) dataBoundItem.LsClient.ClientId, (object) Kvartplata.Classes.Options.Period.PeriodId, (object) dataBoundItem.Person.PersonId, (object) dataBoundItem.Absence.Absence_id)).ExecuteUpdate();
            }
            catch (Exception ex)
            {
              int num2 = (int) MessageBox.Show("Невозможно удалить запись", "Ошибка", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
              Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
            }
          }
          else
          {
            try
            {
              this.session.CreateQuery(string.Format("delete from LsAbsence where LsClient.ClientId={0} and Period.PeriodId={1} and Person.PersonId={2} and Absence.Absence_id={3}", (object) dataBoundItem.LsClient.ClientId, (object) dataBoundItem.Period.PeriodId, (object) dataBoundItem.Person.PersonId, (object) dataBoundItem.Absence.Absence_id)).ExecuteUpdate();
              try
              {
                dataBoundItem.Absence = this.session.Get<Absence>((object) dataBoundItem.Absence.Absence_id);
                dataBoundItem.Person = this.session.Get<Person>((object) dataBoundItem.Person.PersonId);
                Kvartplata.Classes.KvrplHelper.GetFamily(dataBoundItem.Person, 1, false);
                if (Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(32, this.Client.Company)) == 1)
                {
                  Kvartplata.Classes.Company company = this.Client.Company;
                  Kvartplata.Classes.Home home = this.Client.Home;
                                    // ISSUE: variable of the null type
                  LsClient local = null;
                  int num2 = 3;
                  string[] strArray = new string[8]{ "На ЛС ", dataBoundItem.LsClient.ClientId.ToString(), " внесено отсутствие (", dataBoundItem.Absence.Absence_name, ") с ", dataBoundItem.DBeg.Value.ToShortDateString(), " по ", null };
                  int index = 7;
                  DateTime? nullable = dataBoundItem.DEnd;
                  string shortDateString = nullable.Value.ToShortDateString();
                  strArray[index] = shortDateString;
                  string Text = string.Concat(strArray);
                  string OldText = "";
                  string document = dataBoundItem.Document;
                  nullable = this.MonthClosed.PeriodName;
                  DateTime monthClosed = nullable.Value;
                  int num3 = 0;
                  Kvartplata.Classes.KvrplHelper.WriteNote(company, home, (Kvartplata.Classes.LsClient) local, (short) num2, Text, OldText, document, monthClosed, num3 != 0);
                }
              }
              catch (Exception ex)
              {
                Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
              }
            }
            catch (Exception ex)
            {
              int num2 = (int) MessageBox.Show("Невозможно удалить запись", "Ошибка", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
              Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
            }
          }
          this.session.Clear();
          this.LoadAbsence();
        }
      }
    }

    private short GetMotive()
    {
      try
      {
        return (short) ((int) Convert.ToInt16(this.session.CreateQuery(string.Format("select max(Motive) from LsAbsence where LsClient.ClientId={0}", (object) this.Client.ClientId)).List()[0]) + 1);
      }
      catch
      {
        return 1;
      }
    }

    private void dgvAbsence_CellMouseDown(object sender, DataGridViewCellMouseEventArgs e)
    {
      if (e == null || e.RowIndex == -1 || e.ColumnIndex == -1)
        return;
      this.dgvAbsence.Rows[e.RowIndex].Selected = true;
      this.dgvAbsence.CurrentCell = this.dgvAbsence.Rows[e.RowIndex].Cells[e.ColumnIndex];
    }

    private void dgvAbsence_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
    {
      this.btnSave.Enabled = true;
      this.btnDelRecord.Enabled = false;
      ((LsAbsence) this.dgvAbsence.CurrentRow.DataBoundItem).IsEdit = true;
    }

    private void dgvAbsence_CellEndEdit(object sender, DataGridViewCellEventArgs e)
    {
      this.session.Clear();
      LsAbsence dataBoundItem = (LsAbsence) this.dgvAbsence.CurrentRow.DataBoundItem;
      dataBoundItem.IsEdit = true;
      if (this.dgvAbsence.CurrentCell.Value == null)
        return;
      try
      {
        string name = this.dgvAbsence.Columns[e.ColumnIndex].Name;
        if (!(name == "Person"))
        {
          if (!(name == "Absence"))
          {
            if (!(name == "DBeg"))
            {
              if (name == "DEnd")
              {
                try
                {
                  dataBoundItem.DEnd = new DateTime?(Convert.ToDateTime(this.dgvAbsence.CurrentRow.Cells["DEnd"].Value));
                }
                catch
                {
                }
              }
            }
            else
            {
              try
              {
                dataBoundItem.DBeg = new DateTime?(Convert.ToDateTime(this.dgvAbsence.CurrentRow.Cells["DBeg"].Value));
              }
              catch
              {
              }
            }
          }
          else
            dataBoundItem.Absence = this.session.Get<Absence>(this.dgvAbsence.CurrentRow.Cells["Absence"].Value);
        }
        else
          dataBoundItem.Person = this.session.Get<Person>(this.dgvAbsence.CurrentRow.Cells["Person"].Value);
      }
      catch (Exception ex)
      {
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
      }
    }

    private void btnAddCounter_Click(object sender, EventArgs e)
    {
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(42, 2, this.Client.Company, true))
        return;
      DateTime dateTime = this.MonthClosed.PeriodName.Value;
      DateTime? periodName = Kvartplata.Classes.Options.Period.PeriodName;
      if (periodName.HasValue && dateTime >= periodName.GetValueOrDefault())
      {
        int num = (int) MessageBox.Show("Невозможно добавить запись в закрытом месяце", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
      }
      else
      {
        this.InsertCounter();
        this.btnDelCounter.Enabled = false;
        this.btnSaveCounter.Enabled = true;
      }
    }

    private void btnDelCounter_Click(object sender, EventArgs e)
    {
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(42, 2, this.Client.Company, true))
        return;
      if (this.MonthClosed.PeriodName.Value >= Kvartplata.Classes.Options.Period.PeriodName.Value)
      {
        int num = (int) MessageBox.Show("Невозможно удалить запись в закрытом периоде!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
      }
      else
      {
        this.DelCounter();
        this.LoadCounters();
      }
    }

    private void btnSaveCounter_Click(object sender, EventArgs e)
    {
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(42, 2, this.Client.Company, true))
        return;
      this.SaveAllCounters();
      if (this.InsertRecord)
        return;
      this.LoadCounters();
    }

    private void LoadCounters()
    {
      this.btnAddCounter.Enabled = true;
      this.btnDelCounter.Enabled = true;
      this.btnSaveCounter.Enabled = false;
      this.tsbMultiPastTime.Enabled = true;
      this.chbArhiv.Visible = true;
      this.session = Kvartplata.Domain.CurrentSession;
      this.dgvCounters.Columns.Clear();
      this.dgvCounters.DataSource = (object) null;
      this.countersList = (IList<Kvartplata.Classes.Counter>) new List<Kvartplata.Classes.Counter>();
      string str1 = "";
      string str2 = "";
      if (!this.chbArhiv.Checked)
        str1 = " and isnull(c.ArchivesDate,'2999-12-31')>='{2}'";
      if (!this.cbShowAnotherOrg.Checked)
        str2 = " and c.Service.ServiceId not in (select Service_id from ServiceParam where Company_id={3} and Complex.IdFk={4} and SendRent=1)";
      this.countersList = this.session.CreateQuery(string.Format("select c from Counter c left join fetch c.Service where c.Complex.ComplexId={0} and c.LsClient.ClientId={1} and c.BaseCounter.Id=2 " + str1 + str2 + " order by isnull(c.ArchivesDate,'2999-12-31') desc,c.Service.ServiceId", (object) Kvartplata.Classes.Options.Complex.ComplexId, (object) this.Client.ClientId, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(this.MonthClosed.PeriodName.Value.AddMonths(2)), (object) this.Client.Company.CompanyId, (object) this.Client.Complex.IdFk)).List<Kvartplata.Classes.Counter>();
      this.dgvCounters.DataSource = (object) this.countersList;
      this.session.Clear();
      this.SetViewCounters();
      this.LoadMainCounters();
      this.dgvCounters.Focus();
      this.InsertRecord = false;
      this.btnSave.Enabled = false;
      this.MySettingsLsCounters.GridName = "LsCounters";
      this.LoadSettingsLsCounters();
    }

    private void LoadSettingsLsCounters()
    {
      this.MySettingsLsCounters.Load();
      foreach (DataGridViewColumn column in (BaseCollection) this.dgvCounters.Columns)
        this.MySettingsLsCounters.GetMySettings(column);
    }

    private void dgvCounters_ColumnWidthChanged(object sender, DataGridViewColumnEventArgs e)
    {
      if (this.MySettingsLsCounters.FindByName(e.Column.Name) < 0)
        return;
      this.MySettingsLsCounters.Columns[this.MySettingsLsCounters.FindByName(e.Column.Name)].Width = e.Column.Width;
      this.MySettingsLsCounters.Save();
    }

    private void InsertCounter()
    {
      this.InsertRecord = true;
      Kvartplata.Classes.Counter counter = new Kvartplata.Classes.Counter();
      counter.CoeffTrans = 1.0;
      IList<Kvartplata.Classes.Counter> counterList = (IList<Kvartplata.Classes.Counter>) new List<Kvartplata.Classes.Counter>();
      if ((uint) this.dgvCounters.Rows.Count > 0U)
        counterList = (IList<Kvartplata.Classes.Counter>) (this.dgvCounters.DataSource as List<Kvartplata.Classes.Counter>);
      counterList.Add(counter);
      this.dgvCounters.Columns.Clear();
      this.dgvCounters.DataSource = (object) null;
      this.dgvCounters.DataSource = (object) counterList;
      this.SetViewCounters();
      this.dgvCounters.CurrentCell = this.dgvCounters.Rows[this.dgvCounters.Rows.Count - 1].Cells[1];
    }

    private void SetViewCounters()
    {
      this.dgvCounters.Columns["ServiceName"].HeaderText = "Услуга";
      this.dgvCounters.Columns["Series"].HeaderText = "Серия";
      this.dgvCounters.Columns["Notice"].HeaderText = "Примечания";
      this.dgvCounters.Columns["ArchivesDate"].HeaderText = "Дата поступления в архив";
      this.dgvCounters.Columns["ServiceName"].DisplayIndex = 0;
      this.dgvCounters.Columns["Series"].DisplayIndex = 2;
      this.dgvCounters.Columns["Notice"].DisplayIndex = 3;
      this.dgvCounters.Columns["ArchivesDate"].DisplayIndex = 4;
      this.dgvCounters.Columns["ArchivesDate"].ReadOnly = true;
      this.dgvCounters.Columns["ServiceName"].Width = 200;
      this.dgvCounters.Columns["Notice"].Width = 200;
      this.dgvCounters.Columns["CounterId"].Visible = false;
      this.dgvCounters.Columns["ServiceName"].Visible = false;
      this.dgvCounters.Columns["AllInfo"].Visible = false;
      this.dgvCounters.Columns["CounterNum"].Visible = false;
      this.dgvCounters.Columns["AdrAndNum"].Visible = false;
      this.dgvCounters.Columns["FlatAndNum"].Visible = false;
      this.dgvCounters.Columns["AuditDate"].Visible = false;
      this.dgvCounters.Columns["CounterNum1"].Visible = false;
      this.dgvCounters.Columns["MainCounterInfo"].Visible = false;
      Kvartplata.Classes.KvrplHelper.ViewEdit(this.dgvCounters);
      this.session = Kvartplata.Domain.CurrentSession;
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvCounters, 1, (IList) this.session.CreateQuery(string.Format("select s from Service s,ServiceParam sp where sp.Service_id=s.ServiceId and s.Root=0 and s.ServiceId<>0 and sp.Company_id={0} and sp.Complex.IdFk={1} order by " + Kvartplata.Classes.Options.SortService, (object) this.Client.Company.CompanyId, (object) this.Client.Complex.IdFk)).List<Kvartplata.Classes.Service>(), "ServiceId", "ServiceName", "Услуга", "Service", 160, 160);
      IList<Kvartplata.Classes.TypeCounter> typeCounterList = this.session.CreateCriteria(typeof (Kvartplata.Classes.TypeCounter)).List<Kvartplata.Classes.TypeCounter>();
      typeCounterList.Insert(0, new Kvartplata.Classes.TypeCounter()
      {
        TypeCounter_id = (short) 0,
        TypeCounter_name = ""
      });
      IList<CounterLocation> counterLocationList = this.session.CreateCriteria(typeof (CounterLocation)).List<CounterLocation>();
      counterLocationList.Insert(0, new CounterLocation()
      {
        CntrLocationId = 0,
        CntrLocationName = ""
      });
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvCounters, 2, (IList) typeCounterList, "TypeCounter_id", "TypeCounter_name", "Тип счетчика", "Type", 140, 140);
      Kvartplata.Classes.KvrplHelper.AddTextBoxColumn(this.dgvCounters, 3, "Номер счетчика", "CounterNum", 120, false);
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvCounters, 4, (IList) new List<Kvartplata.Classes.Counter>(), "CounterId", "MainCounterInfo", "Головной счетчик", "MainCounters", 120, 120);
      Kvartplata.Classes.KvrplHelper.AddTextBoxColumn(this.dgvCounters, 5, "Коэфф-т трансфор-и", "CoeffTrans", 90, false);
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvCounters, 6, (IList) counterLocationList, "CntrLocationId", "CntrLocationName", "Тип расположения", "Location", 140, 140);
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvCounters, 8, "Дата установки", "SetDate");
      Kvartplata.Classes.KvrplHelper.AddTextBoxColumn(this.dgvCounters, 9, "Начальные показания", "EvidenceStart", 120, false);
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvCounters, 10, "Дата поверки", "AuditDate");
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvCounters, 11, "Дата снятия", "RemoveDate");
      foreach (DataGridViewRow row1 in (IEnumerable) this.dgvCounters.Rows)
      {
        DataGridViewRow row = row1;
        row.Cells["CounterNum"].Value = (object) ((Kvartplata.Classes.Counter) row.DataBoundItem).CounterNum;
        if (((Kvartplata.Classes.Counter) row.DataBoundItem).Service != null)
          row.Cells["Service"].Value = (object) ((Kvartplata.Classes.Counter) row.DataBoundItem).Service.ServiceId;
        if (((Kvartplata.Classes.Counter) row.DataBoundItem).TypeCounter != null)
          row.Cells["Type"].Value = (object) ((Kvartplata.Classes.Counter) row.DataBoundItem).TypeCounter.TypeCounter_id;
        if (((Kvartplata.Classes.Counter) row.DataBoundItem).Location != null)
          row.Cells["Location"].Value = (object) ((Kvartplata.Classes.Counter) row.DataBoundItem).Location.CntrLocationId;
        row.Cells["SetDate"].Value = (object) ((Kvartplata.Classes.Counter) row.DataBoundItem).SetDate;
        row.Cells["RemoveDate"].Value = (object) ((Kvartplata.Classes.Counter) row.DataBoundItem).RemoveDate;
        row.Cells["AuditDate"].Value = (object) ((Kvartplata.Classes.Counter) row.DataBoundItem).AuditDate;
        row.Cells["EvidenceStart"].Value = (object) ((Kvartplata.Classes.Counter) row.DataBoundItem).EvidenceStart;
        row.Cells["CoeffTrans"].Value = (object) ((Kvartplata.Classes.Counter) row.DataBoundItem).CoeffTrans;
        List<Kvartplata.Classes.Counter> counterList = new List<Kvartplata.Classes.Counter>();
        counterList.Add(new Kvartplata.Classes.Counter()
        {
          MainCounter = (Kvartplata.Classes.Counter) null
        });
        counterList.AddRange((IEnumerable<Kvartplata.Classes.Counter>) this.countersList.Where<Kvartplata.Classes.Counter>((Func<Kvartplata.Classes.Counter, bool>) (x => x.CounterId != ((Kvartplata.Classes.Counter) row.DataBoundItem).CounterId)).ToList<Kvartplata.Classes.Counter>());
        ((DataGridViewComboBoxCell) this.dgvCounters["MainCounters", row.Index]).DataSource = (object) counterList;
        Kvartplata.Classes.Counter dataBoundItem = (Kvartplata.Classes.Counter) row.DataBoundItem;
        if (dataBoundItem.MainCounter != null)
          row.Cells["MainCounters"].Value = (object) dataBoundItem.MainCounter.CounterId;
      }
      this.session.Clear();
    }

    private void SaveAllCounters()
    {
      this.dgvCounters.EndEdit();
      foreach (DataGridViewRow row in (IEnumerable) this.dgvCounters.Rows)
      {
        this.dgvCounters.CurrentCell = row.Cells["CounterNum"];
        row.Selected = true;
        if (((Kvartplata.Classes.Counter) row.DataBoundItem).IsEdit)
          this.SaveCounter();
        ((Kvartplata.Classes.Counter) row.DataBoundItem).IsEdit = false;
      }
      this.btnAddCounter.Enabled = true;
      this.btnDelCounter.Enabled = true;
    }

    private void SaveCounter()
    {
      if (this.dgvCounters.Rows.Count <= 0 || this.dgvCounters.CurrentRow.Index < 0)
        return;
      this.session = Kvartplata.Domain.CurrentSession;
      Kvartplata.Classes.Counter dataBoundItem = (Kvartplata.Classes.Counter) this.dgvCounters.CurrentRow.DataBoundItem;
      int counterId = dataBoundItem.CounterId;
      this.InsertRecord = dataBoundItem.CounterId == 0;
      bool insertRecord = this.InsertRecord;
      if (this.dgvCounters.CurrentRow.Cells["Service"].Value == null)
      {
        int num1 = (int) MessageBox.Show("Выберите услугу", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
      else
      {
        dataBoundItem.Service = this.session.Get<Kvartplata.Classes.Service>(this.dgvCounters.CurrentRow.Cells["Service"].Value);
        if (dataBoundItem.Series == null)
          dataBoundItem.Series = "";
        if (dataBoundItem.Notice == null)
          dataBoundItem.Notice = "";
        int num2 = this.dgvCounters.CurrentRow.Cells["Type"].Value == null ? 0 : ((uint) Convert.ToInt32(this.dgvCounters.CurrentRow.Cells["Type"].Value) > 0U ? 1 : 0);
        dataBoundItem.TypeCounter = num2 == 0 ? (Kvartplata.Classes.TypeCounter) null : this.session.Get<Kvartplata.Classes.TypeCounter>(this.dgvCounters.CurrentRow.Cells["Type"].Value);
        if (this.dgvCounters.CurrentRow.Cells["CounterNum"].Value == null)
        {
          int num3 = (int) MessageBox.Show("Введите номер", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        }
        else
        {
          try
          {
            dataBoundItem.CounterNum = this.dgvCounters.CurrentRow.Cells["CounterNum"].Value.ToString();
            dataBoundItem.CounterNum = dataBoundItem.CounterNum.Replace(" ", string.Empty);
          }
          catch
          {
            int num4 = (int) MessageBox.Show("Некорректный номер счетчика", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            return;
          }
          if ((this.InsertRecord || !this.InsertRecord && dataBoundItem.CounterNum != Convert.ToString(this.dgvCounters.CurrentRow.Cells["CounterNum"].Value).Replace(" ", string.Empty)) && this.session.CreateCriteria(typeof (Kvartplata.Classes.Counter)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Service", (object) dataBoundItem.Service)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("CounterNum", (object) Convert.ToString(this.dgvCounters.CurrentRow.Cells["CounterNum"].Value))).Add((ICriterion) NHibernate.Criterion.Restrictions.IsNull("ArchivesDate")).List<Kvartplata.Classes.Counter>().Count > 0)
          {
            int num5 = (int) MessageBox.Show("На лицевом уже есть счетчик с таким номером по данной услуге!", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          }
          else if (this.dgvCounters.CurrentRow.Cells["EvidenceStart"].Value == null)
          {
            int num6 = (int) MessageBox.Show("Введите начальные показания", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          }
          else
          {
            try
            {
              dataBoundItem.EvidenceStart = Convert.ToDouble(Kvartplata.Classes.KvrplHelper.ChangeSeparator(this.dgvCounters.CurrentRow.Cells["EvidenceStart"].Value.ToString()));
            }
            catch (Exception ex)
            {
            }
            if (this.session.CreateQuery("select CrossServ.ServiceId from CrossService where Company.CompanyId=:cmp and Service.ServiceId=:serv and CrossType.CrossTypeId=1 and DBeg<=:dat and DEnd>=:dat").SetParameter<short>("cmp", this.Client.Company.CompanyId).SetParameter<short>("serv", dataBoundItem.Service.ServiceId).SetDateTime("dat", this.MonthClosed.PeriodName.Value.AddMonths(1)).List().Count > 0)
            {
              int num4 = (int) MessageBox.Show("Невозможно сохранить изменения. Существует связанная услуга по показаниям.", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
            else
            {
              try
              {
                if (this.dgvCounters.CurrentRow.Cells["SetDate"].Value != null)
                  dataBoundItem.SetDate = !(this.dgvCounters.CurrentRow.Cells["SetDate"].Value.ToString() != "  .  .") ? new DateTime?() : new DateTime?(Convert.ToDateTime(this.dgvCounters.CurrentRow.Cells["SetDate"].Value));
                if (this.dgvCounters.CurrentRow.Cells["RemoveDate"].Value != null)
                  dataBoundItem.RemoveDate = !(this.dgvCounters.CurrentRow.Cells["RemoveDate"].Value.ToString() != "  .  .") ? new DateTime?() : new DateTime?(Convert.ToDateTime(this.dgvCounters.CurrentRow.Cells["RemoveDate"].Value));
                if (this.dgvCounters.CurrentRow.Cells["AuditDate"].Value != null)
                  dataBoundItem.AuditDate = !(this.dgvCounters.CurrentRow.Cells["AuditDate"].Value.ToString() != "  .  .") ? new DateTime?() : new DateTime?(Convert.ToDateTime(this.dgvCounters.CurrentRow.Cells["AuditDate"].Value));
              }
              catch (Exception ex)
              {
                int num7 = (int) MessageBox.Show("Некорректно введена дата", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                return;
              }
              DateTime? nullable = dataBoundItem.SetDate;
              DateTime dateTime1 = DateTime.Now.AddYears(-3);
              int num8;
              if ((nullable.HasValue ? (nullable.GetValueOrDefault() <= dateTime1 ? 1 : 0) : 0) == 0)
              {
                nullable = dataBoundItem.SetDate;
                DateTime dateTime2 = DateTime.Now.AddYears(3);
                num8 = nullable.HasValue ? (nullable.GetValueOrDefault() >= dateTime2 ? 1 : 0) : 0;
              }
              else
                num8 = 1;
              if (num8 != 0 && MessageBox.Show("Дата установки отличается от текущей более, чем на 3 года. Продолжить сохранение? ", "Внимание", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.No)
              {
                this.session.Clear();
              }
              else
              {
                nullable = dataBoundItem.AuditDate;
                DateTime dateTime2 = DateTime.Now.AddYears(-20);
                int num7;
                if ((nullable.HasValue ? (nullable.GetValueOrDefault() <= dateTime2 ? 1 : 0) : 0) == 0)
                {
                  nullable = dataBoundItem.AuditDate;
                  DateTime dateTime3 = DateTime.Now.AddYears(20);
                  num7 = nullable.HasValue ? (nullable.GetValueOrDefault() >= dateTime3 ? 1 : 0) : 0;
                }
                else
                  num7 = 1;
                if (num7 != 0)
                {
                  int num9 = (int) MessageBox.Show("Дата поверки отличается от текущей более, чем на 20 лет. ", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                  this.session.Clear();
                }
                else
                {
                  nullable = dataBoundItem.RemoveDate;
                  DateTime dateTime3 = Kvartplata.Classes.KvrplHelper.LastDay(DateTime.Now);
                  if (nullable.HasValue && nullable.GetValueOrDefault() > dateTime3)
                  {
                    int num9 = (int) MessageBox.Show("Дата снятия не может быть проставлена в будущие периоды", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    this.session.Clear();
                  }
                  else
                  {
                    nullable = dataBoundItem.RemoveDate;
                    DateTime dateTime4 = DateTime.Now.AddYears(-3);
                    int num9;
                    if ((nullable.HasValue ? (nullable.GetValueOrDefault() <= dateTime4 ? 1 : 0) : 0) == 0)
                    {
                      nullable = dataBoundItem.RemoveDate;
                      DateTime dateTime5 = DateTime.Now.AddYears(3);
                      num9 = nullable.HasValue ? (nullable.GetValueOrDefault() >= dateTime5 ? 1 : 0) : 0;
                    }
                    else
                      num9 = 1;
                    if (num9 != 0 && MessageBox.Show("Дата снятия отличается от текущей более, чем на 3 года. Продолжить сохранение? ", "Внимание", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.No)
                    {
                      this.session.Clear();
                    }
                    else
                    {
                      IList<Kvartplata.Classes.Evidence> evidenceList1 = (IList<Kvartplata.Classes.Evidence>) new List<Kvartplata.Classes.Evidence>();
                      IList<Kvartplata.Classes.Evidence> evidenceList2 = this.session.CreateCriteria(typeof (Kvartplata.Classes.Evidence)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Counter", (object) dataBoundItem)).Add((ICriterion) NHibernate.Criterion.Restrictions.Le("Period", (object) Kvartplata.Classes.KvrplHelper.GetCmpKvrClose(this.Client.Company, Kvartplata.Classes.Options.ComplexPasp.ComplexId, Kvartplata.Classes.Options.ComplexPrior.IdFk))).List<Kvartplata.Classes.Evidence>();
                      try
                      {
                        if (!this.InsertRecord && this.session.Get<Kvartplata.Classes.Counter>((object) dataBoundItem.CounterId).CoeffTrans != Convert.ToDouble(Kvartplata.Classes.KvrplHelper.ChangeSeparator(this.dgvCounters.CurrentRow.Cells["CoeffTrans"].Value.ToString())) && evidenceList2.Count > 0)
                        {
                          int num10 = (int) MessageBox.Show("Невозможно поменять коэффициент. Есть показания в закрытом периоде", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                          return;
                        }
                        dataBoundItem.CoeffTrans = Convert.ToDouble(Kvartplata.Classes.KvrplHelper.ChangeSeparator(this.dgvCounters.CurrentRow.Cells["CoeffTrans"].Value.ToString()));
                        if (dataBoundItem.CoeffTrans == 0.0)
                          dataBoundItem.CoeffTrans = 1.0;
                      }
                      catch (Exception ex)
                      {
                        int num10 = (int) MessageBox.Show("Некорректный коэффициент", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        return;
                      }
                      this.session.Clear();
                      if (this.InsertRecord || evidenceList2.Count == 0)
                      {
                        int num10 = this.dgvCounters.CurrentRow.Cells["Location"].Value == null ? 0 : ((uint) Convert.ToInt32(this.dgvCounters.CurrentRow.Cells["Location"].Value) > 0U ? 1 : 0);
                        dataBoundItem.Location = num10 == 0 ? (CounterLocation) null : this.session.Get<CounterLocation>(this.dgvCounters.CurrentRow.Cells["Location"].Value);
                      }
                      dataBoundItem.Company = this.Client.Company;
                      dataBoundItem.Home = this.Client.Home;
                      dataBoundItem.LsClient = this.Client;
                      dataBoundItem.BaseCounter = this.session.Get<Kvartplata.Classes.BaseCounter>((object) 2);
                      dataBoundItem.Complex = Kvartplata.Classes.Options.Complex;
                      dataBoundItem.UName = Kvartplata.Classes.Options.Login;
                      dataBoundItem.DEdit = DateTime.Now.Date;
                      this.session.BeginTransaction();
                      try
                      {
                        if (this.InsertRecord)
                        {
                          this.InsertRecord = false;
                          IList<int> intList = this.session.CreateSQLQuery("select DBA.gen_id('cntrCounter',1)").List<int>();
                          dataBoundItem.CounterId = intList[0];
                          this.session.Save((object) dataBoundItem);
                        }
                        else
                          this.session.Update((object) dataBoundItem);
                        nullable = dataBoundItem.SetDate;
                        if (nullable.HasValue)
                        {
                          ISession session = this.session;
                          string format = "select sp from LsServiceParam sp where Period.PeriodId=0 and LsClient.ClientId={0} and Service.ServiceId={1} and Param.ParamId=403 and DBeg<='{3}' and DEnd>='{2}' and ParamValue=1";
                          object[] objArray = new object[4]{ (object) this.Client.ClientId, (object) dataBoundItem.Service.ServiceId, null, null };
                          int index1 = 2;
                          nullable = dataBoundItem.SetDate;
                          string baseFormat1 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(nullable.Value);
                          objArray[index1] = (object) baseFormat1;
                          int index2 = 3;
                          nullable = dataBoundItem.SetDate;
                          string baseFormat2 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.KvrplHelper.LastDay(nullable.Value));
                          objArray[index2] = (object) baseFormat2;
                          string queryString = string.Format(format, objArray);
                          IList<LsServiceParam> lsServiceParamList = session.CreateQuery(queryString).List<LsServiceParam>();
                          nullable = dataBoundItem.SetDate;
                          DateTime dateTime5 = this.MonthClosed.PeriodName.Value.AddMonths(1);
                          int num10;
                          if ((nullable.HasValue ? (nullable.GetValueOrDefault() >= dateTime5 ? 1 : 0) : 0) != 0)
                          {
                            nullable = dataBoundItem.SetDate;
                            DateTime dateTime6 = this.MonthClosed.PeriodName.Value.AddMonths(2);
                            num10 = nullable.HasValue ? (nullable.GetValueOrDefault() < dateTime6 ? 1 : 0) : 0;
                          }
                          else
                            num10 = 0;
                          if (num10 != 0)
                          {
                            if (lsServiceParamList.Count == 0)
                            {
                              LsServiceParam lsServiceParam1 = new LsServiceParam();
                              lsServiceParam1.Period = this.session.Get<Kvartplata.Classes.Period>((object) 0);
                              lsServiceParam1.LsClient = this.Client;
                              lsServiceParam1.Service = dataBoundItem.Service;
                              lsServiceParam1.Param = this.session.Get<Param>((object) Convert.ToInt16(403));
                              LsServiceParam lsServiceParam2 = lsServiceParam1;
                              nullable = dataBoundItem.SetDate;
                              DateTime dateTime6 = Kvartplata.Classes.KvrplHelper.FirstDay(nullable.Value);
                              lsServiceParam2.DBeg = dateTime6;
                              LsServiceParam lsServiceParam3 = lsServiceParam1;
                              nullable = dataBoundItem.SetDate;
                              DateTime dateTime7 = Kvartplata.Classes.KvrplHelper.LastDay(nullable.Value);
                              lsServiceParam3.DEnd = dateTime7;
                              lsServiceParam1.ParamValue = 1.0;
                              lsServiceParam1.UName = Kvartplata.Classes.Options.Login;
                              lsServiceParam1.DEdit = DateTime.Now;
                              this.session.Save((object) lsServiceParam1);
                            }
                            else
                            {
                              int num11;
                              if (lsServiceParamList.Count > 1)
                              {
                                DateTime dbeg = lsServiceParamList[0].DBeg;
                                nullable = dataBoundItem.SetDate;
                                DateTime dateTime6 = nullable.Value;
                                if (dbeg > dateTime6)
                                {
                                  num11 = 1;
                                  goto label_66;
                                }
                              }
                              num11 = lsServiceParamList.Count == 1 ? 1 : 0;
label_66:
                              if (num11 != 0)
                                this.session.CreateSQLQuery("update DBA.LsServiceParam sp set DBeg=:dbeg where sp.Client_Id=:client and sp.Period_Id=:period and sp.Service_Id=:oldservice and sp.DBeg=:olddbeg and sp.Param_Id=:oldparam").SetParameter<DateTime?>("dbeg", dataBoundItem.SetDate).SetParameter<int>("client", this.Client.ClientId).SetParameter<int>("period", lsServiceParamList[0].Period.PeriodId).SetParameter<short>("oldservice", lsServiceParamList[0].Service.ServiceId).SetParameter<DateTime>("olddbeg", lsServiceParamList[0].DBeg.Date).SetParameter<short>("oldparam", lsServiceParamList[0].Param.ParamId).ExecuteUpdate();
                            }
                          }
                        }
                        else
                        {
                          nullable = dataBoundItem.SetDate;
                          if (!nullable.HasValue)
                          {
                            int num10 = (int) MessageBox.Show("Не забудьте внести параметры по услугам, если это необходимо");
                          }
                        }
                        this.session.Flush();
                        this.session.Transaction.Commit();
                      }
                      catch (Exception ex)
                      {
                        if (ex.InnerException != null && ex.InnerException.Message.ToLower().IndexOf("primary key for table 'cntrcounter' is not unique") != -1)
                        {
                          Kvartplata.Classes.KvrplHelper.ResetGeners("cntrCounter", "Counter_id");
                          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
                          int num10 = (int) MessageBox.Show("Была устранена ошибка генерации уникального поля! Введите запись заново!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                        }
                        else
                        {
                          int num11 = (int) MessageBox.Show("Невозможно сохранить запись", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        }
                        this.session.Transaction.Rollback();
                        return;
                      }
                      this.session.Clear();
                      if (insertRecord)
                      {
                        ICriteria criteria = this.session.CreateCriteria(typeof (Kvartplata.Classes.Counter)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Home", (object) this.Client.Home)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("BaseCounter.Id", (object) 1)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Service", (object) dataBoundItem.Service));
                        AbstractCriterion abstractCriterion1 = NHibernate.Criterion.Restrictions.IsNull("ArchivesDate");
                        string propertyName = "ArchivesDate";
                        nullable = Kvartplata.Classes.Options.Period.PeriodName;
                        // ISSUE: variable of a boxed type
                        DateTime local = nullable.Value;
                        SimpleExpression simpleExpression = NHibernate.Criterion.Restrictions.Gt(propertyName, (object) local);
                        AbstractCriterion abstractCriterion2 = NHibernate.Criterion.Restrictions.Or((ICriterion) abstractCriterion1, (ICriterion) simpleExpression);
                        IList<Kvartplata.Classes.Counter> counterList = criteria.Add((ICriterion) abstractCriterion2).List<Kvartplata.Classes.Counter>();
                        if (counterList.Count == 1)
                        {
                          ISession session = this.session;
                          string format = "select cr from CounterRelation cr where cr.LsClient.ClientId={0} and DBeg<='{1}' and DEnd>='{1}' and OnOff=1 and (select c.Service.ServiceId from Counter c where c.CounterId=cr.Counter.CounterId and c.BaseCounter.Id=1)={2}";
                          // ISSUE: variable of a boxed type
                          int clientId = this.Client.ClientId;
                          nullable = Kvartplata.Classes.Options.Period.PeriodName;
                          string baseFormat = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(nullable.Value);
                          // ISSUE: variable of a boxed type
                          short serviceId = dataBoundItem.Service.ServiceId;
                          string queryString = string.Format(format, (object) clientId, (object) baseFormat, (object) serviceId);
                          if (session.CreateQuery(queryString).List<Kvartplata.Classes.CounterRelation>().Count != 0)
                            ;
                        }
                        if (counterList.Count > 1)
                        {
                          int num10 = (int) MessageBox.Show("Не забудьте привязать лицевой к домовому счетчику, если это необходимо", "", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    private void DelCounter()
    {
      if (this.dgvCounters.Rows.Count <= 0 || this.dgvCounters.CurrentRow == null || this.dgvCounters.CurrentRow.Index < 0 || MessageBox.Show("Удалить счетчик?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) != DialogResult.OK)
        return;
      this.session = Kvartplata.Domain.CurrentSession;
      Kvartplata.Classes.Counter dataBoundItem = (Kvartplata.Classes.Counter) this.dgvCounters.CurrentRow.DataBoundItem;
      if (this.session.CreateCriteria(typeof (Kvartplata.Classes.Evidence)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Counter", (object) dataBoundItem)).List<Kvartplata.Classes.Evidence>().Count > 0)
      {
        int num1 = (int) MessageBox.Show("Удаление невозможно. У счетчика есть показания.", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
      }
      else
      {
        ITransaction transaction = this.session.BeginTransaction();
        try
        {
          this.session.Delete((object) dataBoundItem);
          DateTime? setDate = dataBoundItem.SetDate;
          DateTime? periodName = Kvartplata.Classes.Options.Period.PeriodName;
          DateTime dateTime1 = periodName.Value;
          int num2;
          if ((setDate.HasValue ? (setDate.GetValueOrDefault() >= dateTime1 ? 1 : 0) : 0) != 0)
          {
            setDate = dataBoundItem.SetDate;
            periodName = Kvartplata.Classes.Options.Period.PeriodName;
            DateTime dateTime2 = periodName.Value.AddMonths(1);
            num2 = setDate.HasValue ? (setDate.GetValueOrDefault() < dateTime2 ? 1 : 0) : 0;
          }
          else
            num2 = 0;
          if (num2 != 0)
          {
            ISession session1 = this.session;
            string format1 = "select c from Counter c where c.CounterId<>{4} and c.LsClient.ClientId={0} and c.Complex.ComplexId=100 and c.Service.ServiceId={1} and c.SetDate>='{2}' and c.SetDate<='{3}' order by c.SetDate desc";
            object[] objArray1 = new object[5];
            objArray1[0] = (object) this.Client.ClientId;
            objArray1[1] = (object) dataBoundItem.Service.ServiceId;
            int index1 = 2;
            setDate = dataBoundItem.SetDate;
            string baseFormat1 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.KvrplHelper.FirstDay(setDate.Value));
            objArray1[index1] = (object) baseFormat1;
            int index2 = 3;
            setDate = dataBoundItem.SetDate;
            string baseFormat2 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.KvrplHelper.LastDay(setDate.Value));
            objArray1[index2] = (object) baseFormat2;
            int index3 = 4;
            // ISSUE: variable of a boxed type
            int counterId = dataBoundItem.CounterId;
            objArray1[index3] = (object) counterId;
            string queryString1 = string.Format(format1, objArray1);
            IList<Kvartplata.Classes.Counter> counterList = session1.CreateQuery(queryString1).List<Kvartplata.Classes.Counter>();
            if (counterList.Count == 0)
            {
              ISession session2 = this.session;
              string format2 = "delete from LsServiceParam where Period.PeriodId=0 and LsClient.ClientId={0} and Service.ServiceId={1} and Param.ParamId=403 and DBeg<='{3}' and DEnd>='{2}' and ParamValue=1";
              object[] objArray2 = new object[4]{ (object) this.Client.ClientId, (object) dataBoundItem.Service.ServiceId, null, null };
              int index4 = 2;
              setDate = dataBoundItem.SetDate;
              string baseFormat3 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(setDate.Value);
              objArray2[index4] = (object) baseFormat3;
              int index5 = 3;
              setDate = dataBoundItem.SetDate;
              string baseFormat4 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.KvrplHelper.LastDay(setDate.Value));
              objArray2[index5] = (object) baseFormat4;
              string queryString2 = string.Format(format2, objArray2);
              session2.CreateQuery(queryString2).ExecuteUpdate();
            }
            else
            {
              ISession session2 = this.session;
              string format2 = "select sp from LsServiceParam sp where Period.PeriodId=0 and LsClient.ClientId={0} and Service.ServiceId={1} and Param.ParamId=403 and DBeg<='{3}' and DEnd>='{2}' and ParamValue=1";
              object[] objArray2 = new object[4]{ (object) this.Client.ClientId, (object) dataBoundItem.Service.ServiceId, null, null };
              int index4 = 2;
              setDate = dataBoundItem.SetDate;
              string baseFormat3 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(setDate.Value);
              objArray2[index4] = (object) baseFormat3;
              int index5 = 3;
              setDate = dataBoundItem.SetDate;
              string baseFormat4 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.KvrplHelper.LastDay(setDate.Value));
              objArray2[index5] = (object) baseFormat4;
              string queryString2 = string.Format(format2, objArray2);
              IList<LsServiceParam> lsServiceParamList = session2.CreateQuery(queryString2).List<LsServiceParam>();
              DateTime dbeg = lsServiceParamList[0].DBeg;
              setDate = counterList[0].SetDate;
              DateTime dateTime2 = setDate.Value;
              if (dbeg < dateTime2)
              {
                ISQLQuery sqlQuery = this.session.CreateSQLQuery("update DBA.LsServiceParam sp set DBeg=:dbeg where sp.Client_Id=:client and sp.Period_Id=:period and sp.Service_Id=:oldservice and sp.DBeg=:olddbeg and sp.Param_Id=:oldparam");
                string name = "dbeg";
                setDate = counterList[0].SetDate;
                DateTime val = setDate.Value;
                sqlQuery.SetParameter<DateTime>(name, val).SetParameter<int>("client", this.Client.ClientId).SetParameter<int>("period", lsServiceParamList[0].Period.PeriodId).SetParameter<short>("oldservice", lsServiceParamList[0].Service.ServiceId).SetParameter<DateTime>("olddbeg", lsServiceParamList[0].DBeg.Date).SetParameter<short>("oldparam", lsServiceParamList[0].Param.ParamId).ExecuteUpdate();
              }
            }
          }
          this.session.Flush();
          transaction.Commit();
        }
        catch (Exception ex)
        {
          int num2 = (int) MessageBox.Show("Невозможно удалить счетчик", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
          transaction.Rollback();
        }
      }
    }

    private void btnArchive_Click(object sender, EventArgs e)
    {
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(42, 2, this.Client.Company, true))
        return;
      MonthCalendar mcArchive = this.mcArchive;
      DateTime dateTime1 = this.MonthClosed.PeriodName.Value;
      // ISSUE: explicit reference operation
      // ISSUE: variable of a reference type
      DateTime local = @dateTime1;
      DateTime? periodName = this.MonthClosed.PeriodName;
      int year = periodName.Value.Year;
      periodName = this.MonthClosed.PeriodName;
      int month = periodName.Value.Month;
      double num = (double) (DateTime.DaysInMonth(year, month) - 1);
      // ISSUE: explicit reference operation
      DateTime dateTime2 = local.AddDays(num);
      mcArchive.MinDate = dateTime2;
      this.mcArchive.Parent = (Control) this.dgvCounters;
      this.mcArchive.Visible = true;
      this.mcArchive.Show();
    }

    private void ToArchive()
    {
      if (this.dgvCounters.Rows.Count <= 0 || this.dgvCounters.CurrentRow.Index < 0)
        return;
      Kvartplata.Classes.Counter dataBoundItem = (Kvartplata.Classes.Counter) this.dgvCounters.CurrentRow.DataBoundItem;
      if (dataBoundItem.ArchivesDate.HasValue)
      {
        int num1 = (int) MessageBox.Show("Счетчик уже занесен в архив", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
      }
      else if (MessageBox.Show("Занести текущий счетчик в архив c " + this.dateArchive.ToShortDateString() + "?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
      {
        this.session = Kvartplata.Domain.CurrentSession;
        Kvartplata.Classes.Period period = Kvartplata.Classes.Options.Period;
        if (this.session.CreateCriteria(typeof (Kvartplata.Classes.Evidence)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Counter", (object) dataBoundItem)).Add((ICriterion) NHibernate.Criterion.Restrictions.Ge("DEnd", (object) this.dateArchive)).List<Kvartplata.Classes.Evidence>().Count > 0)
        {
          int num2 = (int) MessageBox.Show("Невозможно сделать счетчик архивным с выбранной даты. Существуют показания", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        }
        else
        {
          dataBoundItem.ArchivesDate = new DateTime?(this.dateArchive);
          dataBoundItem.UName = Kvartplata.Classes.Options.Login;
          dataBoundItem.DEdit = DateTime.Now;
          try
          {
            this.session.Update((object) dataBoundItem);
            this.session.Flush();
          }
          catch (Exception ex)
          {
            int num3 = (int) MessageBox.Show("Невозможно занести счетчик в архив", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
          }
        }
      }
    }

    private void mcArchive_DateSelected(object sender, DateRangeEventArgs e)
    {
      this.dateArchive = this.mcArchive.SelectionRange.End;
      this.mcArchive.Visible = false;
      if (this.mcArchive.Parent == this.dgvCounters)
      {
        this.ToArchive();
      }
      else
      {
        if (MessageBox.Show("Закрыть карточку c " + this.dateArchive.ToShortDateString() + "?", "", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) != DialogResult.OK)
          return;
        if (Kvartplata.Classes.KvrplHelper.CloseCard(this.Client, this.dateArchive))
        {
          int num1 = (int) MessageBox.Show("Карточка закрыта");
        }
        else
        {
          int num2 = (int) MessageBox.Show("Не удалось закрыть карточку. Изменения не сохранены", "Ошибка", MessageBoxButtons.OK);
        }
      }
    }

    private void dgvCounters_CellMouseDown(object sender, DataGridViewCellMouseEventArgs e)
    {
      if (e.RowIndex == -1 || e.ColumnIndex == -1 || e.Button != MouseButtons.Right)
        return;
      ((Control) sender).Focus();
      ((DataGridView) sender).Rows[e.RowIndex].Selected = true;
      this.dgvCounters.CurrentCell = this.dgvCounters.Rows[e.RowIndex].Cells[e.ColumnIndex];
      this.fCounter = true;
    }

    private void dgvCounters_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
    {
      if (((DataGridView) sender).DataSource == null)
        return;
      DataGridViewRow row = ((DataGridView) sender).Rows[e.RowIndex];
      int num;
      if (((Kvartplata.Classes.Counter) row.DataBoundItem).ArchivesDate.HasValue)
      {
        DateTime? archivesDate = ((Kvartplata.Classes.Counter) row.DataBoundItem).ArchivesDate;
        DateTime dateTime = Kvartplata.Classes.Options.Period.PeriodName.Value;
        num = archivesDate.HasValue ? (archivesDate.GetValueOrDefault() > dateTime ? 1 : 0) : 0;
      }
      else
        num = 1;
      if (num != 0)
        row.DefaultCellStyle.BackColor = Color.PapayaWhip;
      else
        row.DefaultCellStyle.ForeColor = Color.Gray;
    }

    private void dgvCounters_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
    {
      if (this.dgvCounters.CurrentCell == this.dgvCounters.CurrentRow.Cells["CounterNum"] && !this.InsertRecord)
      {
        this.session = Kvartplata.Domain.CurrentSession;
        IList<Kvartplata.Classes.Evidence> evidenceList = this.session.CreateCriteria(typeof (Kvartplata.Classes.Evidence)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Counter", (object) (Kvartplata.Classes.Counter) this.dgvCounters.CurrentRow.DataBoundItem)).List<Kvartplata.Classes.Evidence>();
        this.session.Clear();
        if (evidenceList.Count > 0)
        {
          int num = (int) MessageBox.Show("Невозможно изменить номер счетчика. У данного счетчика есть показания", "Внимание!", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          this.LoadCounters();
          return;
        }
      }
      this.btnSaveCounter.Enabled = true;
      ((Kvartplata.Classes.Counter) this.dgvCounters.CurrentRow.DataBoundItem).IsEdit = true;
    }

    private void dgvCounters_CellEndEdit(object sender, DataGridViewCellEventArgs e)
    {
      Kvartplata.Classes.Counter dataBoundItem = (Kvartplata.Classes.Counter) this.dgvCounters.CurrentRow.DataBoundItem;
      dataBoundItem.IsEdit = true;
      if (this.dgvCounters.CurrentCell.Value == null)
        return;
      try
      {
        string name = this.dgvCounters.Columns[e.ColumnIndex].Name;
        // ISSUE: reference to a compiler-generated method
        uint stringHash = PrivateImplementationDetails.ComputeStringHash(name);
        if (stringHash <= 2044719548U)
        {
          if (stringHash <= 898969975U)
          {
            if ((int) stringHash != 29994109)
            {
              if ((int) stringHash == 898969975)
              {
                if (name == "SetDate")
                {
                  try
                  {
                    dataBoundItem.SetDate = new DateTime?(Convert.ToDateTime(this.dgvCounters.CurrentRow.Cells["SetDate"].Value));
                  }
                  catch
                  {
                  }
                }
              }
            }
            else if (name == "MainCounters")
              dataBoundItem.MainCounter = this.session.Get<Kvartplata.Classes.Counter>(this.dgvCounters.CurrentRow.Cells["MainCounters"].Value);
          }
          else if ((int) stringHash != 1467563121)
          {
            if ((int) stringHash != 1539345862)
            {
              if ((int) stringHash == 2044719548)
              {
                if (name == "CoeffTrans")
                {
                  try
                  {
                    dataBoundItem.CoeffTrans = (double) Convert.ToInt32(this.dgvCounters.CurrentRow.Cells["CoeffTrans"].Value);
                  }
                  catch
                  {
                  }
                }
              }
            }
            else if (name == "Location")
              dataBoundItem.Location = this.session.Get<CounterLocation>(this.dgvCounters.CurrentRow.Cells["Location"].Value);
          }
          else if (name == "RemoveDate")
          {
            try
            {
              dataBoundItem.RemoveDate = new DateTime?(Convert.ToDateTime(this.dgvCounters.CurrentRow.Cells["RemoveDate"].Value));
            }
            catch
            {
            }
          }
        }
        else if (stringHash <= 2651540156U)
        {
          if ((int) stringHash != -1899798424)
          {
            if ((int) stringHash == -1643427140)
            {
              if (name == "AuditDate")
              {
                try
                {
                  dataBoundItem.AuditDate = new DateTime?(Convert.ToDateTime(this.dgvCounters.CurrentRow.Cells["AuditDate"].Value));
                }
                catch
                {
                }
              }
            }
          }
          else if (name == "EvidenceStart")
          {
            try
            {
              dataBoundItem.EvidenceStart = Convert.ToDouble(Kvartplata.Classes.KvrplHelper.ChangeSeparator(this.dgvCounters.CurrentRow.Cells["EvidenceStart"].Value.ToString()));
            }
            catch
            {
            }
          }
        }
        else if ((int) stringHash != -1240729199)
        {
          if ((int) stringHash != -1237072124)
          {
            if ((int) stringHash == -782905235 && name == "Type")
              dataBoundItem.TypeCounter = this.session.Get<Kvartplata.Classes.TypeCounter>(this.dgvCounters.CurrentRow.Cells["Type"].Value);
          }
          else if (name == "Service")
            dataBoundItem.Service = this.session.Get<Kvartplata.Classes.Service>(this.dgvCounters.CurrentRow.Cells["Service"].Value);
        }
        else if (name == "CounterNum")
        {
          this.dgvCounters.CurrentRow.Cells["CounterNum"].Value = (object) this.dgvCounters.CurrentRow.Cells["CounterNum"].Value.ToString().Replace("  ", string.Empty);
          dataBoundItem.CounterNum = this.dgvCounters.CurrentRow.Cells["CounterNum"].Value.ToString();
        }
      }
      catch (Exception ex)
      {
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
      }
    }

    private void miCopy_Click(object sender, EventArgs e)
    {
      if (!this.dgvCounters.Focused || this.dgvCounters.Rows.Count <= 0 || this.dgvCounters.CurrentRow.Index < 0 || !this.fCounter)
        return;
      bool flag = (int) Convert.ToInt16(((ToolStripItem) sender).Tag) == 1;
      FrmChooseObject frmChooseObject = new FrmChooseObject((Kvartplata.Classes.Counter) this.dgvCounters.CurrentRow.DataBoundItem);
      frmChooseObject.Save = flag;
      frmChooseObject.CodeOperation = Convert.ToInt16(((ToolStripItem) sender).Tag);
      frmChooseObject.MonthClosed = this.MonthClosed;
      int num = (int) frmChooseObject.ShowDialog();
      frmChooseObject.Dispose();
    }

    private void LoadMainCounters()
    {
      this.btnSave.Enabled = false;
      this.btnAddRecord.Enabled = true;
      this.btnDelRecord.Enabled = true;
      this.session = Kvartplata.Domain.CurrentSession;
      ICriteria criteria;
      if (!this.PastTime)
      {
        criteria = this.session.CreateCriteria(typeof (Kvartplata.Classes.CounterRelation)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Period.PeriodId", (object) 0)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).SetFetchMode("Counter", FetchMode.Join);
        if (!this.chbCounterArchive.Checked)
          criteria.Add((ICriterion) NHibernate.Criterion.Restrictions.Ge("DEnd", (object) this.NextMonthClosed.PeriodName.Value));
      }
      else
        criteria = this.session.CreateCriteria(typeof (Kvartplata.Classes.CounterRelation)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Period", (object) Kvartplata.Classes.Options.Period)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).SetFetchMode("Counter", FetchMode.Join);
      this.dgvMainCounters.Columns.Clear();
      this.dgvMainCounters.DataSource = (object) null;
      this.dgvMainCounters.DataSource = (object) criteria.List<Kvartplata.Classes.CounterRelation>();
      this.session.Clear();
      this.oldListCounterRelation = (IList<Kvartplata.Classes.CounterRelation>) new List<Kvartplata.Classes.CounterRelation>();
      this.oldListCounterRelation = criteria.List<Kvartplata.Classes.CounterRelation>();
      int index = 0;
      foreach (Kvartplata.Classes.CounterRelation counterRelation in (List<Kvartplata.Classes.CounterRelation>) this.dgvMainCounters.DataSource)
      {
        counterRelation.OldHashCode = counterRelation.GetHashCode();
        counterRelation.IsEdit = false;
        this.oldListCounterRelation[index].OldHashCode = counterRelation.OldHashCode;
        ++index;
      }
      this.SetViewMainCounters();
    }

    private void SetViewMainCounters()
    {
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvMainCounters, 0, "Дата начала", "DBeg");
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvMainCounters, 1, "Дата окончания", "DEnd");
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvMainCounters, 0, (IList) this.session.CreateCriteria(typeof (Kvartplata.Classes.Counter)).Add((ICriterion) NHibernate.Criterion.Restrictions.IsNull("MainCounter")).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Company", (object) this.Client.Company)).Add((ICriterion) NHibernate.Criterion.Restrictions.Or((ICriterion) NHibernate.Criterion.Restrictions.Eq("Home", (object) this.Client.Home), (ICriterion) NHibernate.Criterion.Restrictions.IsNull("Home"))).Add((ICriterion) NHibernate.Criterion.Restrictions.In("BaseCounter.Id", (ICollection) new int[3]{ 1, 3, 4 })).List<Kvartplata.Classes.Counter>(), "CounterId", "AllInfo", "Счетчик", "Counter", 300, 300);
      Kvartplata.Classes.KvrplHelper.ViewEdit(this.dgvMainCounters);
      if (this.PastTime)
      {
        IList<YesNo> yesNoList = (IList<YesNo>) new List<YesNo>();
        Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvMainCounters, 3, (IList) this.session.CreateCriteria(typeof (YesNo)).List<YesNo>(), "YesNoId", "YesNoName", "Действует", "OnOff", 80, 80);
      }
      foreach (DataGridViewRow row in (IEnumerable) this.dgvMainCounters.Rows)
      {
        row.Cells["DBeg"].Value = (object) ((Kvartplata.Classes.CounterRelation) row.DataBoundItem).DBeg;
        row.Cells["DEnd"].Value = (object) ((Kvartplata.Classes.CounterRelation) row.DataBoundItem).DEnd;
        if (((Kvartplata.Classes.CounterRelation) row.DataBoundItem).Counter != null)
          row.Cells["Counter"].Value = (object) ((Kvartplata.Classes.CounterRelation) row.DataBoundItem).Counter.CounterId;
        if (this.PastTime && ((Kvartplata.Classes.CounterRelation) row.DataBoundItem).OnOff != null)
          row.Cells["OnOff"].Value = (object) ((Kvartplata.Classes.CounterRelation) row.DataBoundItem).OnOff.YesNoId;
      }
    }

    private void InsertMainCounter()
    {
      this.InsertRecord = true;
      Kvartplata.Classes.CounterRelation counterRelation = new Kvartplata.Classes.CounterRelation();
      counterRelation.OnOff = this.session.Get<YesNo>((object) Convert.ToInt16(1));
      if (!this.PastTime)
      {
        counterRelation.DBeg = Kvartplata.Classes.Options.Period.PeriodName.Value;
        counterRelation.DEnd = Convert.ToDateTime("31.12.2999");
        if (this.Client.Complex.IdFk == Kvartplata.Classes.Options.ComplexArenda.IdFk)
        {
          IList<LsArenda> lsArendaList = this.session.CreateCriteria(typeof (LsArenda)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient.ClientId", (object) this.Client.ClientId)).List<LsArenda>();
          if (lsArendaList.Count > 0)
          {
            if (lsArendaList[0].DBeg <= counterRelation.DBeg && lsArendaList[0].DEnd >= counterRelation.DBeg)
              counterRelation.DEnd = lsArendaList[0].DEnd;
            else if (lsArendaList[0].DBeg > counterRelation.DBeg)
            {
              counterRelation.DEnd = lsArendaList[0].DEnd;
              counterRelation.DBeg = lsArendaList[0].DBeg;
            }
          }
        }
      }
      else
      {
        counterRelation.DBeg = this.MonthClosed.PeriodName.Value;
        counterRelation.DEnd = this.MonthClosed.PeriodName.Value.AddMonths(1).AddDays(-1.0);
      }
      IList<Kvartplata.Classes.CounterRelation> counterRelationList = (IList<Kvartplata.Classes.CounterRelation>) new List<Kvartplata.Classes.CounterRelation>();
      if ((uint) this.dgvMainCounters.Rows.Count > 0U)
        counterRelationList = (IList<Kvartplata.Classes.CounterRelation>) (this.dgvMainCounters.DataSource as List<Kvartplata.Classes.CounterRelation>);
      counterRelationList.Add(counterRelation);
      this.dgvMainCounters.Columns.Clear();
      this.dgvMainCounters.DataSource = (object) null;
      this.dgvMainCounters.DataSource = (object) counterRelationList;
      this.SetViewMainCounters();
      this.dgvMainCounters.CurrentCell = this.dgvMainCounters.Rows[this.dgvMainCounters.Rows.Count - 1].Cells[0];
    }

    private void SaveAllMainCounter()
    {
      bool flag = false;
      foreach (DataGridViewRow row in (IEnumerable) this.dgvMainCounters.Rows)
      {
        if (((Kvartplata.Classes.CounterRelation) row.DataBoundItem).IsEdit)
        {
          this.oldCounterRelation = new Kvartplata.Classes.CounterRelation();
          foreach (Kvartplata.Classes.CounterRelation counterRelation in (IEnumerable<Kvartplata.Classes.CounterRelation>) this.oldListCounterRelation)
          {
            if (counterRelation.OldHashCode == ((Kvartplata.Classes.CounterRelation) row.DataBoundItem).OldHashCode)
            {
              this.oldCounterRelation = counterRelation;
              break;
            }
          }
          this.dgvMainCounters.Rows[row.Index].Selected = true;
          this.dgvMainCounters.CurrentCell = row.Cells[0];
          if (!this.SaveMainCounter())
            flag = true;
          else
            ((Kvartplata.Classes.CounterRelation) row.DataBoundItem).IsEdit = false;
        }
      }
      if (flag)
        return;
      this.LoadMainCounters();
    }

    private bool SaveMainCounter()
    {
      if (this.dgvMainCounters.Rows.Count <= 0 || this.dgvMainCounters.CurrentRow.Index < 0)
        return true;
      this.session = Kvartplata.Domain.CurrentSession;
      Kvartplata.Classes.CounterRelation dataBoundItem = (Kvartplata.Classes.CounterRelation) this.dgvMainCounters.CurrentRow.DataBoundItem;
      this.InsertRecord = dataBoundItem.UName == null;
      if (this.dgvMainCounters.CurrentRow.Cells["Counter"].Value == null)
      {
        int num = (int) MessageBox.Show("Выберите счетчик", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      if (this.dgvMainCounters.CurrentRow.Cells["DBeg"].Value == null || this.dgvMainCounters.CurrentRow.Cells["DEnd"].Value == null)
      {
        int num = (int) MessageBox.Show("Введите даты", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      dataBoundItem.DBeg = Convert.ToDateTime(this.dgvMainCounters.CurrentRow.Cells["DBeg"].Value);
      dataBoundItem.Counter = this.session.Get<Kvartplata.Classes.Counter>(this.dgvMainCounters.CurrentRow.Cells["Counter"].Value);
      DateTime? nullable;
      int num1;
      if (!this.PastTime && dataBoundItem.Counter.ArchivesDate.HasValue)
      {
        nullable = dataBoundItem.Counter.ArchivesDate;
        DateTime dateTime = Convert.ToDateTime(this.dgvMainCounters.CurrentRow.Cells["DEnd"].Value);
        num1 = nullable.HasValue ? (nullable.GetValueOrDefault() < dateTime ? 1 : 0) : 0;
      }
      else
        num1 = 0;
      DateTime dateTime1;
      if (num1 != 0)
      {
        Kvartplata.Classes.CounterRelation counterRelation = dataBoundItem;
        nullable = dataBoundItem.Counter.ArchivesDate;
        dateTime1 = nullable.Value;
        DateTime dateTime2 = dateTime1.AddDays(-1.0);
        counterRelation.DEnd = dateTime2;
      }
      else
        dataBoundItem.DEnd = Convert.ToDateTime(this.dgvMainCounters.CurrentRow.Cells["DEnd"].Value);
      if (dataBoundItem.DBeg > dataBoundItem.DEnd)
      {
        int num2 = (int) MessageBox.Show("Дата начала больше даты окончания", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      IList<Kvartplata.Classes.CounterRelation> counterRelationList1 = (IList<Kvartplata.Classes.CounterRelation>) new List<Kvartplata.Classes.CounterRelation>();
      ICriteria criteria1;
      if (!this.PastTime)
      {
        criteria1 = this.session.CreateCriteria(typeof (Kvartplata.Classes.CounterRelation)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Period.PeriodId", (object) 0)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).SetFetchMode("Counter", FetchMode.Join);
        if (!this.chbCounterArchive.Checked)
        {
          ICriteria criteria2 = criteria1;
          string propertyName = "DEnd";
          nullable = this.NextMonthClosed.PeriodName;
          // ISSUE: variable of a boxed type
          DateTime local = nullable.Value;
          SimpleExpression simpleExpression = NHibernate.Criterion.Restrictions.Ge(propertyName, (object) local);
          criteria2.Add((ICriterion) simpleExpression);
        }
      }
      else
        criteria1 = this.session.CreateCriteria(typeof (Kvartplata.Classes.CounterRelation)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Period", (object) Kvartplata.Classes.Options.Period)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).SetFetchMode("Counter", FetchMode.Join);
      IList<Kvartplata.Classes.CounterRelation> counterRelationList2 = criteria1.List<Kvartplata.Classes.CounterRelation>();
      Kvartplata.Classes.CounterRelation counterRelation1 = new Kvartplata.Classes.CounterRelation();
      this.session.CreateQuery("select c from CounterRelation c where c.LsClient=:cl and c.Counter.Service=:ser and c.Period.PeriodId=0").SetParameter<Kvartplata.Classes.LsClient>("cl", this.Client).SetParameter<Kvartplata.Classes.Service>("ser", dataBoundItem.Counter.Service).List<Kvartplata.Classes.CounterRelation>();
      if (!this.InsertRecord)
        counterRelation1 = counterRelationList2[this.dgvMainCounters.CurrentRow.Index];
      if (!this.PastTime)
      {
        if (this.InsertRecord && (dataBoundItem.DBeg <= this.LastDayMonthClosed || dataBoundItem.DEnd <= this.LastDayMonthClosed))
        {
          int num2 = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          return false;
        }
        if (!this.InsertRecord && (counterRelation1.DBeg <= this.LastDayMonthClosed && counterRelation1.DEnd < this.LastDayMonthClosed || dataBoundItem.DEnd < this.LastDayMonthClosed || counterRelation1.DBeg > this.LastDayMonthClosed && dataBoundItem.DBeg <= this.LastDayMonthClosed || counterRelation1.DBeg <= this.LastDayMonthClosed && (counterRelation1.DBeg != dataBoundItem.DBeg || counterRelation1.Counter != dataBoundItem.Counter)))
        {
          int num2 = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          return false;
        }
      }
      int num3;
      if (this.PastTime)
      {
        DateTime dend = dataBoundItem.DEnd;
        nullable = this.MonthClosed.PeriodName;
        dateTime1 = nullable.Value;
        DateTime dateTime2 = dateTime1.AddMonths(1);
        num3 = dend >= dateTime2 ? 1 : 0;
      }
      else
        num3 = 0;
      if (num3 != 0)
      {
        int num2 = (int) MessageBox.Show("Запись не может принадлежать открытому периоду", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      if (this.PastTime && Kvartplata.Classes.Options.Period.PeriodId <= this.MonthClosed.PeriodId)
      {
        int num2 = (int) MessageBox.Show("Невозможно внести изменения в закрытом периоде", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      dateTime1 = dataBoundItem.DBeg;
      int num4;
      if (dateTime1.Day == 1)
      {
        dateTime1 = dataBoundItem.DEnd;
        int day1 = dateTime1.Day;
        dateTime1 = Kvartplata.Classes.KvrplHelper.GetLastDayPeriod(dataBoundItem.DEnd);
        int day2 = dateTime1.Day;
        num4 = day1 != day2 ? 1 : 0;
      }
      else
        num4 = 1;
      if (num4 != 0)
      {
        int num2 = (int) MessageBox.Show("Разрешается вводить запись только с первого числа месяца, а закрывать последним числом месяца!", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      dataBoundItem.Period = this.PastTime ? Kvartplata.Classes.Options.Period : this.session.Get<Kvartplata.Classes.Period>((object) 0);
      dataBoundItem.LsClient = this.Client;
      dataBoundItem.Counter = this.session.Get<Kvartplata.Classes.Counter>(this.dgvMainCounters.CurrentRow.Cells["Counter"].Value);
      dataBoundItem.UName = Kvartplata.Classes.Options.Login;
      Kvartplata.Classes.CounterRelation counterRelation2 = dataBoundItem;
      dateTime1 = DateTime.Now;
      DateTime date = dateTime1.Date;
      counterRelation2.DEdit = date;
      if (this.PastTime)
        dataBoundItem.OnOff = this.session.Get<YesNo>(this.dgvMainCounters.CurrentRow.Cells["OnOff"].Value);
      try
      {
        if (this.InsertRecord)
        {
          this.InsertRecord = false;
          this.session.Save((object) dataBoundItem);
          this.session.Flush();
          if (this.PastTime && Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(32, this.Client.Company)) == 1)
          {
            if (this.city == 28)
            {
              if (MessageBox.Show("Внести основание?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
              {
                FrmArgument frmArgument = new FrmArgument();
                int num2 = (int) frmArgument.ShowDialog();
                frmArgument.Dispose();
                Kvartplata.Classes.CounterRelation counterRelation3 = dataBoundItem;
                                // ISSUE: variable of the null type
                CounterRelation local = null;
                Kvartplata.Classes.LsClient client = this.Client;
                int num5 = 1;
                string notetext = frmArgument.Argument();
                int num6 = this.PastTime ? 1 : 0;
                nullable = this.MonthClosed.PeriodName;
                DateTime monthClosed = nullable.Value;
                Kvartplata.Classes.KvrplHelper.SaveMainCounterToNoteBook(counterRelation3, (Kvartplata.Classes.CounterRelation) local, client, (short) num5, notetext, num6 != 0, monthClosed);
              }
            }
            else
            {
              Kvartplata.Classes.CounterRelation counterRelation3 = dataBoundItem;
                            // ISSUE: variable of the null type
              CounterRelation local = null;
              Kvartplata.Classes.LsClient client = this.Client;
              int num2 = 1;
              string notetext = "";
              int num5 = this.PastTime ? 1 : 0;
              nullable = this.MonthClosed.PeriodName;
              DateTime monthClosed = nullable.Value;
              Kvartplata.Classes.KvrplHelper.SaveMainCounterToNoteBook(counterRelation3, (Kvartplata.Classes.CounterRelation) local, client, (short) num2, notetext, num5 != 0, monthClosed);
            }
          }
        }
        else
        {
          this.session.GetNamedQuery("UpdateCounterRelation").SetDateTime("dbeg1", dataBoundItem.DBeg).SetDateTime("dend", dataBoundItem.DEnd).SetEntity("counter1", (object) dataBoundItem.Counter).SetEntity("onoff", (object) dataBoundItem.OnOff).SetParameter<string>("name", dataBoundItem.UName).SetParameter<DateTime>("data", dataBoundItem.DEdit).SetDateTime("dbeg2", this.oldCounterRelation.DBeg).SetEntity("client", (object) this.oldCounterRelation.LsClient).SetEntity("period", (object) this.oldCounterRelation.Period).SetEntity("counter2", (object) this.oldCounterRelation.Counter).ExecuteUpdate();
          if (Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(32, this.Client.Company)) == 1)
          {
            Kvartplata.Classes.CounterRelation counterRelation3 = dataBoundItem;
            Kvartplata.Classes.CounterRelation oldCounterRelation = this.oldCounterRelation;
            Kvartplata.Classes.LsClient client = this.Client;
            int num2 = 2;
            string notetext = "";
            int num5 = this.PastTime ? 1 : 0;
            nullable = this.MonthClosed.PeriodName;
            DateTime monthClosed = nullable.Value;
            Kvartplata.Classes.KvrplHelper.SaveMainCounterToNoteBook(counterRelation3, oldCounterRelation, client, (short) num2, notetext, num5 != 0, monthClosed);
          }
        }
      }
      catch (Exception ex)
      {
        int num2 = (int) MessageBox.Show("Невозможно сохранить запись", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
      }
      this.session.Clear();
      return true;
    }

    private void DelMainCounter()
    {
      if (this.dgvMainCounters.Rows.Count <= 0 || this.dgvMainCounters.CurrentRow == null || this.dgvMainCounters.CurrentRow.Index < 0 || MessageBox.Show("Удалить привязку к счетчику?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) != DialogResult.OK)
        return;
      this.session = Kvartplata.Domain.CurrentSession;
      Kvartplata.Classes.CounterRelation dataBoundItem = (Kvartplata.Classes.CounterRelation) this.dgvMainCounters.CurrentRow.DataBoundItem;
      DateTime? periodName;
      int num1;
      if (!this.PastTime)
      {
        DateTime dbeg = dataBoundItem.DBeg;
        periodName = this.MonthClosed.PeriodName;
        DateTime dateTime = periodName.Value.AddMonths(1);
        num1 = dbeg < dateTime ? 1 : 0;
      }
      else
        num1 = 0;
      if (num1 != 0)
      {
        int num2 = (int) MessageBox.Show("Дата начала принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
      }
      else if (this.PastTime && dataBoundItem.Period.PeriodId <= this.MonthClosed.PeriodId)
      {
        int num3 = (int) MessageBox.Show("Запись принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
      }
      else
      {
        try
        {
          this.session.Delete((object) dataBoundItem);
          this.session.Flush();
          if (Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(32, this.Client.Company)) == 1)
          {
            Kvartplata.Classes.CounterRelation counterRelation = dataBoundItem;
                        // ISSUE: variable of the null type
            CounterRelation local = null;
            Kvartplata.Classes.LsClient client = this.Client;
            int num4 = 3;
            string notetext = "";
            int num5 = this.PastTime ? 1 : 0;
            periodName = this.MonthClosed.PeriodName;
            DateTime monthClosed = periodName.Value;
            Kvartplata.Classes.KvrplHelper.SaveMainCounterToNoteBook(counterRelation, (Kvartplata.Classes.CounterRelation) local, client, (short) num4, notetext, num5 != 0, monthClosed);
          }
        }
        catch (Exception ex)
        {
          int num4 = (int) MessageBox.Show("Невозможно удалить счетчик", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
        }
      }
    }

    private void dgvMainCounters_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
    {
      if (((DataGridView) sender).DataSource == null)
        return;
      DataGridViewRow row = ((DataGridView) sender).Rows[e.RowIndex];
      DateTime dbeg = ((Kvartplata.Classes.CounterRelation) row.DataBoundItem).DBeg;
      DateTime? periodName = this.MonthClosed.PeriodName;
      DateTime dateTime1 = periodName.Value;
      DateTime dateTime2 = dateTime1.AddMonths(1);
      int num;
      if (dbeg <= dateTime2)
      {
        DateTime dend = ((Kvartplata.Classes.CounterRelation) row.DataBoundItem).DEnd;
        periodName = this.MonthClosed.PeriodName;
        dateTime1 = periodName.Value;
        DateTime dateTime3 = dateTime1.AddMonths(1);
        num = dend >= dateTime3 ? 1 : 0;
      }
      else
        num = 0;
      if (num != 0)
      {
        row.DefaultCellStyle.BackColor = Color.PapayaWhip;
      }
      else
      {
        row.DefaultCellStyle.BackColor = Color.White;
        row.DefaultCellStyle.ForeColor = Color.Gray;
      }
    }

    private void dgvMainCounters_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
    {
      this.btnDelRecord.Enabled = false;
      if (this.tcntrl.SelectedTab == this.tpSaldo && this.tcntrlBalance.SelectedIndex == 0 && !this.PastTime)
        this.btnSave.Enabled = false;
      else
        this.btnSave.Enabled = true;
      try
      {
        ((Kvartplata.Classes.CounterRelation) this.dgvMainCounters.CurrentRow.DataBoundItem).IsEdit = true;
      }
      catch
      {
      }
    }

    private void cbArchive_CheckedChanged(object sender, EventArgs e)
    {
      this.LoadMainCounters();
    }

    private void dgvMainCounters_CellMouseDown(object sender, DataGridViewCellMouseEventArgs e)
    {
      if (e.RowIndex == -1 || e.ColumnIndex == -1 || e.Button != MouseButtons.Right)
        return;
      this.dgvMainCounters.Focus();
      ((DataGridView) sender).Rows[e.RowIndex].Selected = true;
      this.dgvMainCounters.CurrentCell = this.dgvMainCounters.Rows[e.RowIndex].Cells[e.ColumnIndex];
      this.fCounter = false;
    }

    private void dgvMainCounters_CellEndEdit(object sender, DataGridViewCellEventArgs e)
    {
      if (this.dgvMainCounters.CurrentCell == null || this.dgvMainCounters.CurrentCell.Value == null)
        return;
      Kvartplata.Classes.CounterRelation dataBoundItem = (Kvartplata.Classes.CounterRelation) this.dgvMainCounters.CurrentRow.DataBoundItem;
      dataBoundItem.IsEdit = true;
      try
      {
        string name = this.dgvMainCounters.Columns[e.ColumnIndex].Name;
        if (!(name == "DBeg"))
        {
          if (!(name == "DEnd"))
          {
            if (name == "Counter")
            {
              try
              {
                dataBoundItem.Counter = this.session.Get<Kvartplata.Classes.Counter>(this.dgvMainCounters.CurrentRow.Cells["Counter"].Value);
              }
              catch
              {
              }
            }
          }
          else
          {
            try
            {
              dataBoundItem.DEnd = Convert.ToDateTime(this.dgvMainCounters.CurrentRow.Cells["DEnd"].Value);
            }
            catch
            {
            }
          }
        }
        else
        {
          try
          {
            dataBoundItem.DBeg = Convert.ToDateTime(this.dgvMainCounters.CurrentRow.Cells["DBeg"].Value);
          }
          catch
          {
          }
        }
      }
      catch (Exception ex)
      {
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
      }
    }

    private void LoadEvidence()
    {
      this.tsbMultiPastTime.Enabled = false;
      this.btnEdit.Visible = true;
      this.chbArhiv.Visible = true;
      if (this.city == 3 || this.city == 7 || this.city == 28)
        this.btnLoad.Visible = true;
      this.countersList = (IList<Kvartplata.Classes.Counter>) new List<Kvartplata.Classes.Counter>();
      this.session = Kvartplata.Domain.CurrentSession;
      string str1 = "";
      DateTime dateTime1;
      int num1;
      if (Kvartplata.Classes.Options.Period.PeriodId <= this.MonthClosed.PeriodId)
      {
        if (this.mpCurrentPeriod.OldMonth == 12)
        {
          dateTime1 = this.mpCurrentPeriod.Value;
          if (dateTime1.Month == 1)
            goto label_5;
        }
        num1 = 1;
        goto label_7;
      }
label_5:
      num1 = this.chbArhiv.Checked ? 1 : 0;
label_7:
      if (num1 != 0)
      {
        this.editEvidence = false;
        this.lblEdit.Visible = false;
        this.btnEdit.BackColor = this.pnEvidence.BackColor;
        this.tmrEvidence.Stop();
        this.btnEdit.BackColor = this.pnEvidence.BackColor;
        this.btnEdit.Enabled = false;
      }
      else
        this.btnEdit.Enabled = true;
      if (!this.editEvidence)
      {
        this.btnSave.Enabled = false;
        this.btnAddRecord.Enabled = false;
        this.btnDelRecord.Enabled = false;
        this.dgvEvidence.ReadOnly = true;
        this.chbArhiv.Enabled = true;
        this.cbShowAnotherOrg.Enabled = true;
        string str2 = "";
        int num2 = 0;
        if (!this.chbArhiv.Checked)
        {
          str2 = " and e.Period.PeriodId={2}";
          this.pnPeriod.Visible = false;
          num2 = Kvartplata.Classes.Options.Period.PeriodId;
        }
        else
        {
          if ((Kvartplata.Classes.Period) this.cmbPeriod.SelectedItem != null && (uint) ((Kvartplata.Classes.Period) this.cmbPeriod.SelectedItem).PeriodId > 0U)
          {
            str2 = " and e.Period.PeriodId={2}";
            num2 = ((Kvartplata.Classes.Period) this.cmbPeriod.SelectedItem).PeriodId;
          }
          if ((Kvartplata.Classes.Service) this.cmbFiltrService.SelectedItem != null && (uint) ((Kvartplata.Classes.Service) this.cmbFiltrService.SelectedItem).ServiceId > 0U)
          {
            str2 += string.Format(" and s.Service.ServiceId={0}", (object) ((Kvartplata.Classes.Service) this.cmbFiltrService.SelectedItem).ServiceId);
            num2 = ((Kvartplata.Classes.Period) this.cmbPeriod.SelectedItem).PeriodId;
          }
          this.pnPeriod.Visible = true;
        }
        string str3 = !(Kvartplata.Classes.Options.SortService == " s.ServiceId") ? " s.Service.ServiceName" : " s.Service.ServiceId";
        if (!this.cbShowAnotherOrg.Checked)
          str1 = " and s.Service.ServiceId not in (select Service_id from ServiceParam where Company_id={3} and Complex.IdFk={4} and SendRent=1)";
        this.evidencesList = this.session.CreateQuery(string.Format("select e from Evidence e join fetch e.Counter s left join fetch s.Service left join fetch s.TypeCounter where s.Complex.ComplexId={0} and s.LsClient.ClientId={1} and s.BaseCounter.Id=2 and s.Company.CompanyId={3} " + str1 + str2 + " order by e.Period.PeriodId desc,isnull(s.ArchivesDate,'2999-12-31') desc," + str3 + ",e.DBeg", (object) Kvartplata.Classes.Options.Complex.ComplexId, (object) this.Client.ClientId, (object) num2, (object) this.Client.Company.CompanyId, (object) this.Client.Complex.IdFk)).List<Kvartplata.Classes.Evidence>();
      }
      else
      {
        this.btnSave.Enabled = false;
        this.btnAddRecord.Enabled = true;
        this.btnDelRecord.Enabled = true;
        this.dgvEvidence.ReadOnly = false;
        this.chbArhiv.Enabled = false;
        if (!this.cbShowAnotherOrg.Checked)
          str1 = " and c.Service.ServiceId not in (select Service_id from ServiceParam where Company_id={2} and Complex.IdFk={3} and SendRent=1)";
        this.countersList = this.session.CreateQuery(string.Format("select c from Counter c left join fetch c.Service where c.Complex.ComplexId={0} and c.LsClient.ClientId={1} and c.BaseCounter.Id=2 " + str1 + " order by isnull(c.ArchivesDate,'2999-12-31') desc,c.Service.ServiceId,regulatefld(c.CounterNum)", (object) Kvartplata.Classes.Options.Complex.ComplexId, (object) this.Client.ClientId, (object) this.Client.Company.CompanyId, (object) this.Client.Complex.IdFk)).List<Kvartplata.Classes.Counter>();
        this.evidencesList = (IList<Kvartplata.Classes.Evidence>) new List<Kvartplata.Classes.Evidence>();
        foreach (Kvartplata.Classes.Counter counters in (IEnumerable<Kvartplata.Classes.Counter>) this.countersList)
        {
          IList<Kvartplata.Classes.Evidence> evidenceList1 = this.session.CreateCriteria(typeof (Kvartplata.Classes.Evidence)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Period", (object) Kvartplata.Classes.Options.Period)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Counter", (object) counters)).AddOrder(Order.Asc("DBeg")).List<Kvartplata.Classes.Evidence>();
          if (evidenceList1.Count > 0)
          {
            foreach (Kvartplata.Classes.Evidence evidence in (IEnumerable<Kvartplata.Classes.Evidence>) evidenceList1)
              this.evidencesList.Add(evidence);
          }
          else
          {
            DateTime? nullable = Kvartplata.Classes.Options.Period.PeriodName;
            DateTime dateTime2 = nullable.Value;
            nullable = this.MonthClosed.PeriodName;
            DateTime dateTime3 = nullable.Value;
            int num2;
            if (dateTime2 > dateTime3)
            {
              nullable = counters.ArchivesDate;
              if (nullable.HasValue)
              {
                nullable = counters.ArchivesDate;
                dateTime1 = Kvartplata.Classes.Options.Period.PeriodName.Value;
                num2 = nullable.HasValue ? (nullable.GetValueOrDefault() > dateTime1 ? 1 : 0) : 0;
              }
              else
                num2 = 1;
            }
            else
              num2 = 0;
            if (num2 != 0)
            {
              IList<Kvartplata.Classes.Evidence> evidenceList2 = this.session.CreateQuery(string.Format("select cp from Evidence cp where cp.Counter.CounterId={1} and cp.DBeg=(select max(DBeg) from Evidence where Counter.CounterId=cp.Counter.CounterId and Period.PeriodId<{0}) order by cp.Period.PeriodId desc,cp.DEnd desc", (object) Kvartplata.Classes.Options.Period.PeriodId, (object) counters.CounterId)).List<Kvartplata.Classes.Evidence>();
              Kvartplata.Classes.Evidence evidence1 = new Kvartplata.Classes.Evidence();
              if (evidenceList2.Count > 0)
              {
                evidence1 = evidenceList2[0];
                evidence1.Period = (Kvartplata.Classes.Period) null;
                Kvartplata.Classes.Evidence evidence2 = evidence1;
                dateTime1 = evidence1.DEnd;
                DateTime dateTime4 = dateTime1.AddDays(1.0);
                evidence2.DBeg = dateTime4;
                evidence1.Past = evidence1.Current;
              }
              else
              {
                evidence1.Counter = counters;
                Kvartplata.Classes.Evidence evidence2 = evidence1;
                nullable = counters.SetDate;
                DateTime dateTime4;
                if (!nullable.HasValue)
                {
                  nullable = Kvartplata.Classes.Options.Period.PeriodName;
                  dateTime4 = Kvartplata.Classes.KvrplHelper.FirstDay(nullable.Value);
                }
                else
                {
                  nullable = counters.SetDate;
                  dateTime4 = nullable.Value;
                }
                evidence2.DBeg = dateTime4;
                evidence1.Past = counters.EvidenceStart;
                evidence1.Current = counters.EvidenceStart;
              }
              Kvartplata.Classes.Evidence evidence3 = evidence1;
              DateTime dateTime5;
              if (Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(31, this.Client.Company)) != 1)
              {
                if (Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(31, this.Client.Company)) != 2)
                {
                  dateTime5 = DateTime.Now;
                }
                else
                {
                  dateTime1 = DateTime.Now;
                  dateTime5 = dateTime1.AddDays(-1.0);
                }
              }
              else
              {
                nullable = Kvartplata.Classes.Options.Period.PeriodName;
                dateTime5 = Kvartplata.Classes.KvrplHelper.LastDay(nullable.Value);
              }
              evidence3.DEnd = dateTime5;
              nullable = counters.ArchivesDate;
              int num3;
              if (nullable.HasValue)
              {
                nullable = counters.ArchivesDate;
                dateTime1 = evidence1.DEnd;
                num3 = nullable.HasValue ? (nullable.GetValueOrDefault() < dateTime1 ? 1 : 0) : 0;
              }
              else
                num3 = 0;
              if (num3 != 0)
              {
                Kvartplata.Classes.Evidence evidence2 = evidence1;
                nullable = counters.ArchivesDate;
                dateTime1 = nullable.Value;
                DateTime dateTime4 = dateTime1.AddDays(-1.0);
                evidence2.DEnd = dateTime4;
              }
              this.evidencesList.Add(evidence1);
            }
          }
        }
      }
      this.dgvEvidence.Columns.Clear();
      this.dgvEvidence.DataSource = (object) null;
      this.dgvEvidence.DataSource = (object) this.evidencesList;
      this.session.Clear();
      this.oldListEvidence = (IList<Kvartplata.Classes.Evidence>) new List<Kvartplata.Classes.Evidence>();
      foreach (Kvartplata.Classes.Evidence evidence in (List<Kvartplata.Classes.Evidence>) this.dgvEvidence.DataSource)
      {
        if (evidence.Period != null)
          evidence.OldHashCode = evidence.GetHashCode();
        this.oldListEvidence.Add(new Kvartplata.Classes.Evidence()
        {
          Counter = evidence.Counter,
          Current = evidence.Current,
          DBeg = evidence.DBeg,
          DEnd = evidence.DEnd,
          Past = evidence.Past,
          OldHashCode = evidence.OldHashCode,
          IsEdit = false
        });
      }
      this.SetViewEvidence();
      this.dgvEvidence.Focus();
      this.InsertRecord = false;
      this.evidenceDateEdit = false;
      this.btnSave.Enabled = false;
      this.MySettingsLsEvidence.GridName = "LsEvidence";
      this.LoadSettingsLsEvidence();
    }

    private void LoadSettingsLsEvidence()
    {
      this.MySettingsLsEvidence.Load();
      foreach (DataGridViewColumn column in (BaseCollection) this.dgvEvidence.Columns)
        this.MySettingsLsEvidence.GetMySettings(column);
    }

    private void dgvEvidence_ColumnWidthChanged(object sender, DataGridViewColumnEventArgs e)
    {
      if (this.MySettingsLsEvidence.FindByName(e.Column.Name) < 0)
        return;
      this.MySettingsLsEvidence.Columns[this.MySettingsLsEvidence.FindByName(e.Column.Name)].Width = e.Column.Width;
      this.MySettingsLsEvidence.Save();
    }

    private void SetViewEvidence()
    {
      if (this.city != 4)
      {
        Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvEvidence, 0, "Дата настоящего", "DEnd");
        Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvEvidence, 1, "Дата предыдущего", "DBeg");
      }
      else
      {
        Kvartplata.Classes.KvrplHelper.AddCalendarColumn(this.dgvEvidence, 0, "Дата настоящего", "DEnd");
        Kvartplata.Classes.KvrplHelper.AddCalendarColumn(this.dgvEvidence, 1, "Дата предыдущего", "DBeg");
      }
      Kvartplata.Classes.KvrplHelper.AddTextBoxColumn(this.dgvEvidence, 0, "Предыдущие показания", "Past", 90, false);
      Kvartplata.Classes.KvrplHelper.AddTextBoxColumn(this.dgvEvidence, 0, "Настоящие показания", "Current", 90, false);
      this.dgvEvidence.Columns["CounterNum"].HeaderText = "Номер счетчика";
      this.dgvEvidence.Columns["Volume"].HeaderText = "Расход";
      this.dgvEvidence.Columns["ServiceName"].HeaderText = "Услуга";
      this.dgvEvidence.Columns["ServiceName"].DisplayIndex = 0;
      this.dgvEvidence.Columns["CounterNum"].DisplayIndex = 1;
      this.dgvEvidence.Columns["DBeg"].DisplayIndex = 2;
      this.dgvEvidence.Columns["Past"].DisplayIndex = 3;
      this.dgvEvidence.Columns["Current"].DisplayIndex = 5;
      this.dgvEvidence.Columns["DEnd"].DisplayIndex = 4;
      this.dgvEvidence.Columns["Volume"].DisplayIndex = 6;
      this.dgvEvidence.Columns["UName"].DisplayIndex = 7;
      this.dgvEvidence.Columns["Dedit"].DisplayIndex = 8;
      this.dgvEvidence.Columns["ServiceName"].Visible = false;
      this.dgvEvidence.Columns["CounterNum"].Visible = false;
      this.dgvEvidence.Columns["Volume"].ReadOnly = true;
      this.dgvEvidence.Columns["ServiceName"].Width = 200;
      Kvartplata.Classes.KvrplHelper.ViewEdit(this.dgvEvidence);
      this.session = Kvartplata.Domain.CurrentSession;
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvEvidence, 0, (IList) this.session.CreateQuery(string.Format("select s from Service s,ServiceParam sp where sp.Service_id=s.ServiceId and s.Root=0 and s.ServiceId<>0 and sp.Company_id={0} and sp.Complex.IdFk={1} order by " + Kvartplata.Classes.Options.SortService, (object) this.Client.Company.CompanyId, (object) this.Client.Complex.IdFk)).List<Kvartplata.Classes.Service>(), "ServiceId", "ServiceName", "Услуга", "Service", 140, 140);
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvEvidence, 1, (IList) null, (string) null, (string) null, "Номер счетчика", "Num", 120, 120);
      if (this.chbArhiv.Checked)
        Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvEvidence, 0, (IList) this.session.CreateQuery(string.Format("select p from Period p where PeriodId in (select Period.PeriodId from Evidence where Counter.LsClient.ClientId={0})", (object) this.Client.ClientId)).List<Kvartplata.Classes.Period>(), "PeriodId", "PeriodName", "Период", "Period", 100, 100);
      foreach (DataGridViewRow row in (IEnumerable) this.dgvEvidence.Rows)
      {
        row.Cells["DBeg"].Value = (object) ((Kvartplata.Classes.Evidence) row.DataBoundItem).DBeg;
        row.Cells["DEnd"].Value = (object) ((Kvartplata.Classes.Evidence) row.DataBoundItem).DEnd;
        row.Cells["Past"].Value = (object) ((Kvartplata.Classes.Evidence) row.DataBoundItem).Past;
        row.Cells["Current"].Value = (object) ((Kvartplata.Classes.Evidence) row.DataBoundItem).Current;
        row.Cells["Dedit"].Value = (object) ((Kvartplata.Classes.Evidence) row.DataBoundItem).DEdit.ToShortDateString();
        if (this.chbArhiv.Checked)
          row.Cells["Period"].Value = (object) ((Kvartplata.Classes.Evidence) row.DataBoundItem).Period.PeriodId;
        if (((Kvartplata.Classes.Evidence) row.DataBoundItem).Counter != null && ((Kvartplata.Classes.Evidence) row.DataBoundItem).Counter.Service != null)
        {
          row.Cells["Service"].Value = (object) ((Kvartplata.Classes.Evidence) row.DataBoundItem).Counter.Service.ServiceId;
          IList<Kvartplata.Classes.Counter> counterList1 = (IList<Kvartplata.Classes.Counter>) new List<Kvartplata.Classes.Counter>();
          IList<Kvartplata.Classes.Counter> counterList2 = !this.chbArhiv.Checked ? this.session.CreateCriteria(typeof (Kvartplata.Classes.Counter)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Service.ServiceId", (object) Convert.ToInt16(row.Cells["Service"].Value))).Add((ICriterion) NHibernate.Criterion.Restrictions.Or((ICriterion) NHibernate.Criterion.Restrictions.Gt("ArchivesDate", (object) Convert.ToDateTime(row.Cells["DEnd"].Value)), (ICriterion) NHibernate.Criterion.Restrictions.IsNull("ArchivesDate"))).List<Kvartplata.Classes.Counter>() : this.session.CreateCriteria(typeof (Kvartplata.Classes.Counter)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Service.ServiceId", (object) Convert.ToInt16(row.Cells["Service"].Value))).List<Kvartplata.Classes.Counter>();
          row.Cells["Num"] = (DataGridViewCell) new DataGridViewComboBoxCell()
          {
            DisplayStyleForCurrentCellOnly = true,
            ValueMember = "CounterId",
            DisplayMember = "CounterNum",
            DataSource = (object) counterList2
          };
          row.Cells["Num"].Value = (object) ((Kvartplata.Classes.Evidence) row.DataBoundItem).Counter.CounterId;
        }
      }
      this.session.Clear();
    }

    private void dgvEvidence_CurrentCellDirtyStateChanged(object sender, EventArgs e)
    {
      if (!this.dgvEvidence.IsCurrentCellDirty)
        return;
      this.dgvEvidence.CommitEdit(DataGridViewDataErrorContexts.Commit);
      if (this.dgvEvidence.CurrentCell.ColumnIndex == this.dgvEvidence.Rows[this.dgvEvidence.CurrentRow.Index].Cells["Service"].ColumnIndex || this.dgvEvidence.CurrentCell.ColumnIndex == this.dgvEvidence.Rows[this.dgvEvidence.CurrentRow.Index].Cells["DEnd"].ColumnIndex)
      {
        try
        {
          this.session = Kvartplata.Domain.CurrentSession;
          int int32 = Convert.ToInt32(this.dgvEvidence.CurrentRow.Cells["Num"].Value);
          IList<Kvartplata.Classes.Counter> counterList1 = (IList<Kvartplata.Classes.Counter>) new List<Kvartplata.Classes.Counter>();
          IList<Kvartplata.Classes.Counter> counterList2 = this.session.CreateCriteria(typeof (Kvartplata.Classes.Counter)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Service.ServiceId", (object) Convert.ToInt16(this.dgvEvidence.CurrentRow.Cells["Service"].Value))).Add((ICriterion) NHibernate.Criterion.Restrictions.Or((ICriterion) NHibernate.Criterion.Restrictions.Gt("ArchivesDate", (object) Convert.ToDateTime(this.dgvEvidence.CurrentRow.Cells["DEnd"].Value)), (ICriterion) NHibernate.Criterion.Restrictions.IsNull("ArchivesDate"))).List<Kvartplata.Classes.Counter>();
          this.dgvEvidence.CurrentRow.Cells["Num"] = (DataGridViewCell) new DataGridViewComboBoxCell()
          {
            DisplayStyleForCurrentCellOnly = true,
            ValueMember = "CounterId",
            DisplayMember = "CounterNum",
            DataSource = (object) counterList2
          };
          if (counterList2.IndexOf(this.session.Get<Kvartplata.Classes.Counter>((object) int32)) != -1)
            this.dgvEvidence.CurrentRow.Cells["Num"].Value = (object) int32;
          this.session.Clear();
        }
        catch
        {
        }
      }
    }

    private void PrepareEvidence()
    {
      this.evidencePeriods = this.session.CreateQuery(string.Format("from Period p where PeriodId<=(select max(Period.PeriodId) from Evidence where Counter.LsClient.ClientId={0}) order by PeriodId desc", (object) this.Client.ClientId)).List<Kvartplata.Classes.Period>();
      this.evidencePeriods.Insert(0, new Kvartplata.Classes.Period(0, new DateTime?()));
      this.cmbPeriod.DataSource = (object) this.evidencePeriods;
      this.cmbPeriod.ValueMember = "PeriodId";
      this.cmbPeriod.DisplayMember = "PeriodName";
      this.cmbDetailPeriod.DataSource = (object) this.evidencePeriods;
      this.cmbDetailPeriod.ValueMember = "PeriodId";
      this.cmbDetailPeriod.DisplayMember = "PeriodName";
      IList<Kvartplata.Classes.Service> serviceList = this.session.CreateQuery("select s from Service s where s.Root=0 and s.ServiceId<>0 order by " + Kvartplata.Classes.Options.SortService).List<Kvartplata.Classes.Service>();
      serviceList.Insert(0, new Kvartplata.Classes.Service((short) 0, ""));
      this.cmbFiltrService.DataSource = (object) serviceList;
      this.cmbFiltrService.ValueMember = "ServiceId";
      this.cmbFiltrService.DisplayMember = "ServiceName";
      this.cmbFiltrDetailService.DataSource = (object) serviceList;
      this.cmbFiltrDetailService.ValueMember = "ServiceId";
      this.cmbFiltrDetailService.DisplayMember = "ServiceName";
    }

    private void InsertEvidence()
    {
      Kvartplata.Classes.Evidence evidence = new Kvartplata.Classes.Evidence();
      evidence.DBeg = DateTime.Now;
      evidence.DEnd = Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(31, this.Client.Company)) != 1 ? DateTime.Now : Kvartplata.Classes.KvrplHelper.LastDay(Kvartplata.Classes.Options.Period.PeriodName.Value);
      IList<Kvartplata.Classes.Evidence> evidenceList = (IList<Kvartplata.Classes.Evidence>) new List<Kvartplata.Classes.Evidence>();
      if ((uint) this.dgvEvidence.Rows.Count > 0U)
        evidenceList = (IList<Kvartplata.Classes.Evidence>) (this.dgvEvidence.DataSource as List<Kvartplata.Classes.Evidence>);
      evidenceList.Add(evidence);
      this.dgvEvidence.Columns.Clear();
      this.dgvEvidence.DataSource = (object) null;
      this.dgvEvidence.DataSource = (object) evidenceList;
      this.SetViewEvidence();
      this.dgvEvidence.CurrentCell = this.dgvEvidence.Rows[this.dgvEvidence.Rows.Count - 1].Cells[1];
    }

    private void SaveAllEvidence()
    {
      bool flag = false;
      foreach (DataGridViewRow row in (IEnumerable) this.dgvEvidence.Rows)
      {
        if (((Kvartplata.Classes.Evidence) row.DataBoundItem).IsEdit)
        {
          this.oldEvidence = new Kvartplata.Classes.Evidence();
          foreach (Kvartplata.Classes.Evidence evidence in (IEnumerable<Kvartplata.Classes.Evidence>) this.oldListEvidence)
          {
            if (evidence.OldHashCode == ((Kvartplata.Classes.Evidence) row.DataBoundItem).OldHashCode)
            {
              this.oldEvidence = evidence;
              break;
            }
          }
          this.dgvEvidence.Rows[row.Index].Selected = true;
          this.dgvEvidence.CurrentCell = row.Cells[0];
          if (!this.SaveEvidence())
            flag = true;
          else
            ((Kvartplata.Classes.Evidence) row.DataBoundItem).IsEdit = false;
        }
      }
      if (flag)
        return;
      this.LoadEvidence();
    }

    private bool SaveEvidence()
    {
      if (this.dgvEvidence.Rows.Count <= 0 || this.dgvEvidence.CurrentRow.Index < 0)
        return true;
      this.session.Clear();
      this.session = Kvartplata.Domain.CurrentSession;
      if (Kvartplata.Classes.Options.Period.PeriodId <= this.MonthClosed.PeriodId)
      {
        int num = (int) MessageBox.Show("Невозможно внесение и изменение записей в закрытом месяце", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        return false;
      }
      Kvartplata.Classes.Evidence dataBoundItem = (Kvartplata.Classes.Evidence) this.dgvEvidence.CurrentRow.DataBoundItem;
      this.InsertRecord = dataBoundItem.Period == null;
      DateTime dbeg1 = dataBoundItem.DBeg;
      dataBoundItem.IsEdit = false;
      if (this.dgvEvidence.CurrentRow.Cells["DBeg"].Value != null)
      {
        try
        {
          dataBoundItem.DBeg = Convert.ToDateTime(this.dgvEvidence.CurrentRow.Cells["DBeg"].Value);
        }
        catch
        {
          int num = (int) MessageBox.Show("Проверьте правильность введенных дат", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          return false;
        }
        if (this.dgvEvidence.CurrentRow.Cells["DEnd"].Value != null)
        {
          try
          {
            dataBoundItem.DEnd = Convert.ToDateTime(this.dgvEvidence.CurrentRow.Cells["DEnd"].Value);
          }
          catch
          {
            int num = (int) MessageBox.Show("Проверьте правильность введенных дат", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            return false;
          }
          if (this.dgvEvidence.CurrentRow.Cells["Num"].Value != null)
          {
            dataBoundItem.Counter = this.session.Get<Kvartplata.Classes.Counter>(this.dgvEvidence.CurrentRow.Cells["Num"].Value);
            DateTime dend1 = dataBoundItem.DEnd;
            DateTime now = Kvartplata.Classes.Options.Period.PeriodName.Value;
            DateTime dateTime1 = now.AddMonths(1);
            if (dend1 >= dateTime1)
            {
              int num = (int) MessageBox.Show("Нельзя внести показания в будущее время", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
              return false;
            }
            if (this.dgvEvidence.CurrentRow.Cells["Past"].Value != null && this.dgvEvidence.CurrentRow.Cells["Current"].Value != null)
            {
              try
              {
                dataBoundItem.Past = Convert.ToDouble(Kvartplata.Classes.KvrplHelper.ChangeSeparator(this.dgvEvidence.CurrentRow.Cells["Past"].Value.ToString()));
                dataBoundItem.Current = Convert.ToDouble(Kvartplata.Classes.KvrplHelper.ChangeSeparator(this.dgvEvidence.CurrentRow.Cells["Current"].Value.ToString()));
                if (dataBoundItem.Current < dataBoundItem.Past)
                {
                  if (this.city == 3 && dataBoundItem.Volume < Decimal.Zero)
                  {
                    int num = (int) MessageBox.Show("Невозможно ввести отрицательный расход", "Внимание!!!", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return false;
                  }
                  if (MessageBox.Show("Настоящие показания меньше предыдущих. Продолжить?", "Внимание!!!", MessageBoxButtons.OKCancel, MessageBoxIcon.Hand) == DialogResult.Cancel)
                    return false;
                }
                if ((dataBoundItem.Current - 500.0 > dataBoundItem.Past && (this.city != 1 || (int) dataBoundItem.Counter.Service.ServiceId != 23) || this.city == 1 && (int) dataBoundItem.Counter.Service.ServiceId == 23 && dataBoundItem.Current - 1000.0 > dataBoundItem.Past) && MessageBox.Show("Слишком большой расход. Продолжить?", "Внимание!!!", MessageBoxButtons.OKCancel, MessageBoxIcon.Hand) == DialogResult.Cancel)
                  return false;
                if (this.InsertRecord)
                {
                  if (this.session.CreateCriteria(typeof (Kvartplata.Classes.Evidence)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Counter", (object) dataBoundItem.Counter)).List<Kvartplata.Classes.Evidence>().Count == 0 && dataBoundItem.Past != dataBoundItem.Counter.EvidenceStart && MessageBox.Show("Взять начальные показания с закладки 'Счетчики'?", "", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
                    dataBoundItem.Past = dataBoundItem.Counter.EvidenceStart;
                }
              }
              catch (Exception ex)
              {
                int num = (int) MessageBox.Show("Показания введены некорректно", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                return false;
              }
              if (dataBoundItem.DEnd < dataBoundItem.DBeg)
              {
                int num = (int) MessageBox.Show("Дата настоящего меньше даты предыдущего", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                return false;
              }
              DateTime dend2 = dataBoundItem.DEnd;
              now = DateTime.Now;
              DateTime dateTime2 = now.AddYears(-3);
              int num1;
              if (!(dend2 <= dateTime2))
              {
                DateTime dend3 = dataBoundItem.DEnd;
                now = DateTime.Now;
                DateTime dateTime3 = now.AddYears(3);
                if (!(dend3 >= dateTime3))
                {
                  DateTime dbeg2 = dataBoundItem.DBeg;
                  now = DateTime.Now;
                  DateTime dateTime4 = now.AddYears(-3);
                  if (!(dbeg2 <= dateTime4))
                  {
                    DateTime dbeg3 = dataBoundItem.DBeg;
                    now = DateTime.Now;
                    DateTime dateTime5 = now.AddYears(3);
                    num1 = dbeg3 >= dateTime5 ? 1 : 0;
                    goto label_36;
                  }
                }
              }
              num1 = 1;
label_36:
              if (num1 != 0 && MessageBox.Show("Дата показаний от текущей более, чем на 3 года. Продолжить сохранение? ", "Внимание", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.No)
                return false;
              if (this.dgvEvidence.CurrentRow.Cells["Num"].Value == null)
              {
                int num2 = (int) MessageBox.Show("Выберите счетчик", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                return false;
              }
              Kvartplata.Classes.Counter counter = this.session.Get<Kvartplata.Classes.Counter>(this.dgvEvidence.CurrentRow.Cells["Num"].Value);
              if (counter.TypeCounter != null)
              {
                double num2 = Math.Pow(10.0, (double) counter.TypeCounter.CDigit);
                if (dataBoundItem.Current >= num2 || dataBoundItem.Past >= num2)
                {
                  int num3 = (int) MessageBox.Show("Показания не соответствуют разрядности счетчика", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                  return false;
                }
              }
              if (this.dgvEvidence.CurrentRow.Cells["Num"].Value == null)
              {
                int num2 = (int) MessageBox.Show("Не выбран счетчик!", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                return false;
              }
              dataBoundItem.Period = Kvartplata.Classes.Options.Period;
              dataBoundItem.UName = Kvartplata.Classes.Options.Login;
              Kvartplata.Classes.Evidence evidence = dataBoundItem;
              now = DateTime.Now;
              DateTime date = now.Date;
              evidence.DEdit = date;
              try
              {
                if (!this.InsertRecord)
                {
                  this.session.CreateQuery("update Evidence set DBeg=:dbeg,DEnd=:dend,Past=:past,Current=:current,UName=:uname,DEdit=:dedit where Period.PeriodId=:period and Counter.CounterId=:counter and DBeg=:oldbeg").SetParameter<DateTime>("dbeg", dataBoundItem.DBeg).SetParameter<DateTime>("dend", dataBoundItem.DEnd).SetDouble("past", dataBoundItem.Past).SetParameter<double>("current", dataBoundItem.Current).SetParameter<int>("period", Kvartplata.Classes.Options.Period.PeriodId).SetParameter<Kvartplata.Classes.Counter>("counter", dataBoundItem.Counter).SetParameter<DateTime>("oldbeg", this.oldEvidence.DBeg).SetParameter<string>("uname", dataBoundItem.UName).SetParameter<DateTime>("dedit", dataBoundItem.DEdit).ExecuteUpdate();
                }
                else
                {
                  this.session.Save((object) dataBoundItem);
                  this.session.Flush();
                }
              }
              catch (Exception ex)
              {
                int num2 = (int) MessageBox.Show("Произошла ошибка. Данные не сохранены", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
              }
              this.session.Clear();
              this.btnAddRecord.Enabled = true;
              this.btnDelRecord.Enabled = true;
              this.btnSave.Enabled = false;
              return true;
            }
            int num4 = (int) MessageBox.Show("Показания не введены", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            return false;
          }
          int num5 = (int) MessageBox.Show("Не выбран счетчик!", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          return false;
        }
        int num6 = (int) MessageBox.Show("Дата настоящих показаний не введена", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      int num7 = (int) MessageBox.Show("Дата предыдущих показаний не введена", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      return false;
    }

    private void DelEvidence()
    {
      DateTime? periodName = this.MonthClosed.PeriodName;
      DateTime dateTime1 = periodName.Value;
      periodName = Kvartplata.Classes.Options.Period.PeriodName;
      DateTime dateTime2 = periodName.Value;
      if (dateTime1 >= dateTime2)
      {
        int num1 = (int) MessageBox.Show("Невозможно удалить запись в закрытом периоде!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
      }
      else
      {
        if (MessageBox.Show("Удалить показания счетчика из этого периода?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) != DialogResult.OK)
          return;
        this.session = Kvartplata.Domain.CurrentSession;
        Kvartplata.Classes.Evidence dataBoundItem = (Kvartplata.Classes.Evidence) this.dgvEvidence.CurrentRow.DataBoundItem;
        try
        {
          this.session.Delete((object) dataBoundItem);
          this.session.Flush();
        }
        catch (Exception ex)
        {
          int num2 = (int) MessageBox.Show("Невозможно удалить запись", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
        }
        this.session.Clear();
      }
    }

    private void btnGetCounters_Click(object sender, EventArgs e)
    {
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(42, 2, this.Client.Company, true))
        return;
      if (this.MonthClosed.PeriodName.Value >= Kvartplata.Classes.Options.Period.PeriodName.Value)
      {
        int num1 = (int) MessageBox.Show("Невозможно перенести счетчики в закрытый период", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
      }
      else
      {
        if (MessageBox.Show("Внести показания из предыдущего периода", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) != DialogResult.OK)
          return;
        if (this.session.CreateQuery(string.Format("select e from Evidence e left join fetch e.Counter c where e.Period.PeriodId={0} and c.LsClient.ClientId={1}", (object) Kvartplata.Classes.Options.Period.PeriodId, (object) this.Client.ClientId)).List<Kvartplata.Classes.Evidence>().Count > 0)
        {
          if (MessageBox.Show("В текущем периоде обнаружены показания счетчиков. Все равно внести показания?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.Cancel)
            return;
          foreach (DataGridViewRow row in (IEnumerable) this.dgvEvidence.Rows)
          {
            this.session = Kvartplata.Domain.CurrentSession;
            Kvartplata.Classes.Evidence evidence = new Kvartplata.Classes.Evidence();
            Kvartplata.Classes.Evidence dataBoundItem = (Kvartplata.Classes.Evidence) row.DataBoundItem;
            try
            {
              this.session.Delete((object) dataBoundItem);
              this.session.Flush();
            }
            catch (Exception ex)
            {
              Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
            }
            this.session.Clear();
          }
        }
        FrmSelectPeriod frmSelectPeriod = new FrmSelectPeriod();
        int num2 = (int) frmSelectPeriod.ShowDialog();
        Kvartplata.Classes.Period period = frmSelectPeriod.period;
        frmSelectPeriod.Dispose();
        if (period != null)
        {
          this.session = Kvartplata.Domain.CurrentSession;
          foreach (Kvartplata.Classes.Evidence evidence1 in (IEnumerable<Kvartplata.Classes.Evidence>) this.session.CreateQuery(string.Format("select cp from Evidence cp, Counter c where cp.Counter=c and c.LsClient.ClientId={0} and cp.Period.PeriodId={1} and cp.DEnd=(select max(DEnd) from Evidence where Counter=c and Period.PeriodId={1}) and (c.ArchivesDate is null or c.ArchivesDate >= '{2}')" + "", (object) this.Client.ClientId, (object) period.PeriodId, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.Options.Period.PeriodName.Value.AddMonths(1)))).List<Kvartplata.Classes.Evidence>())
          {
            Kvartplata.Classes.Evidence evidence2 = new Kvartplata.Classes.Evidence();
            evidence2.Counter = evidence1.Counter;
            evidence2.Period = Kvartplata.Classes.Options.Period;
            evidence2.Past = evidence1.Current;
            evidence2.Current = evidence1.Current;
            evidence2.DBeg = evidence1.DEnd.AddDays(1.0);
            evidence2.DEnd = Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(31, this.Client.Company)) != 1 ? DateTime.Now : Kvartplata.Classes.KvrplHelper.LastDay(DateTime.Now);
            evidence2.UName = Kvartplata.Classes.Options.Login;
            evidence2.DEdit = DateTime.Now;
            try
            {
              this.session.Save((object) evidence2);
              this.session.Flush();
            }
            catch (Exception ex)
            {
              Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
            }
          }
          this.session.Clear();
          this.LoadEvidence();
        }
      }
    }

    private void tcntrlCounters_SelectedIndexChanged(object sender, EventArgs e)
    {
      this.lblEdit.Visible = false;
      this.btnEdit.BackColor = this.pnEvidence.BackColor;
      this.tmrEvidence.Stop();
      this.editEvidence = false;
      if (this.tcntrlCounters.SelectedIndex == 1)
      {
        this.LoadCounters();
        this.btnArchive.Enabled = true;
      }
      if (this.tcntrlCounters.SelectedIndex == 0)
      {
        this.LoadEvidence();
        this.btnArchive.Enabled = false;
      }
      if (this.tcntrlCounters.SelectedTab == this.tpAudit)
      {
        this.LoadAudit();
        this.btnArchive.Enabled = false;
      }
      if (this.tcntrlCounters.SelectedTab == this.tpSeal)
      {
        this.LoadSeal();
        this.btnArchive.Enabled = false;
        this.tsbMultiPastTime.Enabled = false;
      }
      if (this.tcntrlCounters.SelectedTab != this.tpDetailEvidence)
        return;
      this.LoadDetailEvidence();
    }

    private void dgvEvidence_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
    {
      this.btnSave.Enabled = true;
      this.btnDelRecord.Enabled = false;
      ((Kvartplata.Classes.Evidence) this.dgvEvidence.CurrentRow.DataBoundItem).IsEdit = true;
    }

    private void dgvEvidence_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
    {
      if (((DataGridView) sender).DataSource == null)
        return;
      DataGridViewRow row = ((DataGridView) sender).Rows[e.RowIndex];
      if (((Kvartplata.Classes.Evidence) row.DataBoundItem).Period != null && ((Kvartplata.Classes.Evidence) row.DataBoundItem).Period.PeriodId == this.MonthClosed.PeriodId + 1)
      {
        row.DefaultCellStyle.BackColor = Color.PapayaWhip;
        row.DefaultCellStyle.ForeColor = Color.Black;
        row.DefaultCellStyle.Font = new Font(this.dgvEvidence.Font, FontStyle.Regular);
      }
      else if (((Kvartplata.Classes.Evidence) row.DataBoundItem).Period != null)
      {
        row.DefaultCellStyle.BackColor = Color.White;
        row.DefaultCellStyle.ForeColor = Color.Gray;
        row.DefaultCellStyle.Font = new Font(this.dgvEvidence.Font, FontStyle.Regular);
      }
      else
      {
        row.DefaultCellStyle.BackColor = Color.White;
        row.DefaultCellStyle.ForeColor = Color.Black;
        row.DefaultCellStyle.Font = new Font(this.dgvEvidence.Font, FontStyle.Italic);
      }
    }

    private void btnEdit_Click(object sender, EventArgs e)
    {
      this.editEvidence = !this.editEvidence;
      if (this.editEvidence)
      {
        this.lblEdit.Visible = true;
        this.btnEdit.BackColor = Color.DarkOrange;
        this.tmrEvidence.Start();
      }
      else
      {
        this.lblEdit.Visible = false;
        this.btnEdit.BackColor = this.pnEvidence.BackColor;
        this.tmrEvidence.Stop();
      }
      this.LoadEvidence();
    }

    private void cmbPeriod_SelectionChangeCommitted(object sender, EventArgs e)
    {
      this.LoadEvidence();
    }

    private void dgvEvidence_CellLeave(object sender, DataGridViewCellEventArgs e)
    {
      Kvartplata.Classes.Evidence dataBoundItem1 = (Kvartplata.Classes.Evidence) this.dgvEvidence.CurrentRow.DataBoundItem;
      try
      {
        if (!this.btnSave.Enabled || this.evidenceDateEdit || (!dataBoundItem1.IsEdit || this.InsertRecord) || (this.dgvEvidence.CurrentRow.Cells["DEnd"].ColumnIndex != e.ColumnIndex || dataBoundItem1.Period != null) || !(dataBoundItem1.DEnd != Convert.ToDateTime(this.dgvEvidence.CurrentRow.Cells["DEnd"].Value)))
          return;
        this.evidenceDateEdit = true;
        if (MessageBox.Show("Изменить дату показаний у всех счетчиков?", "", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.Cancel)
          return;
        foreach (DataGridViewRow row in (IEnumerable) this.dgvEvidence.Rows)
        {
          Kvartplata.Classes.Evidence dataBoundItem2 = (Kvartplata.Classes.Evidence) row.DataBoundItem;
          if (dataBoundItem2.Period == null && row.Index != this.dgvEvidence.CurrentRow.Index)
          {
            row.Cells["DEnd"].Value = this.dgvEvidence.CurrentRow.Cells["DEnd"].Value;
            dataBoundItem2.IsEdit = true;
          }
        }
        this.dgvEvidence.Refresh();
      }
      catch (Exception ex)
      {
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
      }
    }

    private void dgvEvidence_CellEndEdit(object sender, DataGridViewCellEventArgs e)
    {
      if (this.dgvEvidence.CurrentCell == null || this.dgvEvidence.CurrentCell.Value == null)
        return;
      Kvartplata.Classes.Evidence dataBoundItem = (Kvartplata.Classes.Evidence) this.dgvEvidence.CurrentRow.DataBoundItem;
      dataBoundItem.IsEdit = true;
      try
      {
        string name = this.dgvEvidence.Columns[e.ColumnIndex].Name;
        if (!(name == "DBeg"))
        {
          if (!(name == "DEnd"))
          {
            if (!(name == "Num"))
            {
              if (!(name == "Current"))
              {
                if (name == "Past")
                {
                  try
                  {
                    dataBoundItem.Past = Convert.ToDouble(Kvartplata.Classes.KvrplHelper.ChangeSeparator(this.dgvEvidence.CurrentRow.Cells["Past"].Value.ToString()));
                  }
                  catch
                  {
                  }
                }
              }
              else
              {
                try
                {
                  dataBoundItem.Current = Convert.ToDouble(Kvartplata.Classes.KvrplHelper.ChangeSeparator(this.dgvEvidence.CurrentRow.Cells["Current"].Value.ToString()));
                }
                catch
                {
                }
              }
            }
            else
            {
              try
              {
                dataBoundItem.Counter = this.session.Get<Kvartplata.Classes.Counter>(this.dgvEvidence.CurrentRow.Cells["Num"].Value);
              }
              catch
              {
              }
            }
          }
          else
          {
            try
            {
              dataBoundItem.DEnd = Convert.ToDateTime(this.dgvEvidence.CurrentRow.Cells["DEnd"].Value);
            }
            catch
            {
            }
          }
        }
        else
        {
          try
          {
            dataBoundItem.DBeg = Convert.ToDateTime(this.dgvEvidence.CurrentRow.Cells["DBeg"].Value);
          }
          catch
          {
          }
        }
      }
      catch (Exception ex)
      {
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
      }
    }

    private void dgvEvidence_CellValidating(object sender, DataGridViewCellValidatingEventArgs e)
    {
      try
      {
        if (this.dgvEvidence.CurrentCell == null || !this.dgvEvidence.Focused)
          return;
        if (this.dgvEvidence.CurrentCell == this.dgvEvidence.CurrentRow.Cells["DEnd"] || this.dgvEvidence.CurrentCell == this.dgvEvidence.CurrentRow.Cells["DBeg"])
        {
          try
          {
            Convert.ToDateTime(this.dgvEvidence.CurrentRow.Cells["DEnd"].Value);
            Convert.ToDateTime(this.dgvEvidence.CurrentRow.Cells["DBeg"].Value);
          }
          catch
          {
            int num = (int) MessageBox.Show("Проверьте правильность введенных дат", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            e.Cancel = true;
          }
        }
        if (this.dgvEvidence.CurrentCell == this.dgvEvidence.CurrentRow.Cells["Current"] || this.dgvEvidence.CurrentCell == this.dgvEvidence.CurrentRow.Cells["Past"])
        {
          try
          {
            Convert.ToDouble(Kvartplata.Classes.KvrplHelper.ChangeSeparator(this.dgvEvidence.CurrentRow.Cells["Past"].Value.ToString()));
            Convert.ToDouble(Kvartplata.Classes.KvrplHelper.ChangeSeparator(this.dgvEvidence.CurrentRow.Cells["Current"].Value.ToString()));
          }
          catch
          {
            int num = (int) MessageBox.Show("Проверьте правильность введенных показаний", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            e.Cancel = true;
          }
        }
      }
      catch
      {
      }
    }

    private void LoadDetailEvidence()
    {
      this.session = Kvartplata.Domain.CurrentSession;
      this.session.Clear();
      this.chbArhiv.Visible = true;
      this.btnSave.Enabled = false;
      this.btnAddRecord.Enabled = false;
      this.btnDelRecord.Enabled = false;
      this.tsbMultiPastTime.Enabled = false;
      this.btnArchive.Enabled = false;
      string str1 = "";
      string str2 = "";
      int num = 0;
      if (!this.chbArhiv.Checked)
      {
        str1 = " and de.Period.PeriodId={0}";
        this.pnDetailPeriod.Visible = false;
        num = Kvartplata.Classes.Options.Period.PeriodId;
      }
      else
      {
        if ((Kvartplata.Classes.Period) this.cmbPeriod.SelectedItem != null && (uint) ((Kvartplata.Classes.Period) this.cmbDetailPeriod.SelectedItem).PeriodId > 0U)
        {
          str1 = " and de.Period.PeriodId={0}";
          num = ((Kvartplata.Classes.Period) this.cmbDetailPeriod.SelectedItem).PeriodId;
        }
        if ((Kvartplata.Classes.Service) this.cmbFiltrDetailService.SelectedItem != null && (uint) ((Kvartplata.Classes.Service) this.cmbFiltrDetailService.SelectedItem).ServiceId > 0U)
          str1 += string.Format(" and c.Service.ServiceId={0}", (object) ((Kvartplata.Classes.Service) this.cmbFiltrDetailService.SelectedItem).ServiceId);
        this.pnDetailPeriod.Visible = true;
      }
      if (!this.cbShowAnotherOrg.Checked)
        str2 = " and c.Service.ServiceId not in (select Service_id from ServiceParam where Company_id={3} and Complex.IdFk={4} and SendRent=1)";
      IList<DetailEvidence> detailEvidenceList1 = (IList<DetailEvidence>) new List<DetailEvidence>();
      IList<DetailEvidence> detailEvidenceList2 = this.session.CreateQuery(string.Format("select de from DetailEvidence de left join fetch de.Counter c left outer join c.Service where c.Complex.ComplexId={1} " + str1 + " and c.LsClient.ClientId={2} and c.BaseCounter.Id=2 " + str2 + " order by de.Period.PeriodId desc,isnull(c.ArchivesDate,'2999-12-31') desc,c.Service.ServiceId,regulatefld(c.CounterNum),de.Month.PeriodId desc,de.Type ", (object) num, (object) Kvartplata.Classes.Options.Complex.ComplexId, (object) this.Client.ClientId, (object) this.Client.Company.CompanyId, (object) this.Client.Complex.IdFk)).List<DetailEvidence>();
      this.dgvDetailEvidence.Columns.Clear();
      this.dgvDetailEvidence.DataSource = (object) null;
      this.dgvDetailEvidence.DataSource = (object) detailEvidenceList2;
      this.session.Clear();
      this.MySettingsDetailEvidence.GridName = "DetailEvidence";
      this.SetViewDetailEvidence();
      this.dgvDetailEvidence.Focus();
      this.InsertRecord = false;
      if (this.dgvDetailEvidence.Rows.Count <= 0)
        return;
      this.dgvDetailEvidence.CurrentCell = this.dgvDetailEvidence.Rows[0].Cells["Counter"];
    }

    private void LoadSettingsDetailEvidence()
    {
      this.MySettingsDetailEvidence.Load();
      foreach (DataGridViewColumn column in (BaseCollection) this.dgvDetailEvidence.Columns)
        this.MySettingsDetailEvidence.GetMySettings(column);
    }

    private void dgvDetailEvidence_ColumnWidthChanged(object sender, DataGridViewColumnEventArgs e)
    {
      if (this.MySettingsDetailEvidence.FindByName(e.Column.Name) < 0)
        return;
      this.MySettingsDetailEvidence.Columns[this.MySettingsDetailEvidence.FindByName(e.Column.Name)].Width = e.Column.Width;
      this.MySettingsDetailEvidence.Save();
    }

    private void SetViewDetailEvidence()
    {
      this.dgvDetailEvidence.Columns["Evidence"].HeaderText = "Расход";
      this.session = Kvartplata.Domain.CurrentSession;
      IList<Kvartplata.Classes.Counter> counterList1 = (IList<Kvartplata.Classes.Counter>) new List<Kvartplata.Classes.Counter>();
      IList<Kvartplata.Classes.Counter> counterList2 = this.session.CreateQuery(string.Format("select c from Counter c left join fetch c.Service where c.Complex.ComplexId={0} and c.LsClient.ClientId={1} and c.BaseCounter.Id=2 order by isnull(c.ArchivesDate,'2999-12-31') desc,c.Service.ServiceId", (object) Kvartplata.Classes.Options.Complex.ComplexId, (object) this.Client.ClientId)).List<Kvartplata.Classes.Counter>();
      object obj = this.session.CreateQuery("select max(Period.PeriodId) from DetailEvidence").UniqueResult();
      IList<Kvartplata.Classes.Period> periodList = this.session.CreateCriteria(typeof (Kvartplata.Classes.Period)).AddOrder(Order.Desc("PeriodId")).Add((ICriterion) NHibernate.Criterion.Restrictions.Not((ICriterion) NHibernate.Criterion.Restrictions.Eq("PeriodId", (object) 0))).Add((ICriterion) NHibernate.Criterion.Restrictions.Le("PeriodId", (object) Convert.ToInt32(obj))).List<Kvartplata.Classes.Period>();
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvDetailEvidence, 0, (IList) counterList2, "CounterId", "AllInfo", "Счетчик", "Counter", 200, 200);
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvDetailEvidence, 1, (IList) periodList, "PeriodId", "PeriodName", "Месяц", "Month", 100, 100);
      Kvartplata.Classes.KvrplHelper.AddTextBoxColumn(this.dgvDetailEvidence, 2, "Тип", "Type", 100, true);
      if (this.chbArhiv.Checked)
        Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvDetailEvidence, 0, (IList) this.session.CreateCriteria(typeof (Kvartplata.Classes.Period)).AddOrder(Order.Desc("PeriodId")).Add((ICriterion) NHibernate.Criterion.Restrictions.Not((ICriterion) NHibernate.Criterion.Restrictions.Eq("PeriodId", (object) 0))).Add((ICriterion) NHibernate.Criterion.Restrictions.Le("PeriodId", (object) Convert.ToInt32(obj))).List<Kvartplata.Classes.Period>(), "PeriodId", "PeriodName", "Период", "Period", 100, 100);
      foreach (DataGridViewRow row in (IEnumerable) this.dgvDetailEvidence.Rows)
      {
        row.Cells["Evidence"].Value = (object) ((DetailEvidence) row.DataBoundItem).Evidence;
        if (this.chbArhiv.Checked)
          row.Cells["Period"].Value = (object) ((DetailEvidence) row.DataBoundItem).Period.PeriodId;
        if (((DetailEvidence) row.DataBoundItem).Counter != null)
          row.Cells["Counter"].Value = (object) ((DetailEvidence) row.DataBoundItem).Counter.CounterId;
        if (((DetailEvidence) row.DataBoundItem).Month != null)
          row.Cells["Month"].Value = (object) ((DetailEvidence) row.DataBoundItem).Month.PeriodId;
        if ((int) ((DetailEvidence) row.DataBoundItem).Type == 0)
          row.Cells["Type"].Value = (object) "Показания";
        else if ((int) ((DetailEvidence) row.DataBoundItem).Type == 1)
          row.Cells["Type"].Value = (object) "Поверка";
        else if ((int) ((DetailEvidence) row.DataBoundItem).Type == 3)
        {
          row.Cells["Type"].Value = (object) "Расход по среднему";
        }
        else
        {
          string str1 = this.session.CreateSQLQuery("select scheme_name from dcScheme where scheme_type=16 and Scheme=:t").SetParameter<short>("t", ((DetailEvidence) row.DataBoundItem).Type).UniqueResult<string>();
          string str2 = str1 != null ? str1.Replace("расход=", "") : "";
          row.Cells["Type"].Value = (object) ("Расход по среднему(" + str2 + ")");
        }
      }
      this.LoadSettingsDetailEvidence();
    }

    private void dgvDetailEvidence_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
    {
      if (((DataGridView) sender).DataSource == null)
        return;
      DataGridViewRow row = ((DataGridView) sender).Rows[e.RowIndex];
      if (((DetailEvidence) row.DataBoundItem).Period != null && ((DetailEvidence) row.DataBoundItem).Period.PeriodId == this.MonthClosed.PeriodId + 1)
      {
        row.DefaultCellStyle.BackColor = Color.PapayaWhip;
        row.DefaultCellStyle.ForeColor = Color.Black;
      }
      else
      {
        row.DefaultCellStyle.BackColor = Color.White;
        row.DefaultCellStyle.ForeColor = Color.Gray;
      }
    }

    private void cmbDetailPeriod_SelectionChangeCommitted(object sender, EventArgs e)
    {
      this.LoadDetailEvidence();
    }

    private void LoadAudit()
    {
      this.btnSave.Enabled = false;
      this.btnAddRecord.Enabled = true;
      this.btnDelRecord.Enabled = true;
      this.tsbMultiPastTime.Enabled = true;
      this.chbArhiv.Visible = true;
      this.session = Kvartplata.Domain.CurrentSession;
      this.dgvAudit.Columns.Clear();
      this.dgvAudit.DataSource = (object) null;
      string str = "";
      if (!this.cbShowAnotherOrg.Checked)
        str = " and c.Service.ServiceId not in (select Service_id from ServiceParam where Company_id={2} and Complex.IdFk={3} and SendRent=1)";
      IList<Audit> auditList1 = (IList<Audit>) new List<Audit>();
      IList<Audit> auditList2;
      if (!this.PastTime)
      {
        if (!this.chbArhiv.Checked)
          auditList2 = this.session.CreateQuery(string.Format("select a from Audit a left join fetch a.Counter c where a.Period.PeriodId=0 and c.LsClient.ClientId={0} and DEnd>='{1}'" + str, (object) this.Client.ClientId, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(this.MonthClosed.PeriodName.Value.AddMonths(1)), (object) this.Client.Company.CompanyId, (object) this.Client.Complex.IdFk)).List<Audit>();
        else
          auditList2 = this.session.CreateQuery(string.Format("select a from Audit a left join fetch a.Counter c where a.Period.PeriodId=0 and c.LsClient.ClientId={0}" + str, (object) this.Client.ClientId, (object) 1, (object) this.Client.Company.CompanyId, (object) this.Client.Complex.IdFk)).List<Audit>();
      }
      else
        auditList2 = this.session.CreateQuery(string.Format("select a from Audit a left join fetch a.Counter c where a.Period.PeriodId={0} and c.LsClient.ClientId={1}" + str, (object) Kvartplata.Classes.Options.Period.PeriodId, (object) this.Client.ClientId, (object) this.Client.Company.CompanyId, (object) this.Client.Complex.IdFk)).List<Audit>();
      this.dgvAudit.DataSource = (object) auditList2;
      this.session.Clear();
      this.oldListAudit = (IList<Audit>) new List<Audit>();
      foreach (Audit audit in (List<Audit>) this.dgvAudit.DataSource)
      {
        audit.OldHashCode = audit.GetHashCode();
        audit.IsEdit = false;
        this.oldListAudit.Add(new Audit()
        {
          Counter = audit.Counter,
          DBeg = audit.DBeg,
          DEnd = audit.DEnd,
          Scheme = audit.Scheme,
          Note = audit.Note,
          OldHashCode = audit.OldHashCode
        });
      }
      this.MySettingsAudit.GridName = "Audit";
      this.SetViewAudit();
      this.dgvAudit.Focus();
      this.InsertRecord = false;
    }

    private void LoadSettingsAudit()
    {
      this.MySettingsAudit.Load();
      foreach (DataGridViewColumn column in (BaseCollection) this.dgvAudit.Columns)
        this.MySettingsAudit.GetMySettings(column);
    }

    private void dgvAudit_ColumnWidthChanged(object sender, DataGridViewColumnEventArgs e)
    {
      if (this.MySettingsAudit.FindByName(e.Column.Name) < 0)
        return;
      this.MySettingsAudit.Columns[this.MySettingsAudit.FindByName(e.Column.Name)].Width = e.Column.Width;
      this.MySettingsAudit.Save();
    }

    private void SetViewAudit()
    {
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvAudit, 0, "Дата начала", "DBeg");
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvAudit, 1, "Дата окончания", "DEnd");
      IList<Kvartplata.Classes.Counter> counterList = (IList<Kvartplata.Classes.Counter>) new List<Kvartplata.Classes.Counter>();
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvAudit, 2, (IList) this.session.CreateQuery(string.Format("select c from Counter c left join fetch c.Service where c.Complex.ComplexId={0} and c.LsClient.ClientId={1} and c.BaseCounter.Id=2 and c.MainCounter=null order by isnull(c.ArchivesDate,'2999-12-31') desc,c.Service.ServiceId", (object) Kvartplata.Classes.Options.Complex.ComplexId, (object) this.Client.ClientId)).List<Kvartplata.Classes.Counter>(), "CounterId", "AllInfo", "Счетчик", "Counter", 320, 220);
      DataGridViewColumn dataGridViewColumn = (DataGridViewColumn) new DataGridViewButtonColumn();
      dataGridViewColumn.Name = "Scheme";
      dataGridViewColumn.HeaderText = "Схема";
      this.dgvAudit.Columns.Insert(3, dataGridViewColumn);
      this.dgvAudit.Columns["Note"].HeaderText = "Примечание";
      this.dgvAudit.Columns["Note"].DisplayIndex = 4;
      this.dgvAudit.Columns["UName"].DisplayIndex = 5;
      this.dgvAudit.Columns["DEdit"].DisplayIndex = 6;
      Kvartplata.Classes.KvrplHelper.ViewEdit(this.dgvAudit);
      foreach (DataGridViewRow row in (IEnumerable) this.dgvAudit.Rows)
      {
        row.Cells["DBeg"].Value = (object) ((Audit) row.DataBoundItem).DBeg;
        row.Cells["DEnd"].Value = (object) ((Audit) row.DataBoundItem).DEnd;
        row.Cells["Scheme"].Value = (object) ((Audit) row.DataBoundItem).Scheme;
        if (((Audit) row.DataBoundItem).Counter != null)
          row.Cells["Counter"].Value = (object) ((Audit) row.DataBoundItem).Counter.CounterId;
      }
      this.LoadSettingsAudit();
    }

    private void InsertAudit()
    {
      this.btnSave.Enabled = true;
      this.btnDelRecord.Enabled = false;
      this.InsertRecord = true;
      Audit audit1 = new Audit();
      if (!this.PastTime)
      {
        DateTime dateTime1 = Kvartplata.Classes.Options.Period.PeriodName.Value;
        DateTime? periodName = this.MonthClosed.PeriodName;
        DateTime dateTime2 = periodName.Value;
        if (dateTime1 <= dateTime2)
        {
          Audit audit2 = audit1;
          periodName = this.MonthClosed.PeriodName;
          DateTime dateTime3 = periodName.Value.AddMonths(1);
          audit2.DBeg = dateTime3;
        }
        else
        {
          Audit audit2 = audit1;
          periodName = Kvartplata.Classes.Options.Period.PeriodName;
          DateTime dateTime3 = periodName.Value;
          audit2.DBeg = dateTime3;
        }
      }
      else
        audit1.DBeg = this.MonthClosed.PeriodName.Value;
      Audit audit3 = audit1;
      DateTime dateTime4 = audit1.DBeg;
      dateTime4 = dateTime4.AddMonths(3);
      DateTime dateTime5 = dateTime4.AddDays(-1.0);
      audit3.DEnd = dateTime5;
      IList<Audit> auditList = (IList<Audit>) new List<Audit>();
      if ((uint) this.dgvAudit.Rows.Count > 0U)
        auditList = (IList<Audit>) (this.dgvAudit.DataSource as List<Audit>);
      auditList.Add(audit1);
      this.dgvAudit.Columns.Clear();
      this.dgvAudit.DataSource = (object) null;
      this.dgvAudit.DataSource = (object) auditList;
      this.SetViewAudit();
      this.dgvAudit.CurrentCell = this.dgvAudit.Rows[this.dgvAudit.Rows.Count - 1].Cells[0];
    }

    private void SaveAllAudit()
    {
      bool flag = false;
      foreach (DataGridViewRow row in (IEnumerable) this.dgvAudit.Rows)
      {
        if (((Audit) row.DataBoundItem).IsEdit)
        {
          this.oldAudit = new Audit();
          foreach (Audit audit in (IEnumerable<Audit>) this.oldListAudit)
          {
            if (audit.OldHashCode == ((Audit) row.DataBoundItem).OldHashCode)
            {
              this.oldAudit = audit;
              break;
            }
          }
          this.dgvAudit.Rows[row.Index].Selected = true;
          this.dgvAudit.CurrentCell = row.Cells[0];
          if (!this.SaveAudit())
            flag = true;
          else
            ((Audit) row.DataBoundItem).IsEdit = false;
        }
      }
      if (flag)
        return;
      this.LoadAudit();
    }

    private bool SaveAudit()
    {
      Audit dataBoundItem = (Audit) this.dgvAudit.CurrentRow.DataBoundItem;
      this.InsertRecord = dataBoundItem.UName == null;
      if (this.dgvAudit.CurrentRow.Cells["DBeg"].Value == null || this.dgvAudit.CurrentRow.Cells["DEnd"].Value == null)
      {
        int num = (int) MessageBox.Show("Введите дату начала и окончания", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      try
      {
        dataBoundItem.DBeg = Convert.ToDateTime(this.dgvAudit.CurrentRow.Cells["DBeg"].Value);
        dataBoundItem.DEnd = Convert.ToDateTime(this.dgvAudit.CurrentRow.Cells["DEnd"].Value);
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show("Дата начала или дата окончания введена некорректно", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      IList<CmpParam> cmpParamList = this.session.CreateQuery("select c from CmpParam c where c.Param_id=226 and c.Company_id=:cid").SetParameter<int>("cid", this.CompanyId).List<CmpParam>();
      if (cmpParamList != null && cmpParamList.Count > 0)
      {
        foreach (CmpParam cmpParam in (IEnumerable<CmpParam>) cmpParamList)
        {
          if (cmpParam.Dbeg <= dataBoundItem.DBeg && cmpParam.Dend >= dataBoundItem.DBeg)
          {
            int num = (int) MessageBox.Show("Показания прибора учета не будут учитываться на период поверки!", "Внимание!", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            break;
          }
          if (cmpParam.Dbeg <= dataBoundItem.DBeg && dataBoundItem.DBeg <= cmpParam.Dend)
          {
            int num = (int) MessageBox.Show("Показания прибора учета не будут учитываться на период поверки!", "Внимание!", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            break;
          }
        }
      }
      if (this.dgvAudit.CurrentRow.Cells["Counter"].Value == null)
      {
        int num = (int) MessageBox.Show("Выберите счетчик", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      dataBoundItem.Scheme = Convert.ToInt16(this.dgvAudit.CurrentRow.Cells["Scheme"].Value);
      if (dataBoundItem.DBeg > dataBoundItem.DEnd)
      {
        int num = (int) MessageBox.Show("Дата начала больше даты окончания", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      if ((dataBoundItem.DBeg <= DateTime.Now.AddYears(-3) || dataBoundItem.DBeg >= DateTime.Now.AddYears(3)) && MessageBox.Show("Дата начала отличается от текущей более, чем на 3 года. Продолжить", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.Cancel)
        return false;
      if (!this.PastTime)
      {
        if (this.InsertRecord && (dataBoundItem.DBeg <= this.LastDayMonthClosed || dataBoundItem.DEnd <= this.LastDayMonthClosed))
        {
          int num = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          return false;
        }
        if (!this.InsertRecord && (this.oldAudit.DBeg <= this.LastDayMonthClosed && this.oldAudit.DEnd < this.LastDayMonthClosed || dataBoundItem.DEnd < this.LastDayMonthClosed || this.oldAudit.DBeg > this.LastDayMonthClosed && dataBoundItem.DBeg <= this.LastDayMonthClosed || this.oldAudit.DBeg <= this.LastDayMonthClosed && (this.oldAudit.DBeg != dataBoundItem.DBeg || this.oldAudit.Counter != dataBoundItem.Counter || (int) this.oldAudit.Scheme != (int) dataBoundItem.Scheme || this.oldAudit.Note != dataBoundItem.Note)))
        {
          int num = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          return false;
        }
      }
      if (this.PastTime && dataBoundItem.DEnd >= this.MonthClosed.PeriodName.Value.AddMonths(1))
      {
        int num = (int) MessageBox.Show("Невозможно внести запись в открытом периоде", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      if (this.dgvAudit.CurrentRow.Cells["Note"].Value == null)
        dataBoundItem.Note = "";
      this.session = Kvartplata.Domain.CurrentSession;
      Kvartplata.Classes.Counter counter = this.session.Get<Kvartplata.Classes.Counter>(this.dgvAudit.CurrentRow.Cells["Counter"].Value);
      dataBoundItem.Counter = counter;
      this.session.Clear();
      dataBoundItem.Period = this.PastTime ? Kvartplata.Classes.Options.Period : this.session.Get<Kvartplata.Classes.Period>((object) 0);
      dataBoundItem.UName = Kvartplata.Classes.Options.Login;
      dataBoundItem.DEdit = DateTime.Now.Date;
      try
      {
        if (this.InsertRecord)
        {
          this.InsertRecord = false;
          this.session.Save((object) dataBoundItem);
          this.session.Flush();
        }
        else
          this.session.CreateQuery("update Audit set DBeg=:dbeg,DEnd=:dend,Counter.CounterId=:counter,Scheme=:scheme,Note=:note,UName=:uname,DEdit=:dedit where Period.PeriodId=:period and Counter.CounterId=:oldcounter and DBeg=:olddbeg").SetParameter<DateTime>("dbeg", dataBoundItem.DBeg).SetParameter<DateTime>("dend", dataBoundItem.DEnd).SetParameter<int>("counter", dataBoundItem.Counter.CounterId).SetParameter<short>("scheme", dataBoundItem.Scheme).SetParameter<string>("note", dataBoundItem.Note).SetParameter<string>("uname", dataBoundItem.UName).SetParameter<DateTime>("dedit", dataBoundItem.DEdit).SetParameter<int>("period", dataBoundItem.Period.PeriodId).SetParameter<int>("oldcounter", this.oldAudit.Counter.CounterId).SetParameter<DateTime>("olddbeg", this.oldAudit.DBeg).ExecuteUpdate();
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show("Невозможно сохранить изменения", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
      }
      this.session.Clear();
      return true;
    }

    private void DelAudit()
    {
      if (this.dgvAudit.Rows.Count <= 0 || this.dgvAudit.CurrentRow == null)
        return;
      Audit dataBoundItem = (Audit) this.dgvAudit.CurrentRow.DataBoundItem;
      if (!this.PastTime)
      {
        if (dataBoundItem.DBeg <= this.LastDayMonthClosed || dataBoundItem.DEnd <= this.LastDayMonthClosed)
        {
          int num = (int) MessageBox.Show("Не могу удалить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          this.session.Clear();
          return;
        }
      }
      else if (this.CurrentPeriod.PeriodName.Value <= this.MonthClosed.PeriodName.Value)
      {
        int num = (int) MessageBox.Show("Не могу удалить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        this.session.Clear();
        return;
      }
      if (MessageBox.Show("Вы уверены, что хотите удалить запись?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
      {
        this.session = Kvartplata.Domain.CurrentSession;
        try
        {
          this.session.Delete((object) dataBoundItem);
          this.session.Flush();
        }
        catch (Exception ex)
        {
          int num = (int) MessageBox.Show("Невозможно удалить запись", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
        }
        this.session.Clear();
      }
    }

    private void dgvAudit_CellClick(object sender, DataGridViewCellEventArgs e)
    {
      short id = 0;
      if (e.ColumnIndex <= 0 || e.RowIndex < 0 || !(this.dgvAudit.Columns[e.ColumnIndex].Name == "Scheme"))
        return;
      if ((uint) ((Audit) this.dgvAudit.CurrentRow.DataBoundItem).Scheme > 0U)
        id = ((Audit) this.dgvAudit.CurrentRow.DataBoundItem).Scheme;
      FrmScheme frmScheme = new FrmScheme((short) 4, id);
      if (frmScheme.ShowDialog() == DialogResult.OK)
        id = frmScheme.CurrentId();
      this.dgvAudit.CurrentRow.Cells["Scheme"].Value = (object) id;
      frmScheme.Dispose();
      this.btnSave.Enabled = true;
      this.btnDelRecord.Enabled = false;
      ((Audit) this.dgvAudit.CurrentRow.DataBoundItem).IsEdit = true;
    }

    private void dgvAudit_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
    {
      if (this.dgvAudit.DataSource == null)
        return;
      DataGridViewRow row = (sender as DataGridView).Rows[e.RowIndex];
      DateTime dbeg = ((Audit) row.DataBoundItem).DBeg;
      DateTime? periodName = this.NextMonthClosed.PeriodName;
      DateTime dateTime1 = Kvartplata.Classes.KvrplHelper.LastDay(periodName.Value);
      int num;
      if (dbeg <= dateTime1)
      {
        DateTime dend = ((Audit) row.DataBoundItem).DEnd;
        periodName = this.NextMonthClosed.PeriodName;
        DateTime dateTime2 = periodName.Value;
        num = dend >= dateTime2 ? 1 : 0;
      }
      else
        num = 0;
      if (num != 0)
      {
        row.DefaultCellStyle.BackColor = Color.PapayaWhip;
        row.DefaultCellStyle.ForeColor = Color.Black;
      }
      else
      {
        row.DefaultCellStyle.BackColor = Color.FromArgb((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
        row.DefaultCellStyle.ForeColor = Color.Gray;
      }
    }

    private void dgvAudit_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
    {
      this.btnDelRecord.Enabled = false;
      this.btnSave.Enabled = true;
      ((Audit) this.dgvAudit.CurrentRow.DataBoundItem).IsEdit = true;
    }

    private void dgvAudit_CellEndEdit(object sender, DataGridViewCellEventArgs e)
    {
      if (this.dgvAudit.CurrentCell == null || this.dgvAudit.CurrentCell.Value == null)
        return;
      Audit dataBoundItem = (Audit) this.dgvAudit.CurrentRow.DataBoundItem;
      dataBoundItem.IsEdit = true;
      try
      {
        string name = this.dgvAudit.Columns[e.ColumnIndex].Name;
        if (!(name == "DBeg"))
        {
          if (!(name == "DEnd"))
          {
            if (name == "Counter")
            {
              try
              {
                dataBoundItem.Counter = this.session.Get<Kvartplata.Classes.Counter>(this.dgvAudit.CurrentRow.Cells["Counter"].Value);
              }
              catch
              {
              }
            }
          }
          else
          {
            try
            {
              dataBoundItem.DEnd = Convert.ToDateTime(this.dgvAudit.CurrentRow.Cells["DEnd"].Value);
            }
            catch
            {
            }
          }
        }
        else
        {
          try
          {
            dataBoundItem.DBeg = Convert.ToDateTime(this.dgvAudit.CurrentRow.Cells["DBeg"].Value);
          }
          catch
          {
          }
        }
      }
      catch (Exception ex)
      {
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
      }
    }

    private void LoadSeal()
    {
      this.btnSave.Enabled = false;
      this.btnAddRecord.Enabled = true;
      this.btnDelRecord.Enabled = true;
      this.chbArhiv.Visible = false;
      this.session = Kvartplata.Domain.CurrentSession;
      this.dgvSeal.Columns.Clear();
      this.dgvSeal.DataSource = (object) null;
      string str = "";
      if (!this.cbShowAnotherOrg.Checked)
        str = " and c.Service.ServiceId not in (select Service_id from ServiceParam where Company_id={1} and Complex.IdFk={2} and SendRent=1)";
      IList<Seal> sealList = (IList<Seal>) new List<Seal>();
      this.dgvSeal.DataSource = (object) this.session.CreateQuery(string.Format("select s from Seal s left join fetch s.Counter c where c.LsClient.ClientId={0} " + str + " order by isnull(c.ArchivesDate,'2999-12-31') desc,c.Service.ServiceId", (object) this.Client.ClientId, (object) this.Client.Company.CompanyId, (object) this.Client.Complex.IdFk)).List<Seal>();
      this.session.Clear();
      this.oldListSeal = (IList<Seal>) new List<Seal>();
      foreach (Seal seal in (List<Seal>) this.dgvSeal.DataSource)
      {
        seal.OldHashCode = seal.GetHashCode();
        seal.IsEdit = false;
        this.oldListSeal.Add(new Seal()
        {
          Counter = seal.Counter,
          TypeSeal = seal.TypeSeal,
          OldHashCode = seal.OldHashCode
        });
      }
      this.MySettingsSeal.GridName = "Seal";
      this.SetViewSeal();
      this.dgvSeal.Focus();
      if (this.dgvSeal.Rows.Count > 0)
        this.dgvSeal.CurrentCell = this.dgvSeal.Rows[0].Cells["Counter"];
      this.InsertRecord = false;
    }

    private void LoadSettingsSeal()
    {
      this.MySettingsSeal.Load();
      foreach (DataGridViewColumn column in (BaseCollection) this.dgvSeal.Columns)
        this.MySettingsSeal.GetMySettings(column);
    }

    private void dgvSeal_ColumnWidthChanged(object sender, DataGridViewColumnEventArgs e)
    {
      if (this.MySettingsSeal.FindByName(e.Column.Name) < 0)
        return;
      this.MySettingsSeal.Columns[this.MySettingsSeal.FindByName(e.Column.Name)].Width = e.Column.Width;
      this.MySettingsSeal.Save();
    }

    private void SetViewSeal()
    {
      IList<Kvartplata.Classes.Counter> counterList = (IList<Kvartplata.Classes.Counter>) new List<Kvartplata.Classes.Counter>();
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvSeal, 0, (IList) this.session.CreateQuery(string.Format("select c from Counter c left join fetch c.Service where c.Complex.ComplexId={0} and c.LsClient.ClientId={1} and c.BaseCounter.Id=2 order by isnull(c.ArchivesDate,'2999-12-31') desc,c.Service.ServiceId", (object) Kvartplata.Classes.Options.Complex.ComplexId, (object) this.Client.ClientId)).List<Kvartplata.Classes.Counter>(), "CounterId", "AllInfo", "Счетчик", "Counter", 320, 220);
      IList<TypeSeal> typeSealList = (IList<TypeSeal>) new List<TypeSeal>();
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvSeal, 1, (IList) this.session.CreateCriteria(typeof (TypeSeal)).List<TypeSeal>(), "TypeSealId", "TypeSealName", "Тип пломбы", "TypeSeal", 320, 220);
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvSeal, 2, "Дата установки", "Date");
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvSeal, 3, "Дата снятия", "RemoveDate");
      this.dgvSeal.Columns["Inspector"].HeaderText = "Пломбировщик";
      this.dgvSeal.Columns["Note"].HeaderText = "Примечания";
      this.dgvSeal.Columns["Number"].HeaderText = "Номер пломбы";
      this.dgvSeal.Columns["Inspector"].DisplayIndex = 1;
      this.dgvSeal.Columns["Note"].DisplayIndex = 5;
      this.dgvSeal.Columns["Number"].DisplayIndex = 3;
      Kvartplata.Classes.KvrplHelper.ViewEdit(this.dgvSeal);
      foreach (DataGridViewRow row in (IEnumerable) this.dgvSeal.Rows)
      {
        row.Cells["Date"].Value = (object) ((Seal) row.DataBoundItem).Date;
        row.Cells["RemoveDate"].Value = (object) ((Seal) row.DataBoundItem).RemoveDate;
        if (((Seal) row.DataBoundItem).Counter != null)
          row.Cells["Counter"].Value = (object) ((Seal) row.DataBoundItem).Counter.CounterId;
        if (((Seal) row.DataBoundItem).TypeSeal != null)
          row.Cells["TypeSeal"].Value = (object) ((Seal) row.DataBoundItem).TypeSeal.TypeSealId;
      }
      this.LoadSettingsSeal();
    }

    private void InsertSeal()
    {
      this.InsertRecord = true;
      Seal seal = new Seal();
      seal.Date = DateTime.Now;
      this.session = Kvartplata.Domain.CurrentSession;
      IList list1 = (IList) new ArrayList();
      IList list2 = this.session.CreateSQLQuery(string.Format("select districtname from districthome dh,district d where d.iddistrict=dh.iddistrict and idhome={0} and idgr=2", (object) this.Client.Home.IdHome)).List();
      if (list2.Count > 0)
        seal.Inspector = Convert.ToString(list2[0]);
      IList<Seal> sealList = (IList<Seal>) new List<Seal>();
      if ((uint) this.dgvSeal.Rows.Count > 0U)
        sealList = (IList<Seal>) (this.dgvSeal.DataSource as List<Seal>);
      sealList.Add(seal);
      this.dgvSeal.Columns.Clear();
      this.dgvSeal.DataSource = (object) null;
      this.dgvSeal.DataSource = (object) sealList;
      this.SetViewSeal();
      this.dgvSeal.CurrentCell = this.dgvSeal.Rows[this.dgvSeal.Rows.Count - 1].Cells["Counter"];
    }

    private void SaveAllSeal()
    {
      bool flag = false;
      foreach (DataGridViewRow row in (IEnumerable) this.dgvSeal.Rows)
      {
        if (((Seal) row.DataBoundItem).IsEdit)
        {
          this.oldSeal = new Seal();
          foreach (Seal seal in (IEnumerable<Seal>) this.oldListSeal)
          {
            if (seal.OldHashCode == ((Seal) row.DataBoundItem).OldHashCode)
            {
              this.oldSeal = seal;
              break;
            }
          }
          this.dgvSeal.Rows[row.Index].Selected = true;
          this.dgvSeal.CurrentCell = row.Cells[0];
          if (!this.SaveSeal())
            flag = true;
          else
            ((Seal) row.DataBoundItem).IsEdit = false;
        }
      }
      if (flag)
        return;
      this.LoadSeal();
    }

    private bool SaveSeal()
    {
      this.session = Kvartplata.Domain.CurrentSession;
      Seal dataBoundItem = (Seal) this.dgvSeal.CurrentRow.DataBoundItem;
      this.InsertRecord = dataBoundItem.UName == null;
      DateTime? nullable;
      int num1;
      if (!this.InsertRecord)
      {
        nullable = dataBoundItem.RemoveDate;
        if (nullable.HasValue)
        {
          nullable = dataBoundItem.RemoveDate;
          DateTime dateTime = this.MonthClosed.PeriodName.Value.AddMonths(1);
          num1 = nullable.HasValue ? (nullable.GetValueOrDefault() < dateTime ? 1 : 0) : 0;
          goto label_4;
        }
      }
      num1 = 0;
label_4:
      if (num1 != 0)
      {
        int num2 = (int) MessageBox.Show("Пломба снята. Запись не подлежит редактированию", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      try
      {
        dataBoundItem.Date = Convert.ToDateTime(this.dgvSeal.CurrentRow.Cells["Date"].Value);
      }
      catch (Exception ex)
      {
        int num2 = (int) MessageBox.Show("Некорректное значение даты", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      if (this.dgvSeal.CurrentRow.Cells["RemoveDate"].Value != null)
      {
        try
        {
          dataBoundItem.RemoveDate = new DateTime?(Convert.ToDateTime(this.dgvSeal.CurrentRow.Cells["RemoveDate"].Value));
        }
        catch (Exception ex)
        {
        }
      }
      DateTime date1 = dataBoundItem.Date;
      nullable = this.MonthClosed.PeriodName;
      DateTime dateTime1 = nullable.Value;
      DateTime dateTime2 = dateTime1.AddMonths(1);
      if (date1 < dateTime2)
      {
        int num2 = (int) MessageBox.Show("Запись принадлежит закрытому периоду", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      dateTime1 = dataBoundItem.Date;
      nullable = dataBoundItem.RemoveDate;
      if (nullable.HasValue && dateTime1 > nullable.GetValueOrDefault())
      {
        int num2 = (int) MessageBox.Show("Дата установки больше даты снятия", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      DateTime date2 = dataBoundItem.Date;
      dateTime1 = DateTime.Now;
      DateTime dateTime3 = dateTime1.AddYears(-3);
      int num3;
      if (!(date2 <= dateTime3))
      {
        DateTime date3 = dataBoundItem.Date;
        dateTime1 = DateTime.Now;
        DateTime dateTime4 = dateTime1.AddYears(3);
        num3 = date3 >= dateTime4 ? 1 : 0;
      }
      else
        num3 = 1;
      if (num3 != 0 && MessageBox.Show("Дата начала отличается от текущей более, чем на 3 года. Продолжить", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.Cancel)
        return false;
      if (this.dgvSeal.CurrentRow.Cells["Counter"].Value == null)
      {
        int num2 = (int) MessageBox.Show("Выберите счетчик", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      Kvartplata.Classes.Counter counter = this.session.Get<Kvartplata.Classes.Counter>(this.dgvSeal.CurrentRow.Cells["Counter"].Value);
      dataBoundItem.Counter = counter;
      if (this.dgvSeal.CurrentRow.Cells["TypeSeal"].Value == null)
      {
        int num2 = (int) MessageBox.Show("Выберите тип пломбы", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      TypeSeal typeSeal = this.session.Get<TypeSeal>(this.dgvSeal.CurrentRow.Cells["TypeSeal"].Value);
      dataBoundItem.TypeSeal = typeSeal;
      if (this.dgvSeal.CurrentRow.Cells["Inspector"].Value == null)
        dataBoundItem.Inspector = "";
      if (this.dgvSeal.CurrentRow.Cells["Number"].Value == null)
      {
        int num2 = (int) MessageBox.Show("Введите номер пломбы", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      if (this.dgvSeal.CurrentRow.Cells["Note"].Value == null)
        dataBoundItem.Note = "";
      dataBoundItem.UName = Kvartplata.Classes.Options.Login;
      Seal seal = dataBoundItem;
      dateTime1 = DateTime.Now;
      DateTime date4 = dateTime1.Date;
      seal.DEdit = date4;
      try
      {
        if (this.InsertRecord)
        {
          short int16 = Convert.ToInt16(this.session.CreateQuery(string.Format("select max(SealId) from Seal where Counter.CounterId={0}", (object) dataBoundItem.Counter.CounterId)).UniqueResult());
          dataBoundItem.SealId = Convert.ToInt16((int) int16 + 1);
          this.InsertRecord = false;
          this.session.Save((object) dataBoundItem);
        }
        else
          this.session.Update((object) dataBoundItem);
        this.session.Flush();
      }
      catch (Exception ex)
      {
        int num2 = (int) MessageBox.Show("Невозможно сохранить изменения", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
      }
      this.session.Clear();
      return true;
    }

    private void DelSeal()
    {
      if (this.dgvSeal.Rows.Count <= 0 || this.dgvSeal.CurrentRow == null)
        return;
      Seal dataBoundItem = (Seal) this.dgvSeal.CurrentRow.DataBoundItem;
      if (dataBoundItem.Date < this.MonthClosed.PeriodName.Value.AddMonths(1))
      {
        int num1 = (int) MessageBox.Show("Невозможно удалить запись в закрытом периоде!", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Asterisk);
      }
      else if (MessageBox.Show("Вы уверены, что хотите удалить запись?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
      {
        this.session = Kvartplata.Domain.CurrentSession;
        try
        {
          this.session.Delete((object) dataBoundItem);
          this.session.Flush();
        }
        catch (Exception ex)
        {
          int num2 = (int) MessageBox.Show("Невозможно удалить запись", "Ошибка", MessageBoxButtons.OKCancel, MessageBoxIcon.Hand);
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
        }
        this.session.Clear();
      }
    }

    private void dgvSeal_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
    {
    }

    private void dgvSeal_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
    {
      this.btnDelRecord.Enabled = false;
      this.btnSave.Enabled = true;
      ((Seal) this.dgvSeal.CurrentRow.DataBoundItem).IsEdit = true;
    }

    private void dgvSeal_CellEndEdit(object sender, DataGridViewCellEventArgs e)
    {
      if (this.dgvSeal.CurrentCell == null || this.dgvSeal.CurrentCell.Value == null)
        return;
      Seal dataBoundItem = (Seal) this.dgvSeal.CurrentRow.DataBoundItem;
      dataBoundItem.IsEdit = true;
      try
      {
        string name = this.dgvSeal.Columns[e.ColumnIndex].Name;
        if (!(name == "Date"))
        {
          if (!(name == "RemoveDate"))
          {
            if (!(name == "Counter"))
            {
              if (name == "TypeSeal")
              {
                try
                {
                  dataBoundItem.TypeSeal = this.session.Get<TypeSeal>(this.dgvSeal.CurrentRow.Cells["TypeSeal"].Value);
                }
                catch
                {
                }
              }
            }
            else
            {
              try
              {
                dataBoundItem.Counter = this.session.Get<Kvartplata.Classes.Counter>(this.dgvSeal.CurrentRow.Cells["Counter"].Value);
              }
              catch
              {
              }
            }
          }
          else
          {
            try
            {
              dataBoundItem.RemoveDate = new DateTime?(Convert.ToDateTime(this.dgvSeal.CurrentRow.Cells["RemoveDate"].Value));
            }
            catch
            {
            }
          }
        }
        else
        {
          try
          {
            dataBoundItem.Date = Convert.ToDateTime(this.dgvSeal.CurrentRow.Cells["Date"].Value);
          }
          catch
          {
          }
        }
      }
      catch (Exception ex)
      {
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
      }
    }

    private void LoadWorkDistribute()
    {
      this.btnAddRecord.Enabled = true;
      this.btnDelRecord.Enabled = true;
      this.session = Kvartplata.Domain.CurrentSession;
      IList<lsWorkPayRent> lsWorkPayRentList = (IList<lsWorkPayRent>) new List<lsWorkPayRent>();
      IList<lsWorkPayRent> source1;
      if (!this.chbArhiv.Checked)
      {
        this.pnWDFilters.Visible = false;
        source1 = this.session.CreateQuery("select w from lsWorkPayRent w where w.Client.ClientId=:client and w.Period=:period").SetParameter<Kvartplata.Classes.LsClient>("client", this.Client).SetParameter<Kvartplata.Classes.Period>("period", Kvartplata.Classes.Options.Period).List<lsWorkPayRent>();
      }
      else
      {
        this.pnWDFilters.Visible = true;
        source1 = this.session.CreateQuery("select w from lsWorkPayRent w where w.Client.ClientId=:client").SetParameter<Kvartplata.Classes.LsClient>("client", this.Client).List<lsWorkPayRent>();
        if ((Kvartplata.Classes.Period) this.cmbWDPeriod.SelectedItem != null && (uint) ((Kvartplata.Classes.Period) this.cmbWDPeriod.SelectedItem).PeriodId > 0U)
          source1 = (IList<lsWorkPayRent>) source1.Where<lsWorkPayRent>((Func<lsWorkPayRent, bool>) (lswd => lswd.Period.PeriodId == ((Kvartplata.Classes.Period) this.cmbWDPeriod.SelectedItem).PeriodId)).ToList<lsWorkPayRent>();
        if ((Kvartplata.Classes.Service) this.cmbWDServiceFilter.SelectedItem != null && (uint) ((Kvartplata.Classes.Service) this.cmbWDServiceFilter.SelectedItem).ServiceId > 0U)
          source1 = (IList<lsWorkPayRent>) source1.Where<lsWorkPayRent>((Func<lsWorkPayRent, bool>) (lswd => (int) lswd.WorkDistribute.Service.ServiceId == (int) ((Kvartplata.Classes.Service) this.cmbWDServiceFilter.SelectedItem).ServiceId)).ToList<lsWorkPayRent>();
      }
      this.dgvWorkPayRent.AutoGenerateColumns = false;
      this.dgvWorkPayRent.DataSource = (object) null;
      this.dgvWorkPayRent.DataSource = (object) source1;
      IList<lsWorkDistribute> source2 = (IList<lsWorkDistribute>) new List<lsWorkDistribute>();
      if (source1.Count > 0)
      {
        foreach (lsWorkPayRent lsWorkPayRent in (IEnumerable<lsWorkPayRent>) source1)
        {
          foreach (lsWorkDistribute lsWorkDistribute in (IEnumerable<lsWorkDistribute>) this.session.CreateQuery("select w from lsWorkDistribute w where w.Client.ClientId=:client and w.WorkDistribute=:wd").SetParameter<Kvartplata.Classes.LsClient>("client", this.Client).SetParameter<hmWorkDistribute>("wd", lsWorkPayRent.WorkDistribute).List<lsWorkDistribute>())
          {
            if (!source2.Contains(lsWorkDistribute))
              source2.Add(lsWorkDistribute);
          }
        }
        this.pnWDFilters.Visible = true;
        if (source2.Count > 0)
        {
          if ((Kvartplata.Classes.Period) this.cmbWDPeriod.SelectedItem != null && (uint) ((Kvartplata.Classes.Period) this.cmbWDPeriod.SelectedItem).PeriodId > 0U)
            source2 = (IList<lsWorkDistribute>) source2.Where<lsWorkDistribute>((Func<lsWorkDistribute, bool>) (lswd => lswd.Period.PeriodId == ((Kvartplata.Classes.Period) this.cmbWDPeriod.SelectedItem).PeriodId)).ToList<lsWorkDistribute>();
          if ((Kvartplata.Classes.Service) this.cmbWDServiceFilter.SelectedItem != null && (uint) ((Kvartplata.Classes.Service) this.cmbWDServiceFilter.SelectedItem).ServiceId > 0U)
            source2 = (IList<lsWorkDistribute>) source2.Where<lsWorkDistribute>((Func<lsWorkDistribute, bool>) (lswd => (int) lswd.WorkDistribute.Service.ServiceId == (int) ((Kvartplata.Classes.Service) this.cmbWDServiceFilter.SelectedItem).ServiceId)).ToList<lsWorkDistribute>();
        }
      }
      this.dgvWorkDistribute.AutoGenerateColumns = false;
      this.dgvWorkDistribute.DataSource = (object) null;
      this.dgvWorkDistribute.DataSource = (object) source2;
      this.SetViewWorkDistribute(false);
      this.SetViewWorkPayRent();
      this.btnSave.Enabled = false;
    }

    private void SetViewWorkDistribute(bool newRecord)
    {
      IList<Kvartplata.Classes.Service> serviceList = this.session.CreateQuery("select s from Service s where s.Root=0 and s.ServiceId in (select wd.Service.ServiceId from lsWorkDistribute ls inner join ls.WorkDistribute wd where ls.Client=:cli) order by " + Kvartplata.Classes.Options.SortService).SetParameter<Kvartplata.Classes.LsClient>("cli", this.Client).List<Kvartplata.Classes.Service>();
      for (int index = 0; index < this.dgvWorkDistribute.Rows.Count; ++index)
      {
        DataGridViewRow row = this.dgvWorkDistribute.Rows[index];
        row.Cells["Period"].Value = (object) ((lsWorkDistribute) row.DataBoundItem).Period.PeriodName.Value;
        ((DataGridViewComboBoxCell) this.dgvWorkDistribute["Service", row.Index]).DataSource = (object) serviceList;
        ((DataGridViewComboBoxCell) this.dgvWorkDistribute["Service", row.Index]).DisplayMember = "ServiceName";
        ((DataGridViewComboBoxCell) this.dgvWorkDistribute["Service", row.Index]).ValueMember = "ServiceId";
        IList<BaseOrg> perfomersList = (IList<BaseOrg>) new List<BaseOrg>();
        IList<BaseOrg> recipientsList = (IList<BaseOrg>) new List<BaseOrg>();
        if (newRecord)
        {
          if (index == this.dgvWorkDistribute.Rows.Count - 1)
          {
            recipientsList.Clear();
            perfomersList.Clear();
            recipientsList.Insert(0, new BaseOrg(0, ""));
            perfomersList.Insert(0, new BaseOrg(0, ""));
            this.dgvWorkDistribute.Rows[index].Cells["rents"].ReadOnly = true;
            this.dgvWorkDistribute.Rows[index].Cells["Service"].ReadOnly = false;
            this.dgvWorkDistribute.Rows[index].Cells["Period"].ReadOnly = false;
            this.dgvWorkDistribute.Rows[index].Cells["Performer"].ReadOnly = false;
            this.dgvWorkDistribute.Rows[index].Cells["Recipient"].ReadOnly = false;
          }
          else
          {
            this.dgvWorkDistribute.Rows[index].ReadOnly = true;
            this.LoadPerfRecipWD(row, ref recipientsList, ref perfomersList, ((lsWorkDistribute) row.DataBoundItem).WorkDistribute);
          }
        }
        else
          this.LoadPerfRecipWD(row, ref recipientsList, ref perfomersList, ((lsWorkDistribute) row.DataBoundItem).WorkDistribute);
      }
      Kvartplata.Classes.KvrplHelper.ViewEdit(this.dgvWorkDistribute);
    }

    private void SetViewWorkPayRent()
    {
      for (int index = 0; index < this.dgvWorkPayRent.Rows.Count; ++index)
      {
        DataGridViewRow row = this.dgvWorkPayRent.Rows[index];
        row.Cells["PeriodPR"].Value = (object) ((lsWorkPayRent) row.DataBoundItem).Period.PeriodName.Value;
        IList<BaseOrg> perfomersList = (IList<BaseOrg>) new List<BaseOrg>();
        IList<BaseOrg> recipientsList = (IList<BaseOrg>) new List<BaseOrg>();
        this.LoadPerfRecipWPR(row, ref recipientsList, ref perfomersList, ((lsWorkPayRent) row.DataBoundItem).WorkDistribute);
      }
    }

    private void LoadPerfRecipWPR(DataGridViewRow row, ref IList<BaseOrg> recipientsList, ref IList<BaseOrg> perfomersList, hmWorkDistribute workDistribute)
    {
      DateTime? periodName;
      if (((lsWorkPayRent) row.DataBoundItem).Supplier != null)
      {
        row.Cells["RecipientPR"].Value = (object) ((lsWorkPayRent) row.DataBoundItem).Supplier.Recipient.BaseOrgId;
        perfomersList = this.session.CreateQuery(string.Format("select distinct d.Perfomer from CmpSupplier s, Supplier d where s.SupplierOrg.SupplierId = d.SupplierId and s.Service.ServiceId={0} and d.Recipient.BaseOrgId={4} and d.Perfomer.BaseOrgId<>0  and s.Company.CompanyId=(select ParamValue from CompanyParam where Company.CompanyId={1} and Period.PeriodId=0 and DBeg<='{2}' and DEnd>='{3}' and Param.ParamId=211)", (object) ((lsWorkPayRent) row.DataBoundItem).WorkDistribute.Service.ServiceId, (object) ((lsWorkPayRent) row.DataBoundItem).WorkDistribute.Company.CompanyId, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.KvrplHelper.LastDay(this.NextMonthClosed.PeriodName.Value)), (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(this.NextMonthClosed.PeriodName.Value), (object) ((lsWorkPayRent) row.DataBoundItem).Supplier.Recipient.BaseOrgId)).List<BaseOrg>();
        if (((lsWorkPayRent) row.DataBoundItem).Supplier.Recipient.BaseOrgId == 0)
        {
          perfomersList.Insert(0, new BaseOrg(0, ""));
        }
        else
        {
          IList<BaseOrg> baseOrgList = this.session.CreateQuery(string.Format("select distinct d.Perfomer from CmpSupplier s, Supplier d where s.SupplierOrg.SupplierId = d.SupplierId and s.Service.ServiceId={0} and d.Recipient.BaseOrgId={4} and d.Perfomer.BaseOrgId=0  and s.Company.CompanyId=(select ParamValue from CompanyParam where Company.CompanyId={1} and Period.PeriodId=0 and DBeg<='{2}' and DEnd>='{3}' and Param.ParamId=211)", (object) ((lsWorkPayRent) row.DataBoundItem).WorkDistribute.Service.ServiceId, (object) ((lsWorkPayRent) row.DataBoundItem).WorkDistribute.Company.CompanyId, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.KvrplHelper.LastDay(this.NextMonthClosed.PeriodName.Value)), (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(this.NextMonthClosed.PeriodName.Value), (object) ((lsWorkPayRent) row.DataBoundItem).Supplier.Recipient.BaseOrgId)).List<BaseOrg>();
          if (baseOrgList.Count > 0)
            perfomersList.Insert(0, baseOrgList[0]);
        }
      }
      else
      {
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        IList<BaseOrg> local = perfomersList;
        ISession session = this.session;
        string format = "select distinct d.Perfomer from CmpSupplier s, Supplier d where s.SupplierOrg.SupplierId = d.SupplierId and s.Service.ServiceId={0} and d.Recipient.BaseOrgId=0 and d.Perfomer.BaseOrgId<>0  and s.Company.CompanyId=(select ParamValue from CompanyParam where Company.CompanyId={1} and Period.PeriodId=0 and DBeg<='{2}' and DEnd>='{3}' and Param.ParamId=211)";
        object[] objArray = new object[4]{ (object) workDistribute.Service.ServiceId, (object) workDistribute.Company.CompanyId, null, null };
        int index1 = 2;
        periodName = this.NextMonthClosed.PeriodName;
        string baseFormat1 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.KvrplHelper.LastDay(periodName.Value));
        objArray[index1] = (object) baseFormat1;
        int index2 = 3;
        periodName = this.NextMonthClosed.PeriodName;
        string baseFormat2 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(periodName.Value);
        objArray[index2] = (object) baseFormat2;
        string queryString = string.Format(format, objArray);
        IList<BaseOrg> baseOrgList = session.CreateQuery(queryString).List<BaseOrg>();
        // ISSUE: explicit reference operation
        local = baseOrgList;
        perfomersList.Insert(0, new BaseOrg(0, ""));
      }
      // ISSUE: explicit reference operation
      // ISSUE: variable of a reference type
      IList<BaseOrg> local1 = recipientsList;
      ISession session1 = this.session;
      string format1 = "select distinct d.Recipient from CmpSupplier s, Supplier d where s.SupplierOrg.SupplierId = d.SupplierId and s.Service.ServiceId={0} and d.Recipient.BaseOrgId<>0  and s.Company.CompanyId=(select ParamValue from CompanyParam where Company.CompanyId={1} and Period.PeriodId=0 and DBeg<='{2}' and DEnd>='{3}' and Param.ParamId=211) order by d.Recipient.NameOrgMin";
      object[] objArray1 = new object[4]{ (object) workDistribute.Service.ServiceId, (object) workDistribute.Company.CompanyId, null, null };
      int index3 = 2;
      periodName = this.NextMonthClosed.PeriodName;
      string baseFormat3 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.KvrplHelper.LastDay(periodName.Value));
      objArray1[index3] = (object) baseFormat3;
      int index4 = 3;
      periodName = this.NextMonthClosed.PeriodName;
      string baseFormat4 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(periodName.Value);
      objArray1[index4] = (object) baseFormat4;
      string queryString1 = string.Format(format1, objArray1);
      IList<BaseOrg> baseOrgList1 = session1.CreateQuery(queryString1).List<BaseOrg>();
      // ISSUE: explicit reference operation
      local1 = baseOrgList1;
      recipientsList.Insert(0, new BaseOrg(0, ""));
      ((DataGridViewComboBoxCell) this.dgvWorkPayRent["PerformerPR", row.Index]).DataSource = (object) perfomersList;
      ((DataGridViewComboBoxCell) this.dgvWorkPayRent["PerformerPR", row.Index]).DisplayMember = "NameOrgMinDop";
      ((DataGridViewComboBoxCell) this.dgvWorkPayRent["PerformerPR", row.Index]).ValueMember = "BaseOrgId";
      ((DataGridViewComboBoxCell) this.dgvWorkPayRent["RecipientPR", row.Index]).DataSource = (object) recipientsList;
      ((DataGridViewComboBoxCell) this.dgvWorkPayRent["RecipientPR", row.Index]).DisplayMember = "NameOrgMinDop";
      ((DataGridViewComboBoxCell) this.dgvWorkPayRent["RecipientPR", row.Index]).ValueMember = "BaseOrgId";
      if (((lsWorkPayRent) row.DataBoundItem).Supplier == null)
        return;
      row.Cells["RecipientPR"].Value = (object) ((lsWorkPayRent) row.DataBoundItem).Supplier.Recipient.BaseOrgId;
      row.Cells["PerformerPR"].Value = (object) ((lsWorkPayRent) row.DataBoundItem).Supplier.Perfomer.BaseOrgId;
    }

    private void LoadPerfRecipWD(DataGridViewRow row, ref IList<BaseOrg> recipientsList, ref IList<BaseOrg> perfomersList, hmWorkDistribute workDistribute)
    {
      DateTime? periodName;
      if (((lsWorkDistribute) row.DataBoundItem).Supplier != null)
      {
        row.Cells["Recipient"].Value = (object) ((lsWorkDistribute) row.DataBoundItem).Supplier.Recipient.BaseOrgId;
        perfomersList = this.session.CreateQuery(string.Format("select distinct d.Perfomer from CmpSupplier s, Supplier d where s.SupplierOrg.SupplierId = d.SupplierId and s.Service.ServiceId={0} and d.Recipient.BaseOrgId={4} and d.Perfomer.BaseOrgId<>0  and s.Company.CompanyId=(select ParamValue from CompanyParam where Company.CompanyId={1} and Period.PeriodId=0 and DBeg<='{2}' and DEnd>='{3}' and Param.ParamId=211)", (object) ((lsWorkDistribute) row.DataBoundItem).WorkDistribute.Service.ServiceId, (object) ((lsWorkDistribute) row.DataBoundItem).WorkDistribute.Company.CompanyId, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.KvrplHelper.LastDay(this.NextMonthClosed.PeriodName.Value)), (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(this.NextMonthClosed.PeriodName.Value), (object) ((lsWorkDistribute) row.DataBoundItem).Supplier.Recipient.BaseOrgId)).List<BaseOrg>();
        if (((lsWorkDistribute) row.DataBoundItem).Supplier.Recipient.BaseOrgId == 0)
        {
          perfomersList.Insert(0, new BaseOrg(0, ""));
        }
        else
        {
          IList<BaseOrg> baseOrgList = this.session.CreateQuery(string.Format("select distinct d.Perfomer from CmpSupplier s, Supplier d where s.SupplierOrg.SupplierId = d.SupplierId and s.Service.ServiceId={0} and d.Recipient.BaseOrgId={4}  and s.Company.CompanyId=(select ParamValue from CompanyParam where Company.CompanyId={1} and Period.PeriodId=0 and DBeg<='{2}' and DEnd>='{3}' and Param.ParamId=211)", (object) ((lsWorkDistribute) row.DataBoundItem).WorkDistribute.Service.ServiceId, (object) ((lsWorkDistribute) row.DataBoundItem).WorkDistribute.Company.CompanyId, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.KvrplHelper.LastDay(this.NextMonthClosed.PeriodName.Value)), (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(this.NextMonthClosed.PeriodName.Value), (object) ((lsWorkDistribute) row.DataBoundItem).Supplier.Recipient.BaseOrgId)).List<BaseOrg>();
          if (baseOrgList.Count > 0)
            perfomersList.Insert(0, baseOrgList[0]);
        }
      }
      else
      {
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        IList<BaseOrg> local = perfomersList;
        ISession session = this.session;
        string format = "select distinct d.Perfomer from CmpSupplier s, Supplier d where s.SupplierOrg.SupplierId = d.SupplierId and s.Service.ServiceId={0}  and d.Perfomer.BaseOrgId<>0  and s.Company.CompanyId=(select ParamValue from CompanyParam where Company.CompanyId={1} and Period.PeriodId=0 and DBeg<='{2}' and DEnd>='{3}' and Param.ParamId=211)";
        object[] objArray = new object[4]{ (object) workDistribute.Service.ServiceId, (object) workDistribute.Company.CompanyId, null, null };
        int index1 = 2;
        periodName = this.NextMonthClosed.PeriodName;
        string baseFormat1 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.KvrplHelper.LastDay(periodName.Value));
        objArray[index1] = (object) baseFormat1;
        int index2 = 3;
        periodName = this.NextMonthClosed.PeriodName;
        string baseFormat2 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(periodName.Value);
        objArray[index2] = (object) baseFormat2;
        string queryString = string.Format(format, objArray);
        IList<BaseOrg> baseOrgList = session.CreateQuery(queryString).List<BaseOrg>();
        // ISSUE: explicit reference operation
        local = baseOrgList;
        perfomersList.Insert(0, new BaseOrg(0, ""));
      }
      // ISSUE: explicit reference operation
      // ISSUE: variable of a reference type
      IList<BaseOrg> local1 = recipientsList;
      ISession session1 = this.session;
      string format1 = "select distinct d.Recipient from CmpSupplier s, Supplier d where s.SupplierOrg.SupplierId = d.SupplierId and s.Service.ServiceId={0} and d.Recipient.BaseOrgId<>0  and s.Company.CompanyId=(select ParamValue from CompanyParam where Company.CompanyId={1} and Period.PeriodId=0 and DBeg<='{2}' and DEnd>='{3}' and Param.ParamId=211) order by d.Recipient.NameOrgMin";
      object[] objArray1 = new object[4]{ (object) workDistribute.Service.ServiceId, (object) workDistribute.Company.CompanyId, null, null };
      int index3 = 2;
      periodName = this.NextMonthClosed.PeriodName;
      string baseFormat3 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.KvrplHelper.LastDay(periodName.Value));
      objArray1[index3] = (object) baseFormat3;
      int index4 = 3;
      periodName = this.NextMonthClosed.PeriodName;
      string baseFormat4 = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(periodName.Value);
      objArray1[index4] = (object) baseFormat4;
      string queryString1 = string.Format(format1, objArray1);
      IList<BaseOrg> baseOrgList1 = session1.CreateQuery(queryString1).List<BaseOrg>();
      // ISSUE: explicit reference operation
      local1 = baseOrgList1;
      recipientsList.Insert(0, new BaseOrg(0, ""));
      ((DataGridViewComboBoxCell) this.dgvWorkDistribute["Performer", row.Index]).DataSource = (object) perfomersList;
      ((DataGridViewComboBoxCell) this.dgvWorkDistribute["Performer", row.Index]).DisplayMember = "NameOrgMinDop";
      ((DataGridViewComboBoxCell) this.dgvWorkDistribute["Performer", row.Index]).ValueMember = "BaseOrgId";
      ((DataGridViewComboBoxCell) this.dgvWorkDistribute["Recipient", row.Index]).DataSource = (object) recipientsList;
      ((DataGridViewComboBoxCell) this.dgvWorkDistribute["Recipient", row.Index]).DisplayMember = "NameOrgMinDop";
      ((DataGridViewComboBoxCell) this.dgvWorkDistribute["Recipient", row.Index]).ValueMember = "BaseOrgId";
      row.Cells["Service"].Value = (object) ((lsWorkDistribute) row.DataBoundItem).WorkDistribute.Service.ServiceId;
      if (((lsWorkDistribute) row.DataBoundItem).Supplier == null)
        return;
      row.Cells["Recipient"].Value = (object) ((lsWorkDistribute) row.DataBoundItem).Supplier.Recipient.BaseOrgId;
      row.Cells["Performer"].Value = (object) ((lsWorkDistribute) row.DataBoundItem).Supplier.Perfomer.BaseOrgId;
    }

    private void InsertWorkDistribute()
    {
      this.InsertRecord = true;
      lsWorkDistribute lsWorkDistribute = new lsWorkDistribute();
      lsWorkDistribute.Period = Kvartplata.Classes.Options.Period;
      lsWorkDistribute.Scheme = 1;
      lsWorkDistribute.MonthCnt = 1;
      lsWorkDistribute.Client = this.Client;
      IList<lsWorkDistribute> lsWorkDistributeList = (IList<lsWorkDistribute>) new List<lsWorkDistribute>();
      if ((uint) this.dgvWorkDistribute.Rows.Count > 0U)
        lsWorkDistributeList = (IList<lsWorkDistribute>) (this.dgvWorkDistribute.DataSource as List<lsWorkDistribute>);
      lsWorkDistributeList.Add(lsWorkDistribute);
      this.dgvWorkDistribute.DataSource = (object) null;
      this.dgvWorkDistribute.DataSource = (object) lsWorkDistributeList;
      this.dgvWorkDistribute.ReadOnly = false;
      this.SetViewWorkDistribute(true);
    }

    private void SaveWorkDistribute()
    {
      if (this.dgvWorkDistribute.Rows.Count > 0 && this.dgvWorkDistribute.CurrentRow != null)
      {
        this.session.Clear();
        this.session = Kvartplata.Domain.CurrentSession;
        lsWorkDistribute dataBoundItem = (lsWorkDistribute) this.dgvWorkDistribute.CurrentRow.DataBoundItem;
        if (dataBoundItem.Period.PeriodId <= this.MonthClosed.PeriodId)
        {
          int num = (int) MessageBox.Show("Невозможно внести изменения в закрытом периоде", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          return;
        }
        if (this.dgvWorkDistribute.CurrentRow.Cells["Recipient"].Value != null && Convert.ToInt32(this.dgvWorkDistribute.CurrentRow.Cells["Recipient"].Value) != 0 || this.dgvWorkDistribute.CurrentRow.Cells["Performer"].Value != null && (uint) Convert.ToInt32(this.dgvWorkDistribute.CurrentRow.Cells["Performer"].Value) > 0U)
        {
          dataBoundItem.Supplier = this.session.CreateQuery(string.Format("from Supplier where Recipient.BaseOrgId={0} and Perfomer.BaseOrgId={1}", (object) Convert.ToInt32(this.dgvWorkDistribute.CurrentRow.Cells["Recipient"].Value), (object) Convert.ToInt32(this.dgvWorkDistribute.CurrentRow.Cells["Performer"].Value))).List<Supplier>()[0];
          if (this.dgvWorkDistribute.CurrentRow.Cells["rents"].Value != null)
          {
            try
            {
              dataBoundItem.Rent = Convert.ToDecimal(Kvartplata.Classes.KvrplHelper.ChangeSeparator(this.dgvWorkDistribute.CurrentRow.Cells["rents"].Value.ToString()));
            }
            catch (Exception ex)
            {
              int num = (int) MessageBox.Show("Некорректный формат суммы", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
              return;
            }
            if (this.dgvWorkDistribute.CurrentRow.Cells["MonthCnt"].Value != null)
            {
              dataBoundItem.MonthCnt = (int) this.dgvWorkDistribute.CurrentRow.Cells["MonthCnt"].Value;
              if (this.dgvWorkDistribute.CurrentRow.Cells["Rate"].Value != null)
              {
                try
                {
                  dataBoundItem.Rate = Convert.ToDecimal(Kvartplata.Classes.KvrplHelper.ChangeSeparator(this.dgvWorkDistribute.CurrentRow.Cells["Rate"].Value.ToString().Replace(".", ",")));
                }
                catch (Exception ex)
                {
                  int num = (int) MessageBox.Show("Некорректный формат процента", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                  return;
                }
                dataBoundItem.Period = Kvartplata.Classes.Options.Period;
                dataBoundItem.Scheme = (int) Convert.ToInt16(this.dgvWorkDistribute.CurrentRow.Cells["Scheme"].Value);
                RightDoc rightDoc = this.session.Get<RightDoc>((object) Convert.ToInt16(this.session.CreateQuery("select cp from ClientParam cp left join fetch cp.Param p where p.ParamId=:pi and cp.ClientId=:clientId and cp.Period.PeriodId=0").SetParameter<short>("pi", Convert.ToInt16(104)).SetParameter<int>("clientId", this.Client.ClientId).List<ClientParam>().First<ClientParam>().ParamValue));
                dataBoundItem.RightDocs = rightDoc;
                if (this.session.CreateQuery(string.Format("from lsWorkDistribute where WorkDistribute.WorkDistribute={0} and Period.PeriodId={1} and Client.ClientId={2}", (object) dataBoundItem.WorkDistribute.WorkDistribute, (object) dataBoundItem.Period.PeriodId, (object) dataBoundItem.Client.ClientId, (object) dataBoundItem.Supplier.SupplierId)).List<lsWorkDistribute>().Count > 0)
                {
                  if (MessageBox.Show("Уже существует запись по этому счетчику за выбраный месяц! Заменить данные?", "Внимание!", MessageBoxButtons.OKCancel, MessageBoxIcon.Asterisk) != DialogResult.OK)
                    return;
                  this.InsertRecord = false;
                }
                dataBoundItem.Uname = Kvartplata.Classes.Options.Login;
                dataBoundItem.Dedit = new DateTime?(DateTime.Now.Date);
                this.session.Clear();
                try
                {
                  if (this.InsertRecord)
                  {
                    this.InsertRecord = false;
                    this.session.Save((object) dataBoundItem);
                  }
                  else
                    this.session.Update((object) dataBoundItem);
                  this.session.Flush();
                }
                catch (Exception ex)
                {
                  int num = (int) MessageBox.Show("Невозможно сохранить изменения", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                  Kvartplata.Classes.KvrplHelper.WriteLog(ex, (Kvartplata.Classes.LsClient) null);
                }
              }
              else
              {
                int num = (int) MessageBox.Show("Введите процент", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                return;
              }
            }
            else
            {
              int num = (int) MessageBox.Show("Введите кол-во месяцев", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
              return;
            }
          }
          else
          {
            int num = (int) MessageBox.Show("Введите сумму", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            return;
          }
        }
        else
        {
          int num = (int) MessageBox.Show("Выберите поставщика", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          return;
        }
      }
      this.btnSave.Enabled = false;
      this.LoadWorkDistribute();
      this.session.Clear();
    }

    private void DeleteWorkDistribute()
    {
      if (this.dgvWorkDistribute.Rows.Count <= 0 || this.dgvWorkDistribute.CurrentRow == null || MessageBox.Show("Удалить запись?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) != DialogResult.OK)
        return;
      this.session = Kvartplata.Domain.CurrentSession;
      lsWorkDistribute dataBoundItem = (lsWorkDistribute) this.dgvWorkDistribute.CurrentRow.DataBoundItem;
      if (dataBoundItem.Period.PeriodId <= this.MonthClosed.PeriodId)
      {
        int num1 = (int) MessageBox.Show("Невозможно удалить запись из закрытого месяца", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
      else
      {
        try
        {
          this.session.Delete((object) dataBoundItem);
          this.session.Flush();
          this.session.Clear();
          this.LoadWorkDistribute();
          this.SetViewWorkDistribute(false);
        }
        catch (Exception ex)
        {
          int num2 = (int) MessageBox.Show("Невозможно удалить запись", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, (Kvartplata.Classes.LsClient) null);
        }
      }
    }

    private void PrepareWorkDistribute()
    {
      this.btnAddRecord.Enabled = Kvartplata.Classes.KvrplHelper.CheckProxy(78, 2, this.Client.Company, false);
      this.btnDelRecord.Enabled = Kvartplata.Classes.KvrplHelper.CheckProxy(78, 2, this.Client.Company, false);
      this.btnSave.Enabled = Kvartplata.Classes.KvrplHelper.CheckProxy(78, 2, this.Client.Company, false);
      this.LoadCmbWDServiceFilter();
      this.LoadCmbWDPeriod();
    }

    private void LoadCmbWDPeriod()
    {
      IList<Kvartplata.Classes.Period> periodList = this.session.CreateQuery(string.Format("from Period p where PeriodId<=(select max(Period.PeriodId) from lsWorkDistribute where Client.ClientId={0}) order by PeriodId desc", (object) this.Client.ClientId)).List<Kvartplata.Classes.Period>();
      periodList.Insert(0, new Kvartplata.Classes.Period(0, new DateTime?()));
      this.cmbWDPeriod.DataSource = (object) periodList;
      this.cmbWDPeriod.ValueMember = "PeriodId";
      this.cmbWDPeriod.DisplayMember = "PeriodName";
    }

    private void LoadCmbWDServiceFilter()
    {
      IList<Kvartplata.Classes.Service> serviceList = this.session.CreateQuery("select s from Service s where s.Root=0 and s.ServiceId in (select wd.Service.ServiceId from lsWorkDistribute ls inner join ls.WorkDistribute wd where ls.Client=:cli) order by " + Kvartplata.Classes.Options.SortService).SetParameter<Kvartplata.Classes.LsClient>("cli", this.Client).List<Kvartplata.Classes.Service>();
      serviceList.Insert(0, new Kvartplata.Classes.Service((short) 0, ""));
      this.cmbWDServiceFilter.DataSource = (object) serviceList;
      this.cmbWDServiceFilter.ValueMember = "ServiceId";
      this.cmbWDServiceFilter.DisplayMember = "ServiceName";
    }

    private void cmbWDServiceFilter_SelectionChangeCommitted(object sender, EventArgs e)
    {
      this.LoadWorkDistribute();
    }

    private void cmbWDPeriod_SelectionChangeCommitted(object sender, EventArgs e)
    {
      this.LoadWorkDistribute();
    }

    private void dgvWorkDistribute_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
    {
      if (((DataGridView) sender).DataSource == null)
        return;
      DataGridViewRow row = ((DataGridView) sender).Rows[e.RowIndex];
      if (((lsWorkDistribute) row.DataBoundItem).Period != null && ((lsWorkDistribute) row.DataBoundItem).Period.PeriodId == this.MonthClosed.PeriodId + 1)
      {
        row.DefaultCellStyle.BackColor = Color.PapayaWhip;
        row.DefaultCellStyle.ForeColor = Color.Black;
        row.DefaultCellStyle.Font = new Font(this.dgvWorkDistribute.Font, FontStyle.Regular);
      }
      else if (((lsWorkDistribute) row.DataBoundItem).Period != null)
      {
        row.DefaultCellStyle.BackColor = Color.White;
        row.DefaultCellStyle.ForeColor = Color.Gray;
        row.DefaultCellStyle.Font = new Font(this.dgvWorkDistribute.Font, FontStyle.Regular);
      }
      else
      {
        row.DefaultCellStyle.BackColor = Color.White;
        row.DefaultCellStyle.ForeColor = Color.Black;
        row.DefaultCellStyle.Font = new Font(this.dgvWorkDistribute.Font, FontStyle.Italic);
      }
    }

    private void dgvWorkDistribute_CellValueChanged(object sender, DataGridViewCellEventArgs e)
    {
      if (this.dgvWorkDistribute.Columns[e.ColumnIndex].Name == "Service")
      {
        DataGridViewRow row = ((DataGridView) sender).Rows[e.RowIndex];
        if (this.InsertRecord)
        {
          IList<hmWorkDistribute> hmWorkDistributeList = this.session.CreateQuery("select wd from lsWorkPayRent ls inner join ls.WorkDistribute wd where ls.Client=:cli and wd.Service.ServiceId=:serv and ls.Period=:period").SetParameter<Kvartplata.Classes.LsClient>("cli", this.Client).SetParameter("serv", this.dgvWorkDistribute[e.ColumnIndex, e.RowIndex].Value).SetParameter<Kvartplata.Classes.Period>("period", Kvartplata.Classes.Options.Period).List<hmWorkDistribute>();
          ((lsWorkDistribute) row.DataBoundItem).WorkDistribute = hmWorkDistributeList[0];
          IList<BaseOrg> perfomersList = (IList<BaseOrg>) new List<BaseOrg>();
          IList<BaseOrg> recipientsList = (IList<BaseOrg>) new List<BaseOrg>();
          this.LoadPerfRecipWD(row, ref recipientsList, ref perfomersList, hmWorkDistributeList[0]);
        }
      }
      if (this.dgvWorkDistribute.Columns[e.ColumnIndex].Name == "Rate")
        this.dgvWorkDistribute[e.ColumnIndex, e.RowIndex].Value = (object) Convert.ToDecimal(this.dgvWorkDistribute[e.ColumnIndex, e.RowIndex].Value.ToString().Replace(".", ","));
      this.btnSave.Enabled = true;
    }

    private void dgvWorkDistribute_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
    {
      if (!(((DataGridView) sender).Columns[((DataGridView) sender).CurrentCell.ColumnIndex].Name == "Rate"))
        return;
      e.Control.KeyPress += new KeyPressEventHandler(this.CheckDataGrid_KeyPress);
    }

    private void CheckDataGrid_KeyPress(object sender, KeyPressEventArgs e)
    {
    }

    private void dgvWorkDistribute_CellClick(object sender, DataGridViewCellEventArgs e)
    {
      if (e.ColumnIndex <= 0 || e.RowIndex < 0 || !(this.dgvWorkDistribute.Columns[e.ColumnIndex].Name == "Scheme"))
        return;
      int num = ((lsWorkDistribute) this.dgvWorkDistribute.CurrentRow.DataBoundItem).Scheme;
      FrmScheme frmScheme = new FrmScheme((short) 13, (short) num);
      if (frmScheme.ShowDialog() == DialogResult.OK)
        num = (int) frmScheme.CurrentId();
      if (Kvartplata.Classes.KvrplHelper.CheckProxy(78, 2, this.Client.Company, false))
        this.dgvWorkDistribute.CurrentRow.Cells["Scheme"].Value = (object) num;
      frmScheme.Dispose();
    }

    private void tcntrlBalance_SelectedIndexChanged(object sender, EventArgs e)
    {
      this.cbShowAnotherOrg.Enabled = false;
      if (this.tcntrlBalance.SelectedIndex == 0)
        this.LoadBalance();
      if (this.tcntrlBalance.SelectedIndex == 1)
      {
        this.LoadCBPeniReceiptType();
        this.LoadPeni();
      }
      if (this.tcntrlBalance.SelectedTab != this.tpSocSaldo)
        return;
      this.LoadCmbPersonSocSaldo();
      this.LoadCbMSPReceiptType();
      this.LoadSocSaldo();
    }

    private void LoadBalance()
    {
      this.cbShowAnotherOrg.Enabled = true;
      this.btnSave.Enabled = false;
      this.btnDelRecord.Enabled = false;
      this.btnAddRecord.Enabled = false;
      this.tsbMultiPastTime.Enabled = false;
      this.pnBalance.Visible = true;
      this.session = Kvartplata.Domain.CurrentSession;
      this.dgvBalance.Columns.Clear();
      this.dgvBalance.DataSource = (object) null;
      IList listBalanceCard = this.GetListBalanceCard(true);
      DataTable dataTable = new DataTable("Balance");
      dataTable.Columns.Add("№", System.Type.GetType("System.Int32"));
      dataTable.Columns.Add("Услуга", System.Type.GetType("System.String"));
      dataTable.Columns.Add("Входящее", System.Type.GetType("System.Double"));
      dataTable.Columns.Add("Начислено", System.Type.GetType("System.Double"));
      dataTable.Columns.Add("Перер-т", System.Type.GetType("System.Double"));
      dataTable.Columns.Add("НДС", System.Type.GetType("System.Double"));
      dataTable.Columns.Add("МСП", System.Type.GetType("System.Double"));
      dataTable.Columns.Add("МСП выплачено", System.Type.GetType("System.Double"));
      dataTable.Columns.Add("Перер-т по МСП", System.Type.GetType("System.Double"));
      dataTable.Columns.Add("Перер-т по МСП выплачено", System.Type.GetType("System.Double"));
      dataTable.Columns.Add("Предварительный итог", System.Type.GetType("System.Double"));
      dataTable.Columns.Add("Итого начисл.", System.Type.GetType("System.Double"));
      dataTable.Columns.Add("Оплачено", System.Type.GetType("System.Double"));
      dataTable.Columns.Add("Компенсация", System.Type.GetType("System.Double"));
      dataTable.Columns.Add("Исходящее", System.Type.GetType("System.Double"));
      dataTable.Columns.Add("Сортировка", System.Type.GetType("System.Int32"));
      if ((int) Kvartplata.Classes.Options.SpacingSaldo == 1)
      {
        dataTable.Columns.Add("id Поставщика", System.Type.GetType("System.Int32"));
        dataTable.Columns.Add("Поставщик", System.Type.GetType("System.String"));
      }
      foreach (object[] objArray in (IEnumerable) listBalanceCard)
        dataTable.Rows.Add(objArray);
      this.dgvBalance.DataSource = (object) dataTable;
      this.session.Clear();
      this.SetViewBalance();
      this.dgvBalance.ReadOnly = true;
      this.dgvBalance.Focus();
      this.InsertRecord = false;
      this.MySettingsBalance.GridName = "Balance";
      this.LoadSettingsBalance();
    }

    private IList GetListBalanceCard(bool type)
    {
      string str1 = "";
      string str2 = "";
      string str3 = "";
      string str4 = "qwe.service_id, serv.service_name,";
      string str5 = ",qwe.sorter";
      string str6 = "group by qwe.service_id, serv.service_name, qwe.sorter";
      string str7 = "";
      string str8 = "";
      string str9 = "";
      string str10;
      string str11;
      if (type)
      {
        try
        {
          this.setupPeriod = Convert.ToInt32(this.session.CreateSQLQuery(string.Format("select setup_value from dba.fksetup where setup_id=3 and manager_id=(select manager_id from dba.dcCompany where company_id={0})", (object) this.Client.Company.CompanyId)).List()[0]);
        }
        catch
        {
          this.setupPeriod = 1201;
        }
        try
        {
          this.setupValue = Convert.ToInt32(this.session.CreateSQLQuery(string.Format("select setup_value from dba.fksetup where setup_id=4 and manager_id=(select manager_id from dba.dcCompany where company_id={0})", (object) this.Client.Company.CompanyId)).List()[0]);
        }
        catch
        {
          this.setupValue = 0;
        }
        str10 = !(Kvartplata.Classes.Options.SortService == " s.ServiceId") ? "order by 2" : "order by 1";
        if ((int) Kvartplata.Classes.Options.SpacingSaldo == 1)
        {
          str1 = ",supplier_id ";
          str2 = ",(select nameorg_min from dba.base_org where idbaseorg=supplier_id) as supplier_name ";
          str3 = ",supplier_name";
          str6 = str6 + str1 + str2;
        }
        if (!this.cbShowAnotherOrg.Checked)
          str9 = " and sp.sendrent<>1 ";
        str11 = "(if (" + (object) this.setupPeriod + " <= {0} and " + (object) this.setupValue + "<>2) then if " + (object) this.setupValue + " =1 then isnull(rent,0)+isnull(rentpast,0)+isnull(rent_comp,0) else isnull(rent,0)+isnull(rentpast,0)-isnull(msppast,0)+isnull(msppastpay,0)+isnull(rent_comp,0) endif else  isnull(rent,0)+isnull(rentpast,0)-isnull(msp,0)+isnull(msppay,0)-isnull(msppast,0)+isnull(msppastpay,0)+isnull(rent_comp,0) endif) ";
      }
      else
      {
        str10 = "";
        str1 = "";
        str2 = "";
        str3 = "";
        str4 = "";
        str5 = "";
        str6 = "";
        str8 = "+sum(qwe.rentpast)";
        str7 = "group by b.service_id,serv.service_id,client_id, balin,rent,rentpast,pay,rent_comp,balout,sp.sorter,supplier_id";
        if (!this.cbShowAnotherOrg.Checked)
          str9 = " and b.Service_id not in (select s.Service_Id from dba.cmpServiceParam spr,dba.dcService s where spr.Company_id={2} and spr.Complex_id={3} and spr.SendRent=1 and spr.Service_id=s.Root)";
        str11 = this.setupPeriod > Kvartplata.Classes.Options.Period.PeriodId || this.setupValue == 2 ? "sum(b.rent)-isnull((select sum(rm.rent) from dba.lsRentMSP rm where rm.period_id={0} and rm.client_id={1} and rm.Code=0 and rm.MSP_id in (select MSP_id from dba.DcMSP where period_id>{0})),0)-isnull((select sum(rm.rent) from dba.lsRentMSP rm where rm.period_id={0} and rm.client_id={1} and rm.Code<>0 and rm.MSP_id in (select MSP_id from dba.DcMSP where period_id>{0})),0)+sum(b.rent_comp)" : (this.setupValue != 1 ? "sum(b.rent)-isnull((select sum(rm.rent) from dba.lsRentMSP rm where rm.period_id={0} and rm.client_id={1} and rm.Code<>0 and rm.MSP_id in (select MSP_id from DcMSP where period_id>{0})),0)+sum(b.rent_comp)" : "sum(b.rent)+sum(b.rent_comp)");
      }
      string str12 = "";
      if ((uint) this.Receipt_id > 0U)
        str12 = string.Format("where rec={0}", (object) this.Receipt_id);
      return this.session.CreateSQLQuery(string.Format("declare @date date  select @date=Period_value from dba.dcPeriod where period_id={0}  select " + str4 + " sum(qwe.balin),sum(qwe.rent),sum(qwe.rentpast),sum(qwe.nds),sum(qwe.msp),sum(qwe.msppay),sum(qwe.msppast),sum(qwe.msppastpay),sum(qwe.preditog)" + str8 + ",sum(qwe.itog),sum(qwe.pay),sum(qwe.rent_comp),sum(qwe.balout)" + str5 + str1 + str3 + " from ( select *,isnull((select receipt_id                   from dba.cmphmReceipt sp, dba.lsClient ls                   where ls.company_id=sp.company_id and ls.idhome=sp.idhome and sp.complex_id=ls.complex_id                   and  @date  between dbeg and dend and ls.client_id=t.client_id                   and (sp.service_id=t.service_id or sp.service_id=(select root from dba.dcService where service_id=t.service_id and root<>0)) and sp.supplier_id=t.supplier_id),         isnull((select receipt_id                   from dba.cmphmReceipt sp, dba.lsClient ls                   where ls.company_id=sp.company_id and ls.idhome=sp.idhome and sp.complex_id=ls.complex_id                   and  @date  between dbeg and dend and ls.client_id=t.client_id and sp.service_id=0 and sp.supplier_id=t.supplier_id),         isnull((select receipt_id                  from dba.cmphmReceipt sp, dba.lsClient ls                   where ls.company_id=sp.company_id and ls.idhome=sp.idhome and sp.complex_id=ls.complex_id                   and  @date  between dbeg and dend and ls.client_id=t.client_id                   and (sp.service_id=t.service_id or sp.service_id=(select root from dba.dcService where service_id=t.service_id and root<>0)) and sp.supplier_id=0),         isnull((select receipt_id                   from dba.cmphmReceipt sp, dba.lsClient ls                   where ls.company_id=sp.company_id and sp.idhome=0 and sp.complex_id=ls.complex_id                   and  @date  between dbeg and dend and ls.client_id=t.client_id                   and (sp.service_id=t.service_id or sp.service_id=(select root from dba.dcService where service_id=t.service_id and root<>0)) and sp.supplier_id=t.supplier_id),         isnull((select receipt_id                  from dba.cmphmReceipt sp, dba.lsClient ls                   where ls.company_id=sp.company_id and sp.idhome=0 and sp.complex_id=ls.complex_id                   and  @date  between dbeg and dend and ls.client_id=t.client_id and sp.service_id=0 and sp.supplier_id=t.supplier_id),         isnull((select receipt_id                   from dba.cmphmReceipt sp, dba.lsClient ls                   where ls.company_id=sp.company_id and sp.idhome=0 and sp.complex_id=ls.complex_id                   and  @date  between dbeg and dend and ls.client_id=t.client_id                   and (sp.service_id=t.service_id or sp.service_id=(select root from dba.dcService where service_id=t.service_id and root<>0)) and sp.supplier_id=0),         isnull((select receipt_id                   from dba.cmpServiceParam sp, dba.lsClient ls                   where ls.company_id=sp.company_id and ls.client_id=t.client_id and sp.complex_id=ls.complex_id                   and (sp.service_id=t.service_id or sp.service_id=(select root from dba.dcService where service_id=t.service_id and root<>0))),         isnull((if t.service_id=0 and (select count(receipt_id) from dba.cmpReceipt sp,dba.lsClient ls where ls.company_id=sp.company_id and ls.client_id=t.client_id)=1 then          (select receipt_id from dba.cmpReceipt sp,dba.lsClient ls where ls.company_id=sp.company_id and ls.client_id=t.client_id) else 0 endif),0)))))))) rec from (   select serv.service_id, {1} client_id, balin, rent, rentpast,       isnull((select sum(rent_vat) from DBA.lsRent rm where rm.period_id={0} and client_id={1} and rm.service_id in (select service_id from DBA.dcService where root=serv.service_id)),0) as nds,       0 as msp, 0 as msppay, 0 as msppast, 0 as msppastpay," + str11 + "       as preditog,(if preditog<>0 then preditog else null endif) as itog,pay,rent_comp,balout,sp.sorter,supplier_id  " + str2 + "       from DBA.dcService serv        left outer join (select root,b.service_id,sum(b.Balance_in) as balin, sum(b.Rent)-sum(b.Rent_past) as rent,sum(b.Rent_past) as rentpast,                           sum(b.Payment) as pay,sum(b.Subsidy) as subs,sum(b.Balance_out) as balout,sum(b.Rent_comp) as rent_comp,supplier_id                             from DBA.lsBalance b, DBA.dcService s                            where b.service_id=s.service_id and b.period_id={0} and b.client_id={1} group by root,supplier_id,b.service_id                       ) as b on b.root=serv.service_id,        DBA.cmpServiceParam sp        where serv.root=0 and sp.service_id=serv.service_id and sp.company_id={2} and sp.complex_id={3}" + str9 + "       and (isnull(balin,0)<>0 or isnull(rent,0)<>0  or isnull(rentpast,0)<>0 or isnull(msp,0)<>0 or isnull(msppay,0)<>0 or isnull(msppast,0)<>0 or isnull(msppastpay,0)<>0  or isnull(pay,0)<>0 or isnull(balout,0)<>0)" + str7 + "   union all       select s.service_id,{1} client_id, sum(b.Balance_in) as balin, sum(b.Rent)-sum(b.Rent_past) as rent,sum(b.Rent_past) as rentpast,       isnull((select sum(rent_vat) from DBA.lsRent rm where rm.period_id={0} and client_id={1} and rm.service_id=0),0) as nds,        0 as msp, 0 as msppay, 0 as msppast, 0 as msppastpay," + str11 + "       as preditog,(if preditog<>0 then preditog else null endif) as itog,sum(b.Payment) as pay,sum(b.Rent_comp) as rent_comp,sum(b.Balance_out) as balout,0 as sorter,supplier_id  " + str2 + "       from DBA.dcService s        left outer join DBA.lsBalance b on b.service_id=s.service_id and b.period_id={0} and b.client_id={1} where s.service_id=0        group by s.service_id,supplier_id     union all       select serv.root, {1} client_id, 0 as balin, 0 as rent, 0 as rentpast, 0 nds, msp.msp, msp.msppay, msp.msppast, msp.msppastpay, 0 preditog, 0 itog, 0 pay,0 rent_comp,               0 balout,sp.sorter,msp.Supplier_id        from dba.dcservice serv       left join (select sum(q.msp) msp,sum(q.msppay) msppay,sum(q.msppast) msppast,sum(q.msppastpay) msppastpay, q.sid, q.supplier_id                   from (                       select sum(rent) msp,0 msppay,0 msppast,0 msppastpay, rm.Service_id sid, rm.supplier_id                        from DBA.lsRentMSP rm, DBA.dcMSP m,DBA.dcService serv                        where rm.msp_id=m.msp_id and rm.period_id={0} and client_id={1} and code=0 and rm.service_id in (select service_id from DBA.dcService where root=serv.service_id)                        group by rm.Service_id, rm.supplier_id                       union                       select 0 msp, sum(rent) msppay,0 msppast,0 msppastpay, rm.Service_id sid , rm.supplier_id                        from DBA.lsRentMSP rm,DBA.dcMSP m, DBA.dcService serv                        where rm.msp_id=m.msp_id and rm.period_id={0} and client_id={1} and code=0 and m.mspperiod_id<={0} and rm.service_id in (select service_id from DBA.dcService where root=serv.service_id)                        group by rm.Service_id, rm.supplier_id                        union                       select 0 msp,0 msppay ,sum(rent) msppast,0 msppastpay, rm.Service_id sid , rm.supplier_id                        from DBA.lsRentMSP rm,DBA.dcMSP m, DBA.dcService serv                        where rm.msp_id=m.msp_id and rm.period_id={0} and client_id={1} and code<>0 and rm.service_id in (select service_id from DBA.dcService where root=serv.service_id)                        group by rm.Service_id, rm.supplier_id                        union                          select 0 msp,0 msppay ,0 msppast,sum(rent) msppastpay, rm.Service_id sid , rm.supplier_id                        from DBA.lsRentMSP rm,DBA.dcMSP m, DBA.dcService serv                        where rm.msp_id=m.msp_id and rm.period_id={0} and client_id={1} and code<>0 and m.mspperiod_id<={0} and rm.service_id in (select service_id from DBA.dcService where root=serv.service_id)                        group by rm.Service_id, rm.supplier_id                        ) q                   group by q.sid, q.supplier_id) msp on msp.sid=serv.service_id       , DBA.cmpServiceParam sp        where sp.service_id=serv.root and sp.company_id={2} and sp.complex_id={3} and sp.sendrent<>1 and (isnull(msp,0)<>0 or isnull(msppay,0)<>0 or isnull(msppast,0)<>0 or isnull(msppastpay,0)<>0)  ) t " + str12 + ") qwe inner join dba.dcService serv on serv.service_id=qwe.service_id where ((qwe.balin<>0 or qwe.rent<>0 or qwe.rentpast<>0 OR isnull(qwe.msp,0)<>0 OR isnull(qwe.msppay,0)<>0 OR isnull(qwe.msppast,0)<>0 OR isnull(qwe.msppastpay,0)<>0 OR isnull(qwe.pay,0)<>0 OR isnull(qwe.balout,0)<>0) OR qwe.service_id<>0)" + str6 + " " + str10, (object) Kvartplata.Classes.Options.Period.PeriodId, (object) this.Client.ClientId, (object) this.Client.Company.CompanyId, (object) this.Client.Complex.IdFk)).List();
    }

    private void LoadCBReceiptType()
    {
      IList<Receipt> receiptList1 = (IList<Receipt>) new List<Receipt>();
      IList<Receipt> receiptList2 = this.session.CreateQuery("from Receipt where ReceiptId<>0").List<Receipt>();
      receiptList2.Insert(0, new Receipt()
      {
        ReceiptId = (short) 0,
        ReceiptName = ""
      });
      this.cbReceiptType.DataSource = (object) receiptList2;
      this.cbReceiptType.ValueMember = "ReceiptId";
      this.cbReceiptType.DisplayMember = "ReceiptName";
      this.Receipt_id = (short) 0;
    }

    private void LoadSettingsBalance()
    {
      this.MySettingsBalance.Load();
      foreach (DataGridViewColumn column in (BaseCollection) this.dgvBalance.Columns)
        this.MySettingsBalance.GetMySettings(column);
    }

    private void dgvBalance_ColumnWidthChanged(object sender, DataGridViewColumnEventArgs e)
    {
      if (this.MySettingsBalance.FindByName(e.Column.Name) < 0)
        return;
      this.MySettingsBalance.Columns[this.MySettingsBalance.FindByName(e.Column.Name)].Width = e.Column.Width;
      this.MySettingsBalance.Save();
    }

    private void SetViewBalance()
    {
      DataGridViewCellStyle gridViewCellStyle = new DataGridViewCellStyle();
      gridViewCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
      foreach (DataGridViewColumn column in (BaseCollection) this.dgvBalance.Columns)
      {
        if (column.Index != 0 && column.Index != 1 && column.Name != "Поставщик")
        {
          column.DefaultCellStyle.Alignment = DataGridViewContentAlignment.BottomRight;
          column.HeaderCell.Style = gridViewCellStyle;
          column.SortMode = DataGridViewColumnSortMode.NotSortable;
        }
        else if (column.Index == 0)
        {
          this.dgvBalance.Columns[0].DefaultCellStyle.BackColor = Color.PapayaWhip;
        }
        else
        {
          this.dgvBalance.Columns[1].DefaultCellStyle.BackColor = Color.PapayaWhip;
          this.dgvBalance.Columns[1].DefaultCellStyle.Alignment = DataGridViewContentAlignment.BottomLeft;
        }
      }
      if (this.Client.Complex.IdFk == Kvartplata.Classes.Options.Complex.IdFk)
      {
        this.dgvBalance.Columns[5].Visible = false;
      }
      else
      {
        this.dgvBalance.Columns[6].Visible = false;
        this.dgvBalance.Columns[8].Visible = false;
      }
      this.dgvBalance.Columns[7].Visible = false;
      this.dgvBalance.Columns[9].Visible = false;
      this.dgvBalance.Columns[10].Visible = false;
      this.dgvBalance.Columns[15].Visible = false;
      if ((int) Kvartplata.Classes.Options.SpacingSaldo == 1)
      {
        this.dgvBalance.Columns[16].Visible = false;
        this.dgvBalance.Columns[17].DisplayIndex = 2;
      }
      this.session = Kvartplata.Domain.CurrentSession;
      IList list1 = (IList) new ArrayList();
      IList list2 = this.session.CreateSQLQuery(string.Format("select isnull((select sum(subsum) from DBA.jilsub where period='{0}' and idlic={1} and codedoc not in (2010,2011,2012)),0) as subs", (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.Options.Period.PeriodName.Value), (object) this.Client.ClientId)).List();
      IList list3 = this.session.CreateQuery(string.Format("select sum(o.Pay) from Overpay o where o.Period.PeriodId={0} and o.LsClient.ClientId={1} and o.Code<10) as overpay", (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.Options.Period.PeriodName.Value), (object) this.Client.ClientId)).List();
      IList listBalanceCard = this.GetListBalanceCard(false);
      this.session.Clear();
      foreach (object[] objArray in (IEnumerable) listBalanceCard)
      {
        this.lblIn.Text = this.LblText(objArray, 0);
        this.lblRent.Text = this.LblText(objArray, 1);
        this.lblRentPast.Text = this.LblText(objArray, 2);
        this.lblNDS.Text = this.LblText(objArray, 3);
        this.lblMSP.Text = this.LblText(objArray, 4);
        this.lblMSPPast.Text = this.LblText(objArray, 6);
        this.lblRentMonth.Text = this.LblText(objArray, 8);
        this.lblPayment.Text = this.LblText(objArray, 10);
        this.lblOut.Text = this.LblText(objArray, 12);
        this.lblComp.Text = this.LblText(objArray, 11);
      }
      if ((uint) list3.Count > 0U)
        this.lblOverpay.Text = string.Format("{0:C}", list3[0]);
      else
        this.lblOverpay.Text = string.Format("{0:C}", (object) 0);
      if ((uint) list2.Count > 0U)
        this.lblSubs.Text = string.Format("{0:C}", list2[0]);
      else
        this.lblSubs.Text = string.Format("{0:C}", (object) 0);
      this.Location();
    }

        private new void Location()
        {
            if (this.Client.Complex.IdFk == Kvartplata.Classes.Options.Complex.IdFk)
            {
                this.lblNDS.Visible = false;
                this.lblNDSText.Visible = false;
                this.lblMSP.Visible = true;
                this.lblMSPText.Visible = true;
                this.lblMSPPast.Visible = true;
                this.lblPastMSPText.Visible = true;
                this.lblSubs.Visible = true;
                this.lblSubsText.Visible = true;
                this.lblComp.Location = new Point(this.lblComp.Location.X, 110);
                this.lblCompText.Location = new Point(this.lblCompText.Location.X, 110);
                this.lblRentMonth.Location = new Point(this.lblRentMonth.Location.X, 130);
                this.lblRentMonthText.Location = new Point(this.lblRentMonthText.Location.X, 130);
                this.lblPayment.Location = new Point(this.lblPayment.Location.X, 150);
                this.lblPayText.Location = new Point(this.lblPayText.Location.X, 150);
                this.lblOut.Location = new Point(this.lblOut.Location.X, 170);
                this.lblOutText.Location = new Point(this.lblOutText.Location.X, 170);
            }
            else
            {
                this.lblNDS.Visible = true;
                this.lblNDSText.Visible = true;
                this.lblMSP.Visible = false;
                this.lblMSPText.Visible = false;
                this.lblMSPPast.Visible = false;
                this.lblPastMSPText.Visible = false;
                this.lblSubs.Visible = false;
                this.lblSubsText.Visible = false;
                this.lblNDS.Location = new Point(this.lblNDS.Location.X, 70);
                this.lblNDSText.Location = new Point(this.lblNDSText.Location.X, 70);
                this.lblComp.Location = new Point(this.lblComp.Location.X, 90);
                this.lblCompText.Location = new Point(this.lblCompText.Location.X, 90);
                this.lblRentMonth.Location = new Point(this.lblRentMonth.Location.X, 110);
                this.lblRentMonthText.Location = new Point(this.lblRentMonthText.Location.X, 110);
                this.lblPayment.Location = new Point(this.lblPayment.Location.X, 130);
                this.lblPayText.Location = new Point(this.lblPayText.Location.X, 130);
                this.lblOut.Location = new Point(this.lblOut.Location.X, 150);
                this.lblOutText.Location = new Point(this.lblOutText.Location.X, 150);
            }
        }

        private string LblText(object[] obj, int i)
    {
      if (obj[i] != null)
        return string.Format("{0:C}", obj[i]);
      return string.Format("{0:C}", (object) 0);
    }

    private void dgvBalance_CellMouseDoubleClick(object sender, DataGridViewCellMouseEventArgs e)
    {
      if (this.dgvBalance.CurrentRow == this.dgvBalance.Rows[this.dgvBalance.Rows.Count - 1])
        return;
      if (!this.PastTime)
      {
        this.session = Kvartplata.Domain.CurrentSession;
        Kvartplata.Classes.Service service = this.session.Get<Kvartplata.Classes.Service>((object) Convert.ToInt16(this.dgvBalance.CurrentRow.Cells[0].Value));
        this.session.Clear();
        FrmBalanceDetail frmBalanceDetail = new FrmBalanceDetail(service, this.Client, true);
        frmBalanceDetail.Text = "Сальдо по составляющим услуги " + service.ServiceName;
        frmBalanceDetail.Show();
      }
      else if (!this.InsertRecord)
      {
        this.session = Kvartplata.Domain.CurrentSession;
        Kvartplata.Classes.Service service = this.session.Get<Kvartplata.Classes.Service>(this.dgvBalance.CurrentRow.Cells["Service"].Value);
        Kvartplata.Classes.Period month = this.session.CreateCriteria(typeof (Kvartplata.Classes.Period)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("PeriodName", this.dgvBalance.CurrentRow.Cells["Month"].Value)).List<Kvartplata.Classes.Period>()[0];
        this.session.Clear();
        Person person = new Person();
        DcMSP msp = new DcMSP();
        if (this.handMadeMSP)
        {
          person = this.session.Get<Person>(this.dgvBalance.CurrentRow.Cells["FIO"].Value);
          msp = this.session.Get<DcMSP>(this.dgvBalance.CurrentRow.Cells["MSP"].Value);
        }
        FrmHandMadeDetail frmHandMadeDetail = new FrmHandMadeDetail(this.Client, service, month, msp, person, this.handMadeMSP, false, (short) 4, "", (CorrectRent) null, (RentMSP) null, (short) 0, (short) 0, 0.0, 0.0, 0.0);
        int num = (int) frmHandMadeDetail.ShowDialog();
        frmHandMadeDetail.Dispose();
        this.LoadHandMade();
      }
    }

    private void btnMainCorrect_Click(object sender, EventArgs e)
    {
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(45, 1, this.Client.Company, true))
        return;
      FrmCorrect frmCorrect = new FrmCorrect(this.Client, Convert.ToInt16(((Control) sender).Tag));
      int num = (int) frmCorrect.ShowDialog();
      frmCorrect.Dispose();
    }

    private void dgvBalance_CellMouseDown(object sender, DataGridViewCellMouseEventArgs e)
    {
      if (e.RowIndex == -1 || e.ColumnIndex == -1 || e.Button != MouseButtons.Right)
        return;
      ((DataGridView) sender).Rows[e.RowIndex].Selected = true;
      ((DataGridView) sender).CurrentCell = ((DataGridView) sender).Rows[e.RowIndex].Cells[e.ColumnIndex];
    }

    private void TsmiDetailCorrectRent_Click(object sender, EventArgs e)
    {
      Kvartplata.Classes.Service service = new Kvartplata.Classes.Service();
      if (this.dgvBalance.Rows.Count > 1)
        service = this.session.Get<Kvartplata.Classes.Service>((object) Convert.ToInt16(this.dgvBalance.CurrentRow.Cells[0].Value));
      new FrmDetailCorrectRent(this.Client, service).Show();
    }

    private void TsmiHandChangesCharges_Click(object sender, EventArgs e)
    {
      this.tmr.Start();
      this.tsbMultiPastTime.BackColor = Color.DarkOrange;
      this.handMadeMSP = false;
      this.PastTime = true;
      this.LoadHandMade();
    }

    private void TsmiHandChangesBenefits_Click(object sender, EventArgs e)
    {
      this.tmr.Start();
      this.tsbMultiPastTime.BackColor = Color.DarkOrange;
      this.handMadeMSP = true;
      this.PastTime = true;
      this.LoadHandMade();
    }

    private void LoadHandMade()
    {
      this.btnSave.Enabled = false;
      this.btnAddRecord.Enabled = true;
      this.btnDelRecord.Enabled = true;
      this.pnBalance.Visible = false;
      this.tsbMultiPastTime.DropDown = (ToolStripDropDown) null;
      this.session = Kvartplata.Domain.CurrentSession;
      this.dgvBalance.Columns.Clear();
      this.dgvBalance.DataSource = (object) null;
      this.listRent = (IList) new ArrayList();
      this.listRent = this.handMadeMSP ? this.session.CreateQuery(string.Format("select sum(r.RentMain) as rent,r.Month.PeriodName as month,(select ServiceId from Service where ServiceId = s.Root) as serv,r.MSP.MSP_id,r.Person.PersonId from RentMSP r, Service s where r.Period.PeriodId={0} and r.LsClient.ClientId={1} and r.Code=4 and r.Service=s group by s.Root,r.Month.PeriodName,r.MSP.MSP_id,r.Person.PersonId", (object) Kvartplata.Classes.Options.Period.PeriodId, (object) this.Client.ClientId)).List() : this.session.CreateQuery(string.Format("select sum(r.RentMain) as rent,r.Month.PeriodName as month,(select ServiceId from Service where ServiceId = s.Root) as serv from Rent r, Service s where r.Period.PeriodId={0} and r.LsClient.ClientId={1} and r.Code=4 and r.Service=s group by s.Root,r.Month.PeriodName", (object) Kvartplata.Classes.Options.Period.PeriodId, (object) this.Client.ClientId)).List();
      this.dgvBalance.DataSource = (object) this.listRent;
      this.SetViewHandMade();
      this.dgvBalance.ReadOnly = false;
      this.dgvBalance.Focus();
      this.session.Clear();
    }

    private void SetViewHandMade()
    {
      foreach (DataGridViewBand column in (BaseCollection) this.dgvBalance.Columns)
        column.Visible = false;
      IList<Kvartplata.Classes.Service> serviceList = this.session.CreateCriteria(typeof (Kvartplata.Classes.Service)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("Root", (object) Convert.ToInt16(0))).Add((ICriterion) NHibernate.Criterion.Restrictions.Not((ICriterion) NHibernate.Criterion.Restrictions.Eq("ServiceId", (object) Convert.ToInt16(0)))).AddOrder(Order.Asc("ServiceName")).List<Kvartplata.Classes.Service>();
      this.comboboxColumn = new DataGridViewComboBoxColumn();
      this.comboboxColumn.DropDownWidth = 140;
      this.comboboxColumn.Width = 140;
      this.comboboxColumn.MaxDropDownItems = 7;
      this.comboboxColumn.DataSource = (object) serviceList;
      this.comboboxColumn.ValueMember = "ServiceId";
      this.comboboxColumn.DisplayMember = "ServiceName";
      this.comboboxColumn.HeaderText = "Услуга";
      this.comboboxColumn.Name = "Service";
      this.dgvBalance.Columns.Insert(0, (DataGridViewColumn) this.comboboxColumn);
      DataGridViewTextBoxColumn viewTextBoxColumn = new DataGridViewTextBoxColumn();
      viewTextBoxColumn.Width = 100;
      viewTextBoxColumn.HeaderText = "Сумма изменений";
      viewTextBoxColumn.Name = "Rent";
      this.dgvBalance.Columns.Insert(1, (DataGridViewColumn) viewTextBoxColumn);
      CalendarColumn calendarColumn = new CalendarColumn();
      calendarColumn.Name = "Month";
      calendarColumn.HeaderText = "Месяц перерасчета";
      this.dgvBalance.Columns.Insert(2, (DataGridViewColumn) calendarColumn);
      if (this.handMadeMSP)
      {
        IList<Person> personList1 = (IList<Person>) new List<Person>();
        IList<Person> personList2 = this.session.CreateCriteria(typeof (Person)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).Add((ICriterion) NHibernate.Criterion.Restrictions.In("Reg.RegId", (ICollection) new int[2]{ 1, 2 })).Add((ICriterion) NHibernate.Criterion.Restrictions.Or((ICriterion) NHibernate.Criterion.Restrictions.Lt("Archive", (object) 3), (ICriterion) NHibernate.Criterion.Restrictions.Eq("Archive", (object) 5))).AddOrder(Order.Asc("Archive")).AddOrder(Order.Asc("Relation.RelationId")).List<Person>();
        this.comboboxColumn = new DataGridViewComboBoxColumn();
        this.comboboxColumn.DropDownWidth = 180;
        this.comboboxColumn.Width = 180;
        this.comboboxColumn.MaxDropDownItems = 7;
        this.comboboxColumn.DataSource = (object) personList2;
        this.comboboxColumn.ValueMember = "PersonId";
        this.comboboxColumn.DisplayMember = "FIO";
        this.comboboxColumn.HeaderText = "ФИО";
        this.comboboxColumn.Name = "FIO";
        this.dgvBalance.Columns.Insert(0, (DataGridViewColumn) this.comboboxColumn);
        IList<DcMSP> dcMspList = this.session.CreateCriteria(typeof (DcMSP)).AddOrder(Order.Asc("MSP_name")).List<DcMSP>();
        this.comboboxColumn = new DataGridViewComboBoxColumn();
        this.comboboxColumn.DropDownWidth = 200;
        this.comboboxColumn.Width = 200;
        this.comboboxColumn.MaxDropDownItems = 7;
        this.comboboxColumn.DataSource = (object) dcMspList;
        this.comboboxColumn.ValueMember = "MSP_id";
        this.comboboxColumn.DisplayMember = "MSP_name";
        this.comboboxColumn.HeaderText = "Льгота";
        this.comboboxColumn.Name = "MSP";
        this.dgvBalance.Columns.Insert(1, (DataGridViewColumn) this.comboboxColumn);
      }
      foreach (DataGridViewRow row in (IEnumerable) this.dgvBalance.Rows)
      {
        row.Cells["Rent"].Value = ((object[]) this.listRent[row.Index])[0];
        row.Cells["Month"].Value = ((object[]) this.listRent[row.Index])[1];
        row.Cells["Service"].Value = ((object[]) this.listRent[row.Index])[2];
        if (this.handMadeMSP)
        {
          row.Cells["FIO"].Value = ((object[]) this.listRent[row.Index])[4];
          row.Cells["MSP"].Value = ((object[]) this.listRent[row.Index])[3];
        }
      }
    }

    private void InsertHandMade()
    {
      this.InsertRecord = true;
      object[] objArray;
      if (!this.handMadeMSP)
        objArray = new object[3]
        {
          (object) 0,
          (object) null,
          (object) null
        };
      else
        objArray = new object[5]
        {
          (object) 0,
          (object) null,
          (object) null,
          (object) null,
          (object) null
        };
      this.listRent = (IList) new ArrayList();
      if ((uint) this.dgvBalance.Rows.Count > 0U)
        this.listRent = (IList) (this.dgvBalance.DataSource as ArrayList);
      this.listRent.Add((object) objArray);
      this.dgvBalance.Columns.Clear();
      this.dgvBalance.DataSource = (object) null;
      this.dgvBalance.DataSource = (object) this.listRent;
      this.SetViewHandMade();
    }

    private void SaveHandMade()
    {
      if (this.dgvBalance.Rows.Count <= 0 || this.dgvBalance.CurrentRow == null)
        return;
      this.session = Kvartplata.Domain.CurrentSession;
      if (this.dgvBalance.CurrentRow.Cells["Service"].Value == null)
      {
        int num1 = (int) MessageBox.Show("Выберите услугу", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
      else if (this.dgvBalance.CurrentRow.Cells["Rent"].Value == null)
      {
        int num2 = (int) MessageBox.Show("Введите сумму", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
      else
      {
        Kvartplata.Classes.Service service = this.session.Get<Kvartplata.Classes.Service>(this.dgvBalance.CurrentRow.Cells["Service"].Value);
        this.dgvBalance.CurrentRow.Cells["Month"].Value = this.dgvBalance.CurrentRow.Cells["Month"].Value != null ? (object) Kvartplata.Classes.KvrplHelper.FirstDay(Convert.ToDateTime(this.dgvBalance.CurrentRow.Cells["Month"].Value)) : (object) Kvartplata.Classes.Options.Period.PeriodName.Value;
        Kvartplata.Classes.Period month = this.session.CreateCriteria(typeof (Kvartplata.Classes.Period)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("PeriodName", this.dgvBalance.CurrentRow.Cells["Month"].Value)).List<Kvartplata.Classes.Period>()[0];
        double num3;
        try
        {
          num3 = Convert.ToDouble(this.dgvBalance.CurrentRow.Cells["Rent"].Value);
        }
        catch (Exception ex)
        {
          int num4 = (int) MessageBox.Show("Введенная сумма некорректна", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          return;
        }
        IList<Rent> rentList = (IList<Rent>) new List<Rent>();
        IList<RentMSP> rentMspList = (IList<RentMSP>) new List<RentMSP>();
        Person person = new Person();
        DcMSP msp = new DcMSP();
        if (!this.handMadeMSP)
        {
          rentList = this.session.CreateQuery(string.Format("select r from Rent r,Service s where r.Period.PeriodId={0} and r.LsClient.ClientId = {1} and r.Service=s and s.Root={2} and r.Code=0", (object) month.PeriodId, (object) this.Client.ClientId, (object) service.ServiceId)).List<Rent>();
        }
        else
        {
          if (this.dgvBalance.CurrentRow.Cells["FIO"].Value == null)
          {
            int num4 = (int) MessageBox.Show("Выберите жильца", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            return;
          }
          if (this.dgvBalance.CurrentRow.Cells["MSP"].Value == null)
          {
            int num4 = (int) MessageBox.Show("Выберите льготу", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            return;
          }
          person = this.session.Get<Person>(this.dgvBalance.CurrentRow.Cells["FIO"].Value);
          msp = this.session.Get<DcMSP>(this.dgvBalance.CurrentRow.Cells["MSP"].Value);
          rentMspList = this.session.CreateQuery(string.Format("select r from RentMSP r,Service s where r.Period.PeriodId={0} and r.LsClient.ClientId = {1} and r.Service=s and s.Root={2} and r.Code=0 and r.MSP.MSP_id={3} and r.Person.PersonId={4}", (object) month.PeriodId, (object) this.Client.ClientId, (object) service.ServiceId, (object) msp.MSP_id, (object) person.PersonId)).List<RentMSP>();
        }
        if (!this.handMadeMSP && rentList.Count > 0 || this.handMadeMSP && rentMspList.Count > 0)
        {
          if (!this.handMadeMSP)
          {
            double num4 = Convert.ToDouble(this.session.CreateQuery(string.Format("select sum(r.RentMain) from Rent r,Service s where r.Period.PeriodId={0} and r.LsClient.ClientId = {1} and r.Service=s and s.Root={2} and r.Code=0", (object) month.PeriodId, (object) this.Client.ClientId, (object) service.ServiceId)).List()[0]);
            ITransaction transaction = this.session.BeginTransaction();
            if (this.InsertRecord)
            {
              this.InsertRecord = false;
              foreach (Rent rent1 in (IEnumerable<Rent>) rentList)
              {
                Rent rent2 = new Rent();
                rent2.Period = Kvartplata.Classes.Options.Period;
                rent2.LsClient = this.Client;
                rent2.Service = rent1.Service;
                rent2.Supplier = rent1.Supplier;
                rent2.Month = month;
                rent2.Code = (short) 4;
                rent2.Motive = 1;
                rent2.Volume = 0.0;
                rent2.RentEO = 0.0;
                rent2.RentMain = rent1.RentMain * num3 / num4;
                try
                {
                  this.session.Save((object) rent2);
                  this.session.Flush();
                }
                catch (Exception ex)
                {
                  Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
                }
              }
            }
            else
            {
              IList list1 = (IList) new ArrayList();
              IList list2 = this.session.CreateQuery(string.Format("select sum(r.RentMain) as rent,r.Month.PeriodName as month,(select ServiceId from Service where ServiceId = s.Root) as serv from Rent r, Service s where r.Period.PeriodId={0} and r.LsClient.ClientId={1} and r.Code=4 and r.Service=s group by s.Root,r.Month.PeriodName", (object) Kvartplata.Classes.Options.Period.PeriodId, (object) this.Client.ClientId)).List();
              Kvartplata.Classes.Period period = this.session.CreateCriteria(typeof (Kvartplata.Classes.Period)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("PeriodName", ((object[]) list2[this.dgvBalance.CurrentRow.Index])[1])).List<Kvartplata.Classes.Period>()[0];
              this.session.Get<Kvartplata.Classes.Service>(((object[]) list2[this.dgvBalance.CurrentRow.Index])[2]);
              foreach (Rent rent in (IEnumerable<Rent>) rentList)
              {
                try
                {
                  this.session.CreateQuery(string.Format("update Rent r set r.RentMain=:rent,r.Month.PeriodId={0} where r.Period.PeriodId={1} and r.LsClient.ClientId={2} and r.Service.ServiceId={3} and r.Supplier.BaseOrgId={4} and r.Code=4 and r.Month.PeriodId={5}", (object) month.PeriodId, (object) Kvartplata.Classes.Options.Period.PeriodId, (object) this.Client.ClientId, (object) rent.Service.ServiceId, (object) rent.Supplier.SupplierId, (object) period.PeriodId)).SetParameter<double>("rent", rent.RentMain * num3 / num4).ExecuteUpdate();
                }
                catch (Exception ex)
                {
                  Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
                }
              }
            }
            double num5 = Convert.ToDouble(this.session.CreateQuery(string.Format("select sum(r.RentMain) from Rent r,Service s where r.Period.PeriodId={0} and r.LsClient.ClientId = {1} and r.Service=s and s.Root={2} and r.Code=4", (object) Kvartplata.Classes.Options.Period.PeriodId, (object) this.Client.ClientId, (object) service.ServiceId)).List()[0]);
            if (num5 != num3)
            {
              Rent rent = rentList[0];
              try
              {
                this.session.CreateQuery(string.Format("update Rent r set r.RentMain=r.RentMain+:rent where r.Period.PeriodId={0} and r.LsClient.ClientId={1} and r.Service.ServiceId={2} and r.Supplier.BaseOrgId={3} and r.Code=4 and r.Month.PeriodId={4}", (object) Kvartplata.Classes.Options.Period.PeriodId, (object) this.Client.ClientId, (object) rent.Service.ServiceId, (object) rent.Supplier.SupplierId, (object) month.PeriodId)).SetParameter<double>("rent", num3 - num5).ExecuteUpdate();
              }
              catch (Exception ex)
              {
                Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
              }
            }
            transaction.Commit();
          }
          else
          {
            double num4 = Convert.ToDouble(this.session.CreateQuery(string.Format("select sum(r.RentMain) from RentMSP r,Service s where r.Period.PeriodId={0} and r.LsClient.ClientId = {1} and r.Service=s and s.Root={2} and r.Code=0 and r.MSP.MSP_id = {3} and r.Person.PersonId = {4}", (object) month.PeriodId, (object) this.Client.ClientId, (object) service.ServiceId, (object) msp.MSP_id, (object) person.PersonId)).List()[0]);
            ITransaction transaction = this.session.BeginTransaction();
            if (this.InsertRecord)
            {
              this.InsertRecord = false;
              foreach (RentMSP rentMsp1 in (IEnumerable<RentMSP>) rentMspList)
              {
                RentMSP rentMsp2 = new RentMSP();
                rentMsp2.Period = Kvartplata.Classes.Options.Period;
                rentMsp2.LsClient = this.Client;
                rentMsp2.Service = rentMsp1.Service;
                rentMsp2.Supplier = rentMsp1.Supplier;
                rentMsp2.Month = month;
                rentMsp2.Code = (short) 4;
                rentMsp2.MSP = rentMsp1.MSP;
                rentMsp2.Person = rentMsp1.Person;
                rentMsp2.Motive = 1;
                rentMsp2.Volume = 0.0;
                rentMsp2.RentMain = rentMsp1.RentMain * num3 / num4;
                try
                {
                  this.session.Save((object) rentMsp2);
                  this.session.Flush();
                }
                catch (Exception ex)
                {
                  Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
                }
              }
            }
            else
            {
              IList list1 = (IList) new ArrayList();
              IList list2 = this.session.CreateQuery(string.Format("select sum(r.RentMain) as rent,r.Month.PeriodName as month,(select ServiceId from Service where ServiceId = s.Root) as serv,r.MSP.MSP_id,r.Person.PersonId from RentMSP r, Service s where r.Period.PeriodId={0} and r.LsClient.ClientId={1} and r.Code=4 and r.Service=s group by s.Root,r.Month.PeriodName,r.MSP.MSP_id,r.Person.PersonId", (object) Kvartplata.Classes.Options.Period.PeriodId, (object) this.Client.ClientId)).List();
              Kvartplata.Classes.Period period = this.session.CreateCriteria(typeof (Kvartplata.Classes.Period)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("PeriodName", ((object[]) list2[this.dgvBalance.CurrentRow.Index])[1])).List<Kvartplata.Classes.Period>()[0];
              this.session.Get<Kvartplata.Classes.Service>(((object[]) list2[this.dgvBalance.CurrentRow.Index])[2]);
              foreach (Rent rent in (IEnumerable<Rent>) rentList)
              {
                try
                {
                  this.session.CreateQuery(string.Format("update RentMSP r set r.RentMain=:rent,r.Month.PeriodId={0} where r.Period.PeriodId={1} and r.LsClient.ClientId={2} and r.Service.ServiceId={3} and r.Supplier.BaseOrgId={4} and r.Code=4 and r.Month.PeriodId={5} and r.MSP.MSP_id={6} and r.Person.PersonId={7}", (object) month.PeriodId, (object) Kvartplata.Classes.Options.Period.PeriodId, (object) this.Client.ClientId, (object) rent.Service.ServiceId, (object) rent.Supplier.SupplierId, (object) period.PeriodId, (object) msp.MSP_id, (object) person.PersonId)).SetParameter<double>("rent", rent.RentMain * num3 / num4).ExecuteUpdate();
                }
                catch (Exception ex)
                {
                  Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
                }
              }
            }
            double num5 = Convert.ToDouble(this.session.CreateQuery(string.Format("select sum(r.RentMain) from RentMSP r,Service s where r.Period.PeriodId={0} and r.LsClient.ClientId = {1} and r.Service=s and s.Root={2} and r.Code=4 and r.MSP.MSP_id={3} and r.Person.PersonId={4}", (object) Kvartplata.Classes.Options.Period.PeriodId, (object) this.Client.ClientId, (object) service.ServiceId, (object) msp.MSP_id, (object) person.PersonId)).List()[0]);
            if (num5 != num3)
            {
              RentMSP rentMsp = rentMspList[0];
              try
              {
                this.session.CreateQuery(string.Format("update RentMSP r set r.RentMain=r.RentMain+:rent where r.Period.PeriodId={0} and r.LsClient.ClientId={1} and r.Service.ServiceId={2} and r.Supplier.SupplierId={3} and r.Code=4 and r.Month.PeriodId={4} and r.MSP.MSP_id={5} and r.Person.PersonId={6}", (object) Kvartplata.Classes.Options.Period.PeriodId, (object) this.Client.ClientId, (object) rentMsp.Service.ServiceId, (object) rentMsp.Supplier.SupplierId, (object) month.PeriodId, (object) msp.MSP_id, (object) person.PersonId)).SetParameter<double>("rent", Math.Abs(num3 - num5)).ExecuteUpdate();
              }
              catch (Exception ex)
              {
                Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
              }
            }
            transaction.Commit();
          }
        }
        else if (MessageBox.Show("Невозможно разбить сумму по начислениям введенного месяца. Хотите ввести разбивку по составляющим вручную?", "Внимание!", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
        {
          FrmHandMadeDetail frmHandMadeDetail = new FrmHandMadeDetail(this.Client, service, month, msp, person, this.handMadeMSP, true, (short) 4, "", (CorrectRent) null, (RentMSP) null, (short) 0, (short) 0, 0.0, 0.0, 0.0);
          int num4 = (int) frmHandMadeDetail.ShowDialog();
          frmHandMadeDetail.Dispose();
          this.InsertRecord = false;
        }
        this.session.Clear();
      }
    }

    private void DelHandMade()
    {
      DateTime? periodName = Kvartplata.Classes.Options.Period.PeriodName;
      DateTime dateTime1 = periodName.Value;
      periodName = this.MonthClosed.PeriodName;
      DateTime dateTime2 = periodName.Value;
      if (dateTime1 <= dateTime2)
      {
        int num1 = (int) MessageBox.Show("Невозможно внести изменения в закрытом месяце", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
      else
      {
        if (this.dgvBalance.Rows.Count <= 0 || this.dgvBalance.CurrentRow == null || MessageBox.Show("Вы действительно хотите удалить запись?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) != DialogResult.OK)
          return;
        this.session = Kvartplata.Domain.CurrentSession;
        Kvartplata.Classes.Service service = this.session.Get<Kvartplata.Classes.Service>(this.dgvBalance.CurrentRow.Cells["Service"].Value);
        if (this.dgvBalance.CurrentRow.Cells["Month"].Value == null)
          this.dgvBalance.CurrentRow.Cells["Month"].Value = (object) Kvartplata.Classes.Options.Period.PeriodName.Value;
        Kvartplata.Classes.Period period = this.session.CreateCriteria(typeof (Kvartplata.Classes.Period)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("PeriodName", this.dgvBalance.CurrentRow.Cells["Month"].Value)).List<Kvartplata.Classes.Period>()[0];
        DcMSP dcMsp = new DcMSP();
        Person person = new Person();
        if (this.handMadeMSP)
        {
          dcMsp = this.session.Get<DcMSP>(this.dgvBalance.CurrentRow.Cells["MSP"].Value);
          person = this.session.Get<Person>(this.dgvBalance.CurrentRow.Cells["FIO"].Value);
        }
        try
        {
          if (!this.handMadeMSP)
            this.session.CreateQuery(string.Format("delete from Rent r where Period.PeriodId={0} and LsClient.ClientId={1} and Code=4 and Month.PeriodId={2} and Service in (select s from Service s where s.Root={3})", (object) Kvartplata.Classes.Options.Period.PeriodId, (object) this.Client.ClientId, (object) period.PeriodId, (object) service.ServiceId)).ExecuteUpdate();
          else
            this.session.CreateQuery(string.Format("delete from RentMSP r where Period.PeriodId={0} and LsClient.ClientId={1} and Code=4 and Month.PeriodId={2} and Service in (select s from Service s where s.Root={3}) and MSP.MSP_id={4} and Person.PersonId={5}", (object) Kvartplata.Classes.Options.Period.PeriodId, (object) this.Client.ClientId, (object) period.PeriodId, (object) service.ServiceId, (object) dcMsp.MSP_id, (object) person.PersonId)).ExecuteUpdate();
        }
        catch (Exception ex)
        {
          int num2 = (int) MessageBox.Show("Невозможно удалить запись", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
        }
        this.session.Clear();
      }
    }

    private void LoadPeni()
    {
      this.btnSave.Enabled = false;
      this.btnDelRecord.Enabled = false;
      this.btnAddRecord.Enabled = false;
      this.pnPeni.Visible = true;
      this.session = Kvartplata.Domain.CurrentSession;
      this.dgvPeni.Columns.Clear();
      this.dgvPeni.DataSource = (object) null;
      IList listPeni = this.GetListPeni(true);
      DataTable dataTable = new DataTable("Peni");
      dataTable.Columns.Add("№", System.Type.GetType("System.Int32"));
      dataTable.Columns.Add("Услуга", System.Type.GetType("System.String"));
      dataTable.Columns.Add("Сортировка", System.Type.GetType("System.Int32"));
      dataTable.Columns.Add("Входящее", System.Type.GetType("System.Double"));
      dataTable.Columns.Add("Начислено", System.Type.GetType("System.Double"));
      dataTable.Columns.Add("Коррект-ки", System.Type.GetType("System.Double"));
      dataTable.Columns.Add("Оплачено", System.Type.GetType("System.Double"));
      dataTable.Columns.Add("Исходящее", System.Type.GetType("System.Double"));
      dataTable.Columns.Add("Полные пени", System.Type.GetType("System.Double"));
      foreach (object[] objArray in (IEnumerable) listPeni)
        dataTable.Rows.Add(objArray);
      this.dgvPeni.DataSource = (object) dataTable;
      this.session.Clear();
      this.SetViewPeni();
      this.dgvPeni.ReadOnly = true;
      this.dgvPeni.Focus();
      this.InsertRecord = false;
      this.session.Clear();
      this.MySettingsPeni.GridName = "Peni";
      this.LoadSettingsPeni();
    }

    private IList GetListPeni(bool type)
    {
      string str1 = !(Kvartplata.Classes.Options.SortService == " s.ServiceId") ? "2" : "1";
      IList list = (IList) new ArrayList();
      string str2 = "";
      if ((uint) this.ReceiptPeni_id > 0U)
        str2 = string.Format("where rec={0}", (object) this.ReceiptPeni_id);
      string str3 = Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(18, this.Client.Company)) != 2 ? "=serv.service_id" : " in (select service_id from DBA.dcservice where root=serv.service_id)";
      string str4;
      string str5;
      if (type)
      {
        str4 = "qwe.service_id, qwe.service_name, qwe.sorter,";
        str5 = "group by qwe.service_id,qwe.service_name, qwe.sorter";
      }
      else
      {
        str4 = "";
        str5 = "";
      }
      return this.session.CreateSQLQuery(string.Format("declare @date date select @date=Period_value from dcPeriod where period_id={0} select " + str4 + " sum(qwe.balance_in) balance_in, sum(qwe.rent) rent, sum(qwe.correct) correct, sum(qwe.payment) payment, sum(qwe.balance_out) balance_out, sum(qwe.rent_full) rent_full  from ( select *, isnull((select receipt_id                       from dba.cmphmReceipt sp, dba.lsClient ls                       where ls.company_id=sp.company_id and ls.idhome=sp.idhome and sp.complex_id=ls.complex_id                       and  @date  between dbeg and dend and ls.client_id=t.client_id                       and (sp.service_id=t.service_id or sp.service_id=(select root from dba.dcService where service_id=t.service_id and root<>0)) and sp.supplier_id=t.supplier_id),           isnull((select receipt_id                        from dba.cmphmReceipt sp, dba.lsClient ls                        where ls.company_id=sp.company_id and ls.idhome=sp.idhome and sp.complex_id=ls.complex_id                        and  @date  between dbeg and dend and ls.client_id=t.client_id and sp.service_id=0 and sp.supplier_id=t.supplier_id),           isnull((select receipt_id                        from dba.cmphmReceipt sp, dba.lsClient ls                        where ls.company_id=sp.company_id and ls.idhome=sp.idhome and sp.complex_id=ls.complex_id                        and  @date  between dbeg and dend and ls.client_id=t.client_id                        and (sp.service_id=t.service_id or sp.service_id=(select root from dba.dcService where service_id=t.service_id and root<>0)) and sp.supplier_id=0),           isnull((select receipt_id                        from dba.cmphmReceipt sp, dba.lsClient ls                        where ls.company_id=sp.company_id and sp.idhome=0 and sp.complex_id=ls.complex_id                        and  @date  between dbeg and dend and ls.client_id=t.client_id                        and (sp.service_id=t.service_id or sp.service_id=(select root from dba.dcService where service_id=t.service_id and root<>0)) and sp.supplier_id=t.supplier_id),           isnull((select receipt_id                        from dba.cmphmReceipt sp, dba.lsClient ls                        where ls.company_id=sp.company_id and sp.idhome=0 and sp.complex_id=ls.complex_id                        and  @date  between dbeg and dend and ls.client_id=t.client_id and sp.service_id=0 and sp.supplier_id=t.supplier_id),           isnull((select receipt_id                        from dba.cmphmReceipt sp, dba.lsClient ls                        where ls.company_id=sp.company_id and sp.idhome=0 and sp.complex_id=ls.complex_id                        and  @date  between dbeg and dend and ls.client_id=t.client_id                        and (sp.service_id=t.service_id or sp.service_id=(select root from dba.dcService where service_id=t.service_id and root<>0)) and sp.supplier_id=0),           isnull((select receipt_id                        from dba.cmpServiceParam sp, dba.lsClient ls                        where ls.company_id=sp.company_id and ls.client_id=t.client_id and sp.complex_id=ls.complex_id                        and (sp.service_id=t.service_id or sp.service_id=(select root from dba.dcService where service_id=t.service_id and root<>0))),           isnull((if t.service_id=0 and (select count(receipt_id) from dba.cmpReceipt sp,dba.lsClient ls where ls.company_id=sp.company_id and ls.client_id=t.client_id)=1 then                        (select receipt_id from dba.cmpReceipt sp,dba.lsClient ls where ls.company_id=sp.company_id and ls.client_id=t.client_id) else 0 endif),           0)))))))) rec from(   select  serv.service_id, serv.service_name, sum(b.balance_in) balance_in, sum(b.rent) rent, sum(b.correct) correct, sum(b.payment) payment,            sum(b.balance_out) balance_out, sum(b.rent_full) rent_full, sp.sorter,{1} client_id, b.supplier_id     from DBA.dcservice serv    left outer join DBA.lsBalancePeni b on b.service_id" + str3 + " and b.period_id={0} and b.client_id={1},   DBA.cmpServiceParam sp    where serv.root=0 and sp.service_id=serv.service_id and sp.company_id={2} and complex_id={3}        and (isnull(b.balance_in,0)<>0 or isnull(b.rent,0)<>0 or isnull(b.correct,0)<>0 or isnull(b.payment,0)<>0 or isnull(b.balance_out,0)<>0 or isnull(b.rent_full,0)<>0)    group by serv.service_id,b.supplier_id, serv.service_name, sp.sorter union all   select serv.service_id, serv.service_name, b.balance_in, b.rent, b.correct, b.payment, b.balance_out, b.rent_full,0 as sorter,{1} client_id, b.supplier_id     from DBA.dcservice serv    left outer join DBA.lsBalancePeni b on b.service_id" + str3 + " and b.period_id={0} and b.client_id={1}    where serv.service_id=0 and (isnull(b.balance_in,0)<>0 or isnull(b.rent,0)<>0 or isnull(b.correct,0)<>0 or isnull(b.payment,0)<>0 or isnull(b.balance_out,0)<>0 or isnull(b.rent_full,0)<>0)  )t " + str2 + ") qwe " + str5 + " order by " + str1, (object) Kvartplata.Classes.Options.Period.PeriodId, (object) this.Client.ClientId, (object) this.Client.Company.CompanyId, (object) this.Client.Complex.IdFk, (object) Kvartplata.Classes.Options.Period)).List();
    }

    private void LoadCBPeniReceiptType()
    {
      IList<Receipt> receiptList1 = (IList<Receipt>) new List<Receipt>();
      IList<Receipt> receiptList2 = this.session.CreateQuery("from Receipt where ReceiptId<>0").List<Receipt>();
      receiptList2.Insert(0, new Receipt()
      {
        ReceiptId = (short) 0,
        ReceiptName = ""
      });
      this.cbPeniReceiptType.DataSource = (object) receiptList2;
      this.cbPeniReceiptType.ValueMember = "ReceiptId";
      this.cbPeniReceiptType.DisplayMember = "ReceiptName";
      this.ReceiptPeni_id = 0;
    }

    private void LoadSettingsPeni()
    {
      this.MySettingsPeni.Load();
      foreach (DataGridViewColumn column in (BaseCollection) this.dgvPeni.Columns)
        this.MySettingsPeni.GetMySettings(column);
    }

    private void dgvPeni_ColumnWidthChanged(object sender, DataGridViewColumnEventArgs e)
    {
      if (this.MySettingsPeni.FindByName(e.Column.Name) < 0)
        return;
      this.MySettingsPeni.Columns[this.MySettingsPeni.FindByName(e.Column.Name)].Width = e.Column.Width;
      this.MySettingsPeni.Save();
    }

    private void SetViewPeni()
    {
      DataGridViewCellStyle gridViewCellStyle = new DataGridViewCellStyle();
      gridViewCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
      foreach (DataGridViewColumn column in (BaseCollection) this.dgvPeni.Columns)
      {
        if (column.Index != 0 && column.Index != 1)
        {
          column.DefaultCellStyle.Alignment = DataGridViewContentAlignment.BottomRight;
          column.HeaderCell.Style = gridViewCellStyle;
          column.SortMode = DataGridViewColumnSortMode.NotSortable;
        }
        else if (column.Index == 0)
        {
          this.dgvPeni.Columns[0].DefaultCellStyle.BackColor = SystemColors.GradientInactiveCaption;
        }
        else
        {
          this.dgvPeni.Columns[1].DefaultCellStyle.BackColor = SystemColors.GradientInactiveCaption;
          this.dgvPeni.Columns[1].DefaultCellStyle.Alignment = DataGridViewContentAlignment.BottomLeft;
        }
      }
      this.dgvPeni.Columns[2].Visible = false;
      this.session = Kvartplata.Domain.CurrentSession;
      IList list1 = (IList) new ArrayList();
      IList listPeni = this.GetListPeni(false);
      this.session.Clear();
      IList list2 = this.session.CreateQuery(string.Format("select sum(o.Pay) from Overpay o where o.Period.PeriodId={0} and o.LsClient.ClientId={1} and o.Code>=10) as overpay", (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.Options.Period.PeriodName.Value), (object) this.Client.ClientId)).List();
      foreach (object[] objArray in (IEnumerable) listPeni)
      {
        this.lblInPeni.Text = this.LblText(objArray, 0);
        this.lblRentPeni.Text = this.LblText(objArray, 1);
        this.lblCorrectPeni.Text = this.LblText(objArray, 2);
        this.lblPayPeni.Text = this.LblText(objArray, 3);
        this.lblOutPeni.Text = this.LblText(objArray, 4);
        this.lblRentFull.Text = this.LblText(objArray, 5);
      }
      if ((uint) list2.Count > 0U)
        this.lblOverPeni.Text = string.Format("{0:C}", list2[0]);
      else
        this.lblOverPeni.Text = string.Format("{0:C}", (object) 0);
    }

    private void dgvPeni_CellMouseDoubleClick(object sender, DataGridViewCellMouseEventArgs e)
    {
      this.session = Kvartplata.Domain.CurrentSession;
      Kvartplata.Classes.Service service = this.session.Get<Kvartplata.Classes.Service>((object) Convert.ToInt16(this.dgvPeni.CurrentRow.Cells[0].Value));
      this.session.Clear();
      FrmBalanceDetail frmBalanceDetail = new FrmBalanceDetail(service, this.Client, false);
      frmBalanceDetail.Text = "Начисления пени по составляющим услуги " + service.ServiceName;
      frmBalanceDetail.Show();
    }

    private void btnCorrect_Click(object sender, EventArgs e)
    {
      FrmCorrectPeni frmCorrectPeni = new FrmCorrectPeni(this.Client, Kvartplata.Classes.Options.Period);
      int num = (int) frmCorrectPeni.ShowDialog();
      frmCorrectPeni.Dispose();
    }

    private void LoadCmbPersonSocSaldo()
    {
      IList<Person> personList1 = (IList<Person>) new List<Person>();
      IList<Person> personList2 = this.session.CreateQuery(string.Format("select distinct l.Person from LsMSPGku l,SocSaldo s where s.Person.PersonId=l.Person.PersonId and l.MSPId.MSP_id=s.MSP.MSP_id and s.Period='{1}' and s.LsClient.ClientId={0} and l.LsClient.ClientId={0}  and l.OnOff=1", (object) this.Client.ClientId, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.Options.Period.PeriodName.Value), (object) Kvartplata.Classes.Options.Period.PeriodId)).List<Person>();
      personList2.Insert(0, new Person()
      {
        PersonId = 0,
        Family = ""
      });
      foreach (Person person in (IEnumerable<Person>) personList2)
        Kvartplata.Classes.KvrplHelper.GetFamily(person, 1, false);
      this.cmbPerson.DataSource = (object) personList2;
      this.cmbPerson.ValueMember = "PersonId";
      this.cmbPerson.DisplayMember = "FIO";
      IList<DcMSP> dcMspList1 = (IList<DcMSP>) new List<DcMSP>();
      IList<DcMSP> dcMspList2 = this.session.CreateQuery(string.Format("select distinct l.MSPId from LsMSPGku l,SocSaldo s where s.Person.PersonId=l.Person.PersonId and l.MSPId.MSP_id=s.MSP.MSP_id and s.Period='{1}' and s.LsClient.ClientId={0} and l.LsClient.ClientId={0} and l.OnOff=1", (object) this.Client.ClientId, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.Options.Period.PeriodName.Value))).List<DcMSP>();
      dcMspList2.Insert(0, new DcMSP()
      {
        MSP_id = 0,
        MSP_name = ""
      });
      this.cmbPersonMSP.DataSource = (object) dcMspList2;
      this.cmbPersonMSP.ValueMember = "MSP_id";
      this.cmbPersonMSP.DisplayMember = "MSP_name";
    }

    private void LoadSocSaldo()
    {
      this.btnSave.Enabled = false;
      this.btnDelRecord.Enabled = false;
      this.btnAddRecord.Enabled = false;
      this.tsbMultiPastTime.Enabled = false;
      this.session = Kvartplata.Domain.CurrentSession;
      this.dgvSocSaldo.Columns.Clear();
      this.dgvSocSaldo.DataSource = (object) null;
      string str1 = "";
      string str2 = " ";
      string queryString;
      if (this.city == 23 || this.city == 24)
      {
        if ((uint) this.ReceiptMSP_id > 0U)
          str2 = " and receipt_id=" + this.ReceiptMSP_id.ToString() + " ";
        string str3 = !(Kvartplata.Classes.Options.SortService == " s.ServiceId") ? "service_name" : "service_id";
        if ((Person) this.cmbPerson.SelectedItem != null && (uint) ((Person) this.cmbPerson.SelectedItem).PersonId > 0U)
          str1 += " and idpers={2}";
        if ((DcMSP) this.cmbPersonMSP.SelectedItem != null && (uint) ((DcMSP) this.cmbPersonMSP.SelectedItem).MSP_id > 0U)
          str1 += " and codehelp={3}";
        queryString = string.Format("select service_id, service_name, sum(incoming) as inc, sum(calc) as calc, sum(past) as past, sum(corr) as corr, sum(pay) as pay, sum(outcoming) as out from DBA.dcService d left outer join DBA.soc_saldo s on d.service_id=s.numserv and period='{0}' and idlic={1}" + str1 + " where root=0 and service_id in (select service_id from DBA.cmpServiceParam where company_id={4} and complex_id={5} " + str2 + ") group by service_id,service_name having isnull(inc,0)<>0 or isnull(calc,0)<>0 or isnull(past,0)<>0 or isnull(corr,0)<>0 or isnull(pay,0)<>0 or isnull(out,0)<>0 order by " + str3, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.Options.Period.PeriodName.Value), (object) this.Client.ClientId, (object) ((Person) this.cmbPerson.SelectedItem).PersonId, (object) ((DcMSP) this.cmbPersonMSP.SelectedItem).MSP_id, (object) this.Client.Company.CompanyId, (object) this.Client.Complex.IdFk);
      }
      else
      {
        string str3 = !(Kvartplata.Classes.Options.SortService == " s.ServiceId") ? "service_name" : "service_id";
        if ((Person) this.cmbPerson.SelectedItem != null && (uint) ((Person) this.cmbPerson.SelectedItem).PersonId > 0U)
          str1 += " and idpers={2}";
        if ((DcMSP) this.cmbPersonMSP.SelectedItem != null && (uint) ((DcMSP) this.cmbPersonMSP.SelectedItem).MSP_id > 0U)
          str1 += " and codehelp={3}";
        queryString = string.Format("select service_id,service_name,sum(incoming) as inc,sum(calc) as calc,sum(past) as past,sum(corr) as corr,sum(pay) as pay,sum(outcoming) as out from DBA.dcService d left outer join DBA.soc_saldo s on d.service_id=s.numserv and period='{0}' and idlic={1}" + str1 + " where root=0 and service_id in (select service_id from DBA.cmpServiceParam where company_id={4} and complex_id={5}) group by service_id,service_name having isnull(inc,0)<>0 or isnull(calc,0)<>0 or isnull(past,0)<>0 or isnull(corr,0)<>0 or isnull(pay,0)<>0 or isnull(out,0)<>0 order by " + str3, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.Options.Period.PeriodName.Value), (object) this.Client.ClientId, (object) ((Person) this.cmbPerson.SelectedItem).PersonId, (object) ((DcMSP) this.cmbPersonMSP.SelectedItem).MSP_id, (object) this.Client.Company.CompanyId, (object) this.Client.Complex.IdFk);
      }
      IList list1 = this.session.CreateSQLQuery(queryString).List();
      DataTable dataTable = new DataTable("SocSaldo");
      dataTable.Columns.Add("№", System.Type.GetType("System.Int32"));
      dataTable.Columns.Add("Услуга", System.Type.GetType("System.String"));
      dataTable.Columns.Add("Входящее", System.Type.GetType("System.Double"));
      dataTable.Columns.Add("Начислено", System.Type.GetType("System.Double"));
      dataTable.Columns.Add("Перерасчет", System.Type.GetType("System.Double"));
      dataTable.Columns.Add("Коррект-ки", System.Type.GetType("System.Double"));
      dataTable.Columns.Add("К выплате", System.Type.GetType("System.Double"));
      dataTable.Columns.Add("Исходящее", System.Type.GetType("System.Double"));
      foreach (object[] objArray in (IEnumerable) list1)
        dataTable.Rows.Add(objArray);
      this.dgvSocSaldo.DataSource = (object) dataTable;
      IList list2 = (IList) new ArrayList();
      IList list3;
      if (this.city == 23 || this.city == 24)
        list3 = this.session.CreateSQLQuery(string.Format("select sum(incoming) as inc, sum(calc) as calc, sum(past) as past, sum(corr) as corr, sum(pay) as pay, sum(outcoming) as out from DBA.dcService d left outer join DBA.soc_saldo s on d.service_id=s.numserv and period='{0}' and idlic={1}" + str1 + " where root=0 and service_id in (select service_id from DBA.cmpServiceParam where company_id={4} and complex_id={5} " + str2 + ") ", (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.Options.Period.PeriodName.Value), (object) this.Client.ClientId, (object) ((Person) this.cmbPerson.SelectedItem).PersonId, (object) ((DcMSP) this.cmbPersonMSP.SelectedItem).MSP_id, (object) this.Client.Company.CompanyId, (object) this.Client.Complex.IdFk)).List();
      else
        list3 = this.session.CreateSQLQuery(string.Format("select sum(incoming) as inc,sum(calc) as calc,sum(past) as past,sum(corr) as corr,sum(pay) as pay,sum(outcoming) as out from DBA.soc_saldo where period='{0}' and idlic={1}" + str1, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.Options.Period.PeriodName.Value), (object) this.Client.ClientId, (object) ((Person) this.cmbPerson.SelectedItem).PersonId, (object) ((DcMSP) this.cmbPersonMSP.SelectedItem).MSP_id)).List();
      foreach (object[] objArray in (IEnumerable) list3)
      {
        this.lblInSoc.Text = this.LblText(objArray, 0);
        this.lblRentSoc.Text = this.LblText(objArray, 1);
        this.lblPastSoc.Text = this.LblText(objArray, 2);
        this.lblCorrSoc.Text = this.LblText(objArray, 3);
        this.lblPaySoc.Text = this.LblText(objArray, 4);
        this.lblOutSoc.Text = this.LblText(objArray, 5);
      }
      this.session.Clear();
      this.SetViewSocSaldo();
      this.dgvSocSaldo.ReadOnly = true;
      this.dgvSocSaldo.Focus();
      this.InsertRecord = false;
      this.MySettingsSocSaldo.GridName = "SocSaldo";
      this.LoadSettingsSocSaldo();
    }

    private void LoadSettingsSocSaldo()
    {
      this.MySettingsSocSaldo.Load();
      foreach (DataGridViewColumn column in (BaseCollection) this.dgvSocSaldo.Columns)
        this.MySettingsSocSaldo.GetMySettings(column);
    }

    private void dgvSocSaldo_ColumnWidthChanged(object sender, DataGridViewColumnEventArgs e)
    {
      if (this.MySettingsSocSaldo.FindByName(e.Column.Name) < 0)
        return;
      this.MySettingsSocSaldo.Columns[this.MySettingsSocSaldo.FindByName(e.Column.Name)].Width = e.Column.Width;
      this.MySettingsSocSaldo.Save();
    }

    private void SetViewSocSaldo()
    {
      DataGridViewCellStyle gridViewCellStyle = new DataGridViewCellStyle();
      gridViewCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
      foreach (DataGridViewColumn column in (BaseCollection) this.dgvSocSaldo.Columns)
      {
        if (column.Index != 0 && column.Index != 1)
        {
          column.DefaultCellStyle.Alignment = DataGridViewContentAlignment.BottomRight;
          column.HeaderCell.Style = gridViewCellStyle;
          column.SortMode = DataGridViewColumnSortMode.NotSortable;
        }
        else if (column.Index == 0)
        {
          this.dgvSocSaldo.Columns[0].DefaultCellStyle.BackColor = Color.PapayaWhip;
        }
        else
        {
          this.dgvSocSaldo.Columns[1].DefaultCellStyle.BackColor = Color.PapayaWhip;
          this.dgvSocSaldo.Columns[1].DefaultCellStyle.Alignment = DataGridViewContentAlignment.BottomLeft;
        }
      }
    }

    private void cmbPerson_SelectionChangeCommitted(object sender, EventArgs e)
    {
      this.LoadSocSaldo();
    }

    private void cmbPersonMSP_SelectionChangeCommitted(object sender, EventArgs e)
    {
      this.LoadSocSaldo();
    }

    private void LoadCbMSPReceiptType()
    {
      IList<Receipt> receiptList1 = (IList<Receipt>) new List<Receipt>();
      IList<Receipt> receiptList2 = this.session.CreateQuery("from Receipt where ReceiptId<>0").List<Receipt>();
      receiptList2.Insert(0, new Receipt()
      {
        ReceiptId = (short) 0,
        ReceiptName = ""
      });
      this.cbMSPReceiptType.DataSource = (object) receiptList2;
      this.cbMSPReceiptType.ValueMember = "ReceiptId";
      this.cbMSPReceiptType.DisplayMember = "ReceiptName";
      this.ReceiptMSP_id = 0;
    }

    private void cbMSPReceiptType_SelectedIndexChanged(object sender, EventArgs e)
    {
      if ((Receipt) this.cbMSPReceiptType.SelectedItem != null && (int) ((Receipt) this.cbMSPReceiptType.SelectedItem).ReceiptId != this.ReceiptMSP_id)
        this.ReceiptMSP_id = (int) ((Receipt) this.cbMSPReceiptType.SelectedItem).ReceiptId;
      this.LoadSocSaldo();
    }

    private void LoadMessage()
    {
      this.btnSave.Enabled = false;
      this.btnAddRecord.Enabled = true;
      this.btnDelRecord.Enabled = true;
      this.tsbMultiPastTime.Enabled = false;
      this.chbArhiv.Visible = true;
      string str1 = "";
      if (!this.chbArhiv.Checked)
        str1 = " and DEnd>='{3}'";
      this.session = Kvartplata.Domain.CurrentSession;
      this.dgvMessage.Columns.Clear();
      this.dgvMessage.DataSource = (object) null;
      IList<HomesPhones> homesPhonesList = (IList<HomesPhones>) new List<HomesPhones>();
      this.dgvMessage.DataSource = (object) this.session.CreateQuery(string.Format("from HomesPhones where Company.CompanyId={0}  and Home.IdHome={1} and ClientId={2}" + str1 + " order by DBeg desc,PhonesServ.Idservice,Receipt.ReceiptId", (object) this.Client.Company.CompanyId, (object) this.Client.Home.IdHome, (object) this.Client.ClientId, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(this.MonthClosed.PeriodName.Value.AddMonths(1)))).List<HomesPhones>();
      this.oldListMessage = (IList<HomesPhones>) new List<HomesPhones>();
      foreach (HomesPhones homesPhones in (List<HomesPhones>) this.dgvMessage.DataSource)
      {
        if ((homesPhones.PhonesServ.Idservice == 8 || homesPhones.PhonesServ.Idservice == 9) && (homesPhones.Phone != null && homesPhones.Phone.Count<char>() > 2))
        {
          string str2 = homesPhones.Phone[0].ToString() + "***" + homesPhones.Phone.Substring(homesPhones.Phone.IndexOf('@'));
          homesPhones.Phone = str2;
        }
        homesPhones.OldHashCode = homesPhones.GetHashCode();
        homesPhones.IsEdit = false;
        this.oldListMessage.Add(new HomesPhones()
        {
          PhonesServ = homesPhones.PhonesServ,
          DBeg = homesPhones.DBeg,
          OldHashCode = homesPhones.OldHashCode,
          Receipt = homesPhones.Receipt
        });
      }
      this.SetViewMessage();
      this.dgvMessage.Focus();
      this.InsertRecord = false;
      this.session.Clear();
      this.MySettingsMessage.GridName = "Message";
      this.LoadSettingsMessage();
    }

    private void LoadSettingsMessage()
    {
      this.MySettingsMessage.Load();
      foreach (DataGridViewColumn column in (BaseCollection) this.dgvMessage.Columns)
        this.MySettingsMessage.GetMySettings(column);
    }

    private void dgvMessage_ColumnWidthChanged(object sender, DataGridViewColumnEventArgs e)
    {
      if (this.MySettingsMessage.FindByName(e.Column.Name) < 0)
        return;
      this.MySettingsMessage.Columns[this.MySettingsMessage.FindByName(e.Column.Name)].Width = e.Column.Width;
      this.MySettingsMessage.Save();
    }

    private void SetViewMessage()
    {
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvMessage, 0, "Дата начала", "DBeg");
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvMessage, 1, "Дата окончания", "DEnd");
      IList<Di_PhonesServ> diPhonesServList1 = (IList<Di_PhonesServ>) new List<Di_PhonesServ>();
      IList<Di_PhonesServ> diPhonesServList2;
      try
      {
        diPhonesServList2 = this.session.CreateCriteria(typeof (Di_PhonesServ)).Add((ICriterion) NHibernate.Criterion.Restrictions.Or((ICriterion) NHibernate.Criterion.Restrictions.Eq("ViewService", (object) Convert.ToInt16(1)), (ICriterion) NHibernate.Criterion.Restrictions.Eq("ViewService", (object) Convert.ToInt16(0)))).AddOrder(Order.Asc("Nameservice")).List<Di_PhonesServ>();
      }
      catch (Exception ex)
      {
        diPhonesServList2 = this.session.CreateCriteria(typeof (Di_PhonesServ)).AddOrder(Order.Asc("Nameservice")).List<Di_PhonesServ>();
      }
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvMessage, 2, (IList) diPhonesServList2, "Idservice", "NameService", "Служба", "Service", 320, 220);
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvMessage, 3, (IList) this.session.CreateCriteria(typeof (Receipt)).AddOrder(Order.Asc("ReceiptId")).List<Receipt>(), "ReceiptId", "ReceiptName", "Квитанция", "Receipt", 10, 100);
      this.dgvMessage.Columns["Phone"].HeaderText = "Телефон(Email)";
      this.dgvMessage.Columns["Note"].HeaderText = "Сообщение";
      this.dgvMessage.Columns["Note"].Width = 400;
      Kvartplata.Classes.KvrplHelper.ViewEdit(this.dgvMessage);
      foreach (DataGridViewRow row in (IEnumerable) this.dgvMessage.Rows)
      {
        row.Cells["DBeg"].Value = (object) ((HomesPhones) row.DataBoundItem).DBeg;
        row.Cells["DEnd"].Value = (object) ((HomesPhones) row.DataBoundItem).DEnd;
        if (((HomesPhones) row.DataBoundItem).Receipt != null)
          row.Cells["Receipt"].Value = (object) ((HomesPhones) row.DataBoundItem).Receipt.ReceiptId;
        if (((HomesPhones) row.DataBoundItem).PhonesServ != null)
        {
          row.Cells["Service"].Value = (object) ((HomesPhones) row.DataBoundItem).PhonesServ.Idservice;
          if (((HomesPhones) row.DataBoundItem).PhonesServ.Idservice == 8 || ((HomesPhones) row.DataBoundItem).PhonesServ.Idservice == 9)
            row.ReadOnly = true;
        }
      }
    }

    private void InsertMessage()
    {
      this.InsertRecord = true;
      HomesPhones homesPhones = new HomesPhones();
      homesPhones.Company = this.Client.Company;
      homesPhones.Home = this.Client.Home;
      homesPhones.ClientId = this.Client.ClientId;
      homesPhones.DBeg = !(this.MonthClosed.PeriodName.Value.AddMonths(1) <= Kvartplata.Classes.Options.Period.PeriodName.Value) ? this.MonthClosed.PeriodName.Value.AddMonths(1) : Kvartplata.Classes.Options.Period.PeriodName.Value;
      homesPhones.DEnd = Convert.ToDateTime("31.12.2999");
      homesPhones.Receipt = this.session.Get<Receipt>((object) Convert.ToInt16(1));
      IList<HomesPhones> homesPhonesList = (IList<HomesPhones>) new List<HomesPhones>();
      if ((uint) this.dgvMessage.Rows.Count > 0U)
        homesPhonesList = (IList<HomesPhones>) (this.dgvMessage.DataSource as List<HomesPhones>);
      homesPhonesList.Add(homesPhones);
      this.dgvMessage.Columns.Clear();
      this.dgvMessage.DataSource = (object) null;
      this.dgvMessage.DataSource = (object) homesPhonesList;
      this.SetViewMessage();
      this.dgvMessage.CurrentCell = this.dgvMessage.Rows[this.dgvMessage.Rows.Count - 1].Cells[0];
    }

    private void SaveAllMessage()
    {
      bool flag = false;
      foreach (DataGridViewRow row in (IEnumerable) this.dgvMessage.Rows)
      {
        if (((HomesPhones) row.DataBoundItem).IsEdit)
        {
          this.oldMessage = new HomesPhones();
          foreach (HomesPhones homesPhones in (IEnumerable<HomesPhones>) this.oldListMessage)
          {
            if (homesPhones.OldHashCode == ((HomesPhones) row.DataBoundItem).OldHashCode)
            {
              this.oldMessage = homesPhones;
              break;
            }
          }
          this.dgvMessage.Rows[row.Index].Selected = true;
          this.dgvMessage.CurrentCell = row.Cells[0];
          if (!this.SaveMessage())
            flag = true;
          else
            ((HomesPhones) row.DataBoundItem).IsEdit = false;
        }
      }
      if (flag)
        return;
      this.LoadMessage();
    }

    private bool SaveMessage()
    {
      HomesPhones dataBoundItem = (HomesPhones) this.dgvMessage.CurrentRow.DataBoundItem;
      if (dataBoundItem.PhonesServ.Idservice == 8 || dataBoundItem.PhonesServ.Idservice == 9)
      {
        int num = (int) MessageBox.Show("Выберите другой параметр, 8 и 9 параметр предназначен только для сайта", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      this.InsertRecord = dataBoundItem.UName == null;
      if (this.dgvMessage.CurrentRow.Cells["DBeg"].Value == null || this.dgvMessage.CurrentRow.Cells["DEnd"].Value == null)
      {
        int num = (int) MessageBox.Show("Введите дату начала и окончания", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      try
      {
        dataBoundItem.DBeg = Convert.ToDateTime(this.dgvMessage.CurrentRow.Cells["DBeg"].Value);
        dataBoundItem.DEnd = Convert.ToDateTime(this.dgvMessage.CurrentRow.Cells["DEnd"].Value);
      }
      catch
      {
        int num = (int) MessageBox.Show("Некорректная дата начала или дата окончания!", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      if (this.dgvMessage.CurrentRow.Cells["Service"].Value == null)
      {
        int num = (int) MessageBox.Show("Выберите службу списка", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      if (this.dgvMessage.CurrentRow.Cells["Receipt"].Value != null)
        dataBoundItem.Receipt = this.session.Get<Receipt>((object) Convert.ToInt16(this.dgvMessage.CurrentRow.Cells["Receipt"].Value));
      dataBoundItem.DBeg = Kvartplata.Classes.KvrplHelper.FirstDay(dataBoundItem.DBeg);
      dataBoundItem.DEnd = Kvartplata.Classes.KvrplHelper.LastDay(dataBoundItem.DEnd);
      if (dataBoundItem.DBeg > dataBoundItem.DEnd)
      {
        int num = (int) MessageBox.Show("Дата начала больше даты окончания", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      DateTime dbeg1 = dataBoundItem.DBeg;
      DateTime? periodName = this.MonthClosed.PeriodName;
      DateTime dateTime1 = periodName.Value;
      DateTime dateTime2;
      int num1;
      if (dbeg1 <= dateTime1)
      {
        DateTime dend = dataBoundItem.DEnd;
        periodName = this.MonthClosed.PeriodName;
        dateTime2 = periodName.Value.AddMonths(1);
        DateTime dateTime3 = dateTime2.AddDays(-1.0);
        num1 = dend < dateTime3 ? 1 : 0;
      }
      else
        num1 = 0;
      if (num1 != 0)
      {
        int num2 = (int) MessageBox.Show("Невозможно внести изменения в закрытом месяце", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      DateTime dbeg2 = dataBoundItem.DBeg;
      dateTime2 = DateTime.Now;
      DateTime dateTime4 = dateTime2.AddYears(-3);
      int num3;
      if (!(dbeg2 <= dateTime4))
      {
        DateTime dbeg3 = dataBoundItem.DBeg;
        dateTime2 = DateTime.Now;
        DateTime dateTime3 = dateTime2.AddYears(3);
        num3 = dbeg3 >= dateTime3 ? 1 : 0;
      }
      else
        num3 = 1;
      if (num3 != 0 && MessageBox.Show("Дата начала отличается от текущей более, чем на 3 года. Продолжить", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.Cancel)
        return false;
      if (this.dgvMessage.CurrentRow.Cells["Phone"].Value == null)
        dataBoundItem.Phone = "";
      if (this.dgvMessage.CurrentRow.Cells["Note"].Value == null)
        dataBoundItem.Note = "";
      int num4;
      if (dataBoundItem.PhonesServ.Idservice == 7)
      {
        dateTime2 = dataBoundItem.DBeg;
        int month = dateTime2.Month;
        dateTime2 = DateTime.Now;
        int num2 = dateTime2.Month + 1;
        num4 = month < num2 ? 1 : 0;
      }
      else
        num4 = 0;
      if (num4 != 0)
      {
        int num2 = (int) MessageBox.Show("Услуга начнет действовать со следующего месяца( месяц +1 )", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        dateTime2 = DateTime.Now;
        int num5 = dateTime2.Month + 1;
        dateTime2 = dataBoundItem.DBeg;
        int month = dateTime2.Month;
        int months = num5 - month;
        HomesPhones homesPhones = dataBoundItem;
        dateTime2 = dataBoundItem.DBeg;
        DateTime dateTime3 = dateTime2.AddMonths(months);
        homesPhones.DBeg = dateTime3;
      }
      this.session = Kvartplata.Domain.CurrentSession;
      Di_PhonesServ diPhonesServ = this.session.Get<Di_PhonesServ>(this.dgvMessage.CurrentRow.Cells["Service"].Value);
      dataBoundItem.PhonesServ = diPhonesServ;
      this.session.Clear();
      dataBoundItem.UName = Kvartplata.Classes.Options.Login;
      dataBoundItem.DEdit = DateTime.Now;
      try
      {
        if (this.InsertRecord)
        {
          this.InsertRecord = false;
          this.session.Save((object) dataBoundItem);
          this.session.Flush();
        }
        else
          this.session.CreateQuery("update HomesPhones set DBeg=:dbeg,DEnd=:dend,PhonesServ=:serv,Phone=:phone,Note=:note, Receipt=:rec where Company.CompanyId=:company and Home.IdHome=:home and ClientId=:client and DBeg=:olddbeg and PhonesServ.Idservice=:oldserv and Receipt.ReceiptId=:recId ").SetParameter<DateTime>("dbeg", dataBoundItem.DBeg).SetParameter<DateTime>("dend", dataBoundItem.DEnd).SetParameter<Di_PhonesServ>("serv", dataBoundItem.PhonesServ).SetParameter<string>("phone", dataBoundItem.Phone).SetParameter<string>("note", dataBoundItem.Note).SetParameter<short>("company", dataBoundItem.Company.CompanyId).SetParameter<int>("home", dataBoundItem.Home.IdHome).SetParameter<int>("client", dataBoundItem.ClientId).SetParameter<DateTime>("olddbeg", this.oldMessage.DBeg).SetParameter<int>("oldserv", this.oldMessage.PhonesServ.Idservice).SetParameter<short>("recId", this.oldMessage.Receipt.ReceiptId).SetParameter<Receipt>("rec", dataBoundItem.Receipt).ExecuteUpdate();
      }
      catch (Exception ex)
      {
        int num2 = (int) MessageBox.Show("Невозможно сохранить изменения", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
      }
      this.session.Clear();
      return true;
    }

    private void DelMessage()
    {
      if (this.dgvMessage.Rows.Count <= 0 || this.dgvMessage.CurrentRow == null)
        return;
      HomesPhones dataBoundItem = (HomesPhones) this.dgvMessage.CurrentRow.DataBoundItem;
      if (dataBoundItem.PhonesServ.Idservice == 8 || dataBoundItem.PhonesServ.Idservice == 9)
      {
        int num1 = (int) MessageBox.Show("Выберите другой параметр, 8 и 9 параметр предназначен только для сайта", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
      else if (MessageBox.Show("Вы уверены, что хотите удалить запись?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
      {
        this.session = Kvartplata.Domain.CurrentSession;
        try
        {
          this.session.Delete((object) dataBoundItem);
          this.session.Flush();
        }
        catch (Exception ex)
        {
          int num2 = (int) MessageBox.Show("Невозможно удалить запись", "Ошибка", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
        }
        this.session.Clear();
      }
    }

    private void dgvMessage_CellMouseDown(object sender, DataGridViewCellMouseEventArgs e)
    {
      if (e == null || e.RowIndex == -1 || e.ColumnIndex == -1)
        return;
      this.dgvMessage.Rows[e.RowIndex].Selected = true;
      this.dgvMessage.CurrentCell = this.dgvMessage.Rows[e.RowIndex].Cells[e.ColumnIndex];
    }

    private void dgvMessage_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
    {
      if (this.dgvMessage.DataSource == null)
        return;
      DataGridViewRow row = (sender as DataGridView).Rows[e.RowIndex];
      DateTime dbeg = ((HomesPhones) row.DataBoundItem).DBeg;
      DateTime? periodName = this.NextMonthClosed.PeriodName;
      DateTime dateTime1 = Kvartplata.Classes.KvrplHelper.LastDay(periodName.Value);
      int num;
      if (dbeg <= dateTime1)
      {
        DateTime dend = ((HomesPhones) row.DataBoundItem).DEnd;
        periodName = this.NextMonthClosed.PeriodName;
        DateTime dateTime2 = periodName.Value;
        num = dend >= dateTime2 ? 1 : 0;
      }
      else
        num = 0;
      if (num != 0)
      {
        row.DefaultCellStyle.BackColor = Color.PapayaWhip;
        row.DefaultCellStyle.ForeColor = Color.Black;
      }
      else
      {
        row.DefaultCellStyle.BackColor = Color.FromArgb((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
        row.DefaultCellStyle.ForeColor = Color.Gray;
      }
    }

    private void dgvMessage_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
    {
      this.btnDelRecord.Enabled = false;
      this.btnSave.Enabled = true;
      ((HomesPhones) this.dgvMessage.CurrentRow.DataBoundItem).IsEdit = true;
    }

    private void dgvMessage_CellEndEdit(object sender, DataGridViewCellEventArgs e)
    {
      if (this.dgvMessage.CurrentCell == null || this.dgvMessage.CurrentCell.Value == null)
        return;
      HomesPhones dataBoundItem = (HomesPhones) this.dgvMessage.CurrentRow.DataBoundItem;
      dataBoundItem.IsEdit = true;
      try
      {
        string name = this.dgvMessage.Columns[e.ColumnIndex].Name;
        if (!(name == "DBeg"))
        {
          if (!(name == "DEnd"))
          {
            if (name == "Service")
            {
              try
              {
                dataBoundItem.PhonesServ = this.session.Get<Di_PhonesServ>(this.dgvMessage.CurrentRow.Cells["Service"].Value);
              }
              catch
              {
              }
            }
          }
          else
          {
            try
            {
              dataBoundItem.DEnd = Convert.ToDateTime(this.dgvMessage.CurrentRow.Cells["DEnd"].Value);
            }
            catch
            {
            }
          }
        }
        else
        {
          try
          {
            dataBoundItem.DBeg = Convert.ToDateTime(this.dgvMessage.CurrentRow.Cells["DBeg"].Value);
          }
          catch
          {
          }
        }
      }
      catch (Exception ex)
      {
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
      }
    }

    private void LoadUZP()
    {
      this.LoadPersonsWork();
      this.LoadBond();
    }

    private void LoadPersonsWork()
    {
      this.session.Clear();
      this.session = Kvartplata.Domain.CurrentSession;
      this.dgvPersonsWork.Columns.Clear();
      this.dgvPersonsWork.DataSource = (object) null;
      this.lodgers = this.session.CreateCriteria(typeof (Person)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).Add((ICriterion) NHibernate.Criterion.Restrictions.In("Reg.RegId", (ICollection) new int[3]{ 1, 2, 4 })).Add((ICriterion) NHibernate.Criterion.Restrictions.Or((ICriterion) NHibernate.Criterion.Restrictions.Lt("Archive", (object) 3), (ICriterion) NHibernate.Criterion.Restrictions.Eq("Archive", (object) 5))).AddOrder(Order.Asc("Archive")).AddOrder(Order.Asc("Relation.RelationId")).List<Person>();
      foreach (Person lodger in (IEnumerable<Person>) this.lodgers)
        Kvartplata.Classes.KvrplHelper.GetFamily(lodger, 1, false);
      this.dgvPersonsWork.DataSource = (object) this.lodgers;
      this.btnAddPerson.Enabled = true;
      this.btnDelPerson.Enabled = true;
      this.btnSavePerson.Enabled = false;
      this.tsbMultiPastTime.Enabled = false;
      this.MySettingsPersonsWork.GridName = "PersonsWork";
      this.SetViewPersonsWork();
      this.dgvPersonsWork.Focus();
      this.InsertRecord = false;
      this.session.Clear();
    }

    private void LoadSettingsPersonsWork()
    {
      this.MySettingsPersonsWork.Load();
      foreach (DataGridViewColumn column in (BaseCollection) this.dgvPersonsWork.Columns)
        this.MySettingsPersonsWork.GetMySettings(column);
    }

    private void SetViewPersonsWork()
    {
      IList<Guild> guildList1 = (IList<Guild>) new List<Guild>();
      this.dgvPersonsWork.Columns["PersonId"].Visible = false;
      this.dgvPersonsWork.Columns["Fio"].Visible = false;
      this.dgvPersonsWork.Columns["FirstPropDate"].Visible = false;
      this.dgvPersonsWork.Columns["Family"].HeaderText = "Фамилия";
      this.dgvPersonsWork.Columns["Name"].HeaderText = "Имя";
      this.dgvPersonsWork.Columns["LastName"].HeaderText = "Отчество";
      this.dgvPersonsWork.Columns["Number"].HeaderText = "Табельный номер";
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvPersonsWork, 4, (IList) this.session.CreateQuery("select new BaseOrg(b.BaseOrgId,b.NameOrgMin) from BaseOrg b order by b.NameOrgMin").List<BaseOrg>(), "BaseOrgId", "NameOrgMin", "Организация", "Org", 7, 400);
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvPersonsWork, 5, (IList) null, (string) null, (string) null, "Цех", "Guild", 7, 200);
      foreach (DataGridViewRow row in (IEnumerable) this.dgvPersonsWork.Rows)
      {
        if (((Person) row.DataBoundItem).BaseOrg != null)
        {
          row.Cells["Org"].Value = (object) ((Person) row.DataBoundItem).BaseOrg.BaseOrgId;
          guildList1 = (IList<Guild>) new List<Guild>();
          IList<Guild> guildList2 = this.session.CreateQuery(string.Format("from Guild where BaseOrg.BaseOrgId={0} order by regulatefld(GuildName)", (object) ((Person) row.DataBoundItem).BaseOrg.BaseOrgId)).List<Guild>();
          row.Cells["Guild"] = (DataGridViewCell) new DataGridViewComboBoxCell()
          {
            DisplayStyleForCurrentCellOnly = true,
            ValueMember = "GuildId",
            DisplayMember = "GuildName",
            DataSource = (object) guildList2
          };
          if (((Person) row.DataBoundItem).Guild != null)
          {
            try
            {
              row.Cells["Guild"].Value = (object) ((Person) row.DataBoundItem).Guild.GuildId;
            }
            catch
            {
            }
          }
        }
      }
      this.LoadSettingsPersonsWork();
    }

    private void dgvPersonsWork_CurrentCellDirtyStateChanged(object sender, EventArgs e)
    {
      if (!this.dgvPersonsWork.IsCurrentCellDirty)
        return;
      this.dgvPersonsWork.CommitEdit(DataGridViewDataErrorContexts.Commit);
      if (this.dgvPersonsWork.CurrentCell.ColumnIndex == this.dgvPersonsWork.Rows[this.dgvPersonsWork.CurrentRow.Index].Cells["Org"].ColumnIndex)
      {
        this.session.Clear();
        IList<Guild> guildList1 = (IList<Guild>) new List<Guild>();
        IList<Guild> guildList2 = this.session.CreateQuery(string.Format("from Guild where BaseOrg.BaseOrgId={0} order by regulatefld(GuildName)", (object) Convert.ToInt32(this.dgvPersonsWork.CurrentRow.Cells["Org"].Value))).List<Guild>();
        this.dgvPersonsWork.CurrentRow.Cells["Guild"] = (DataGridViewCell) new DataGridViewComboBoxCell()
        {
          DisplayStyleForCurrentCellOnly = true,
          ValueMember = "GuildId",
          DisplayMember = "GuildName",
          DataSource = (object) guildList2
        };
      }
    }

    private void btnAddPerson_Click(object sender, EventArgs e)
    {
      this.session.Clear();
      this.btnDelPerson.Enabled = false;
      this.btnSavePerson.Enabled = true;
      Person person = new Person();
      person.Reg = this.session.Get<Registration>((object) 4);
      person.Relation = this.session.Get<Relation>((object) 42);
      person.FirstPropDate = new DateTime?(Convert.ToDateTime("2009-07-01"));
      person.Archive = 0;
      person.Consent = new int?();
      IList<Person> personList = (IList<Person>) new List<Person>();
      if ((uint) this.dgvPersonsWork.Rows.Count > 0U)
        personList = (IList<Person>) (this.dgvPersonsWork.DataSource as List<Person>);
      personList.Add(person);
      this.dgvPersonsWork.Columns.Clear();
      this.dgvPersonsWork.DataSource = (object) null;
      this.dgvPersonsWork.DataSource = (object) personList;
      this.SetViewPersonsWork();
      this.dgvPersonsWork.CurrentCell = this.dgvPersonsWork.Rows[this.dgvPersonsWork.Rows.Count - 1].Cells["Family"];
    }

    private void btnSavePerson_Click(object sender, EventArgs e)
    {
      this.session.Clear();
      foreach (DataGridViewRow row in (IEnumerable) this.dgvPersonsWork.Rows)
      {
        this.dgvPersonsWork.CurrentCell = row.Cells["Family"];
        row.Selected = true;
        if (((Person) row.DataBoundItem).IsEdit)
          this.SavePersonWork();
        ((Person) row.DataBoundItem).IsEdit = false;
      }
      this.btnAddPerson.Enabled = true;
      this.btnDelPerson.Enabled = true;
      this.LoadPersonsWork();
    }

    private void SavePersonWork()
    {
      if (this.dgvPersonsWork.Rows.Count <= 0 || this.dgvPersonsWork.CurrentRow.Index < 0)
        return;
      this.session = Kvartplata.Domain.CurrentSession;
      Person dataBoundItem = (Person) this.dgvPersonsWork.CurrentRow.DataBoundItem;
      int personId = dataBoundItem.PersonId;
      if ((uint) dataBoundItem.PersonId > 0U)
      {
        this.InsertRecord = false;
      }
      else
      {
        IList<int> intList = this.session.CreateSQLQuery("select DBA.gen_id('Form_a',1)").List<int>();
        dataBoundItem.PersonId = intList[0];
        this.InsertRecord = true;
      }
      if (dataBoundItem.Family == null || dataBoundItem.Name == null || dataBoundItem.LastName == null)
      {
        int num1 = (int) MessageBox.Show("Введите ФИО", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
      }
      else
      {
        if (this.dgvPersonsWork.Rows[this.dgvPersonsWork.CurrentRow.Index].Cells["Org"].Value != null)
          dataBoundItem.BaseOrg = this.session.Get<BaseOrg>(this.dgvPersonsWork.Rows[this.dgvPersonsWork.CurrentRow.Index].Cells["Org"].Value);
        dataBoundItem.Guild = this.dgvPersonsWork.Rows[this.dgvPersonsWork.CurrentRow.Index].Cells["Guild"].Value == null ? (Guild) null : this.session.Get<Guild>(this.dgvPersonsWork.Rows[this.dgvPersonsWork.CurrentRow.Index].Cells["Guild"].Value);
        dataBoundItem.LsClient = this.Client;
        DateTime? nullable = dataBoundItem.RegDate;
        if (!nullable.HasValue)
        {
          ISession session = this.session;
          string format = "select DBA.form_reg({0},'{1}')";
          // ISSUE: variable of a boxed type
          int clientId = dataBoundItem.LsClient.ClientId;
          nullable = dataBoundItem.FirstPropDate;
          string baseFormat = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(nullable.Value);
          string queryString = string.Format(format, (object) clientId, (object) baseFormat);
          IList<DateTime> dateTimeList = session.CreateSQLQuery(queryString).List<DateTime>();
          dataBoundItem.RegDate = new DateTime?(dateTimeList[0]);
          dataBoundItem.RegDEdit = new DateTime?(DateTime.Now);
          dataBoundItem.UNameReg = Kvartplata.Classes.Options.Login;
        }
        nullable = dataBoundItem.RegOutDate;
        int num2 = !nullable.HasValue ? 1 : 0;
        nullable = dataBoundItem.OutToDate;
        int num3 = nullable.HasValue ? 1 : 0;
        if ((num2 & num3) != 0)
        {
          ISession session = this.session;
          string format = "select DBA.form_reg({0},'{1}')";
          // ISSUE: variable of a boxed type
          int clientId = dataBoundItem.LsClient.ClientId;
          nullable = dataBoundItem.OutToDate;
          string baseFormat = Kvartplata.Classes.KvrplHelper.DateToBaseFormat(nullable.Value);
          string queryString = string.Format(format, (object) clientId, (object) baseFormat);
          IList<DateTime> dateTimeList = session.CreateSQLQuery(queryString).List<DateTime>();
          dataBoundItem.RegOutDate = new DateTime?(dateTimeList[0]);
          dataBoundItem.OutDEdit = new DateTime?(DateTime.Now);
          dataBoundItem.UNameUnReg = Kvartplata.Classes.Options.Login;
        }
        dataBoundItem.FamilyNum = 1;
        if (dataBoundItem.UNameReg == null)
          dataBoundItem.UNameReg = "";
        if (dataBoundItem.UNameUnReg == null)
          dataBoundItem.UNameUnReg = "";
        if (dataBoundItem.Snils == null)
          dataBoundItem.Snils = "";
        try
        {
          if (this.InsertRecord)
          {
            this.InsertRecord = false;
            this.session.Save((object) dataBoundItem);
          }
          else
            this.session.Update((object) dataBoundItem);
          this.session.Flush();
        }
        catch (Exception ex)
        {
          int num4 = (int) MessageBox.Show("Невозможно сохранить изменения", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
        }
        this.session.Clear();
      }
    }

    private void btnDelPerson_Click(object sender, EventArgs e)
    {
      this.session = Kvartplata.Domain.CurrentSession;
      if (this.dgvPersonsWork.Rows.Count > 0 && this.dgvPersonsWork.CurrentRow.Index >= 0)
      {
        Person dataBoundItem = (Person) this.dgvPersonsWork.CurrentRow.DataBoundItem;
        if (dataBoundItem.Reg.RegId != 4)
        {
          int num = (int) MessageBox.Show("Невозможно удалить прописанного человека ", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
          return;
        }
        if (MessageBox.Show("Вы уверены, что хотите удалить запись", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
        {
          try
          {
            this.session.Delete((object) dataBoundItem);
            this.session.Flush();
          }
          catch (Exception ex)
          {
            int num = (int) MessageBox.Show("Невозможно удалить запись", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
          }
          this.LoadPersonsWork();
        }
      }
      this.session.Clear();
    }

    private void dgvPersonsWork_ColumnWidthChanged(object sender, DataGridViewColumnEventArgs e)
    {
      if (this.MySettingsPersonsWork.FindByName(e.Column.Name) < 0)
        return;
      this.MySettingsPersonsWork.Columns[this.MySettingsPersonsWork.FindByName(e.Column.Name)].Width = e.Column.Width;
      this.MySettingsPersonsWork.Save();
    }

    private void dgvPersonsWork_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
    {
      this.btnDelPerson.Enabled = false;
      this.btnSavePerson.Enabled = true;
      ((Person) this.dgvPersonsWork.CurrentRow.DataBoundItem).IsEdit = true;
    }

    private void dgvPersonsWork_CellEndEdit(object sender, DataGridViewCellEventArgs e)
    {
      if (this.dgvPersonsWork.CurrentCell.Value == null)
        return;
      Person dataBoundItem = (Person) this.dgvPersonsWork.CurrentRow.DataBoundItem;
      try
      {
        string name = this.dgvPersonsWork.Columns[e.ColumnIndex].Name;
        if (!(name == "Org"))
        {
          if (name == "Guild")
            dataBoundItem.Guild = this.session.Get<Guild>(this.dgvPersonsWork.CurrentRow.Cells["Guild"].Value);
        }
        else
          dataBoundItem.BaseOrg = this.session.Get<BaseOrg>(this.dgvPersonsWork.CurrentRow.Cells["Org"].Value);
      }
      catch (Exception ex)
      {
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, (Kvartplata.Classes.LsClient) null);
      }
    }

    private void LoadBond()
    {
      this.session.Clear();
      this.btnAddRecord.Enabled = true;
      this.btnDelRecord.Enabled = true;
      this.btnSave.Enabled = false;
      this.dgvBond.DataSource = (object) null;
      this.dgvBond.Columns.Clear();
      IList<Bond> bondList = (IList<Bond>) new List<Bond>();
      this.dgvBond.DataSource = (object) this.session.CreateQuery(string.Format("select b from Bond b left join fetch b.Contract where b.LsClient.ClientId={0} order by b.DBeg desc", (object) this.Client.ClientId)).List<Bond>();
      this.session.Clear();
      this.oldBonds = (IList<Bond>) new List<Bond>();
      this.oldBonds = this.session.CreateQuery(string.Format("select b from Bond b left join fetch b.Contract where b.LsClient.ClientId={0} order by b.DBeg desc", (object) this.Client.ClientId)).List<Bond>();
      int index = 0;
      foreach (Bond bond in (List<Bond>) this.dgvBond.DataSource)
      {
        bond.OldHashCode = bond.GetHashCode();
        bond.IsEdit = false;
        this.oldBonds[index].OldHashCode = bond.OldHashCode;
        ++index;
      }
      this.MySettingsBond.GridName = "Bond";
      this.SetViewBond();
    }

    private void SetViewBond()
    {
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvBond, 0, (IList) this.session.CreateQuery("select new BaseOrg(b.BaseOrgId,b.NameOrgMin) from BaseOrg b where b.BaseOrgId in (select BaseOrg.BaseOrgId from Contract) order by b.NameOrgMin").List<BaseOrg>(), "BaseOrgId", "NameOrgMin", "Организация", "Org", 20, 250);
      Kvartplata.Classes.KvrplHelper.AddTextBoxColumn(this.dgvBond, 1, "Договор", "Contract", 100, false);
      IList<Person> personList = this.session.CreateCriteria(typeof (Person)).Add((ICriterion) NHibernate.Criterion.Restrictions.Eq("LsClient", (object) this.Client)).Add((ICriterion) NHibernate.Criterion.Restrictions.In("Reg.RegId", (ICollection) new int[3]{ 1, 2, 4 })).Add((ICriterion) NHibernate.Criterion.Restrictions.Or((ICriterion) NHibernate.Criterion.Restrictions.Lt("Archive", (object) 3), (ICriterion) NHibernate.Criterion.Restrictions.Eq("Archive", (object) 5))).AddOrder(Order.Asc("Archive")).AddOrder(Order.Asc("Relation.RelationId")).List<Person>();
      foreach (Person person in (IEnumerable<Person>) personList)
        Kvartplata.Classes.KvrplHelper.GetFamily(person, 1, false);
      Kvartplata.Classes.KvrplHelper.AddComboBoxColumn(this.dgvBond, 2, (IList) personList, "PersonId", "FIO", "ФИО плательщика", "FIO", 7, 200);
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvBond, 3, "Дата начала", "DBeg");
      Kvartplata.Classes.KvrplHelper.AddMaskDateColumn(this.dgvBond, 4, "Дата окончания", "DEnd");
      foreach (DataGridViewRow row in (IEnumerable) this.dgvBond.Rows)
      {
        row.Cells["DBeg"].Value = (object) ((Bond) row.DataBoundItem).DBeg;
        row.Cells["DEnd"].Value = (object) ((Bond) row.DataBoundItem).DEnd;
        if (((Bond) row.DataBoundItem).Person != null)
          row.Cells["FIO"].Value = (object) ((Bond) row.DataBoundItem).Person.PersonId;
        if (((Bond) row.DataBoundItem).Contract != null && ((Bond) row.DataBoundItem).Contract.BaseOrg != null)
        {
          row.Cells["Org"].Value = (object) ((Bond) row.DataBoundItem).Contract.BaseOrg.BaseOrgId;
          IList<Contract> contractList1 = (IList<Contract>) new List<Contract>();
          IList<Contract> contractList2 = this.session.CreateQuery(string.Format(" from Contract where BaseOrg.BaseOrgId={0} ", (object) ((Bond) row.DataBoundItem).Contract.BaseOrg.BaseOrgId, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.Options.Period.PeriodName.Value))).List<Contract>();
          row.Cells["Contract"] = (DataGridViewCell) new DataGridViewComboBoxCell()
          {
            DisplayStyleForCurrentCellOnly = true,
            ValueMember = "ContractId",
            DisplayMember = "ContractNum",
            DataSource = (object) contractList2
          };
          row.Cells["Contract"].Value = (object) ((Bond) row.DataBoundItem).Contract.ContractId;
        }
      }
      this.LoadSettingsBond();
    }

    private void dgvBond_CurrentCellDirtyStateChanged(object sender, EventArgs e)
    {
      if (!this.dgvBond.IsCurrentCellDirty)
        return;
      this.dgvBond.CommitEdit(DataGridViewDataErrorContexts.Commit);
      if (this.dgvBond.CurrentCell.ColumnIndex == this.dgvBond.Rows[this.dgvBond.CurrentRow.Index].Cells["Org"].ColumnIndex)
      {
        this.session = Kvartplata.Domain.CurrentSession;
        IList<Contract> contractList = this.session.CreateQuery(string.Format(" from Contract where BaseOrg.BaseOrgId={0} and Manager.BaseOrgId=(select Manager.BaseOrgId from Company where CompanyId={1})", (object) Convert.ToInt32(this.dgvBond.CurrentRow.Cells["Org"].Value), (object) this.Client.Company.CompanyId, (object) Kvartplata.Classes.KvrplHelper.DateToBaseFormat(Kvartplata.Classes.Options.Period.PeriodName.Value))).List<Contract>();
        this.dgvBond.CurrentRow.Cells["Contract"] = (DataGridViewCell) new DataGridViewComboBoxCell()
        {
          DisplayStyleForCurrentCellOnly = true,
          ValueMember = "ContractId",
          DisplayMember = "ContractNum",
          DataSource = (object) contractList
        };
      }
    }

    private void InsertBond()
    {
      this.session.Clear();
      this.btnDelRecord.Enabled = false;
      this.btnSave.Enabled = true;
      Bond bond = new Bond();
      bond.DBeg = Kvartplata.Classes.Options.Period.PeriodId < this.MonthClosed.PeriodId + 1 ? this.MonthClosed.PeriodName.Value.AddMonths(1) : Kvartplata.Classes.Options.Period.PeriodName.Value;
      bond.DEnd = Convert.ToDateTime("2999-12-31");
      IList<Bond> bondList = (IList<Bond>) new List<Bond>();
      if ((uint) this.dgvBond.Rows.Count > 0U)
        bondList = (IList<Bond>) (this.dgvBond.DataSource as List<Bond>);
      bondList.Add(bond);
      this.dgvBond.DataSource = (object) null;
      this.dgvBond.Columns.Clear();
      this.dgvBond.DataSource = (object) bondList;
      this.SetViewBond();
      this.dgvBond.CurrentCell = this.dgvBond.Rows[this.dgvBond.Rows.Count - 1].Cells["Org"];
    }

    private void SaveAllBond()
    {
      bool flag = false;
      foreach (DataGridViewRow row in (IEnumerable) this.dgvBond.Rows)
      {
        if (((Bond) row.DataBoundItem).IsEdit)
        {
          this.oldBond = new Bond();
          foreach (Bond oldBond in (IEnumerable<Bond>) this.oldBonds)
          {
            if (oldBond.OldHashCode == ((Bond) row.DataBoundItem).OldHashCode)
            {
              this.oldBond = oldBond;
              break;
            }
          }
          this.dgvBond.Rows[row.Index].Selected = true;
          this.dgvBond.CurrentCell = row.Cells[0];
          if (!this.SaveBond())
            flag = true;
          else
            ((Bond) row.DataBoundItem).IsEdit = false;
        }
      }
      if (flag)
        return;
      this.LoadBond();
    }

    private bool SaveBond()
    {
      Bond dataBoundItem = (Bond) this.dgvBond.CurrentRow.DataBoundItem;
      bool flag = dataBoundItem.LsClient == null;
      if (this.dgvBond.CurrentRow.Cells["DBeg"].Value == null || this.dgvBond.CurrentRow.Cells["DEnd"].Value == null)
      {
        int num = (int) MessageBox.Show("Введите дату начала и окончания", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      try
      {
        dataBoundItem.DBeg = Kvartplata.Classes.KvrplHelper.FirstDay(Convert.ToDateTime(this.dgvBond.CurrentRow.Cells["DBeg"].Value));
        dataBoundItem.DEnd = Kvartplata.Classes.KvrplHelper.LastDay(Convert.ToDateTime(this.dgvBond.CurrentRow.Cells["DEnd"].Value));
      }
      catch
      {
        int num = (int) MessageBox.Show("Некорректная дата начала или дата окончания!", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        return false;
      }
      if (this.dgvBond.CurrentRow.Cells["Org"].Value == null)
      {
        int num = (int) MessageBox.Show("Выберите организацию", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        return false;
      }
      if (this.dgvBond.CurrentRow.Cells["Contract"].Value == null)
      {
        int num = (int) MessageBox.Show("Выберите договор", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        return false;
      }
      dataBoundItem.Contract = this.session.Get<Contract>((object) Convert.ToInt32(this.dgvBond.CurrentRow.Cells["Contract"].Value));
      if (this.dgvBond.CurrentRow.Cells["FIO"].Value == null)
      {
        int num = (int) MessageBox.Show("Выберите плательщика", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        return false;
      }
      dataBoundItem.Person = this.session.Get<Person>((object) Convert.ToInt32(this.dgvBond.CurrentRow.Cells["FIO"].Value));
      DateTime? nullable = dataBoundItem.Person.RegOutDate;
      DateTime dbeg1 = dataBoundItem.DBeg;
      if ((nullable.HasValue ? (nullable.GetValueOrDefault() <= dbeg1 ? 1 : 0) : 0) != 0 && (flag || !flag && (this.oldBond.Person != dataBoundItem.Person || dataBoundItem.DEnd > this.LastDayMonthClosed)))
      {
        int num = (int) MessageBox.Show("Выбранный плательщик выписан", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        return false;
      }
      if (dataBoundItem.DBeg > dataBoundItem.DEnd)
      {
        int num = (int) MessageBox.Show("Дата начала больше даты окончания", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      DateTime dbeg2 = dataBoundItem.DBeg;
      nullable = this.MonthClosed.PeriodName;
      DateTime dateTime1 = nullable.Value;
      DateTime dateTime2;
      int num1;
      if (dbeg2 <= dateTime1)
      {
        DateTime dend = dataBoundItem.DEnd;
        nullable = this.MonthClosed.PeriodName;
        dateTime2 = nullable.Value.AddMonths(1);
        DateTime dateTime3 = dateTime2.AddDays(-1.0);
        num1 = dend < dateTime3 ? 1 : 0;
      }
      else
        num1 = 0;
      if (num1 != 0)
      {
        int num2 = (int) MessageBox.Show("Невозможно внести изменения в закрытом месяце", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        return false;
      }
      DateTime dbeg3 = dataBoundItem.DBeg;
      dateTime2 = DateTime.Now;
      DateTime dateTime4 = dateTime2.AddYears(-3);
      int num3;
      if (!(dbeg3 <= dateTime4))
      {
        DateTime dbeg4 = dataBoundItem.DBeg;
        dateTime2 = DateTime.Now;
        DateTime dateTime3 = dateTime2.AddYears(3);
        num3 = dbeg4 >= dateTime3 ? 1 : 0;
      }
      else
        num3 = 1;
      if (num3 != 0 && MessageBox.Show("Дата начала отличается от текущей более, чем на 3 года. Продолжить", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.Cancel)
        return false;
      if (flag && (dataBoundItem.DBeg <= this.LastDayMonthClosed || dataBoundItem.DEnd <= this.LastDayMonthClosed))
      {
        int num2 = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        return false;
      }
      if (!flag && (this.oldBond.DBeg <= this.LastDayMonthClosed && this.oldBond.DEnd < this.LastDayMonthClosed || this.oldBond.DEnd < this.LastDayMonthClosed || this.oldBond.DBeg > this.LastDayMonthClosed && dataBoundItem.DBeg <= this.LastDayMonthClosed || this.oldBond.DBeg <= this.LastDayMonthClosed && (this.oldBond.DBeg != dataBoundItem.DBeg || this.oldBond.Contract != dataBoundItem.Contract || this.oldBond.Person != dataBoundItem.Person)))
      {
        int num2 = (int) MessageBox.Show("Не могу сохранить текущую запись, т.к. она принадлежит закрытому периоду", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        return false;
      }
      if (dataBoundItem.Contract.BaseOrg != dataBoundItem.Person.BaseOrg && MessageBox.Show("Выбранная организация не совпадает с организацией плательщика. Продолжить?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.Cancel)
        return false;
      dataBoundItem.LsClient = this.Client;
      dataBoundItem.UName = Kvartplata.Classes.Options.Login;
      dataBoundItem.DEdit = DateTime.Now;
      try
      {
        if (flag)
          this.session.Save((object) dataBoundItem);
        else
          this.session.CreateQuery("update Bond set Contract.ContractId=:contract,Person.PersonId=:person,DBeg=:dbeg,DEnd=:dend,UName=:user,DEdit=:dedit where LsClient.ClientId=:oldcl and DBeg=:oldbeg ").SetParameter<int>("contract", dataBoundItem.Contract.ContractId).SetParameter<int>("person", dataBoundItem.Person.PersonId).SetDateTime("dbeg", dataBoundItem.DBeg).SetDateTime("dend", dataBoundItem.DEnd).SetParameter<string>("user", dataBoundItem.UName).SetParameter<DateTime>("dedit", dataBoundItem.DEdit).SetParameter<int>("oldcl", this.Client.ClientId).SetDateTime("oldbeg", this.oldBond.DBeg).ExecuteUpdate();
        this.session.Flush();
      }
      catch (Exception ex)
      {
        int num2 = (int) MessageBox.Show("Невозможно сохранить изменения", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
        return false;
      }
      return true;
    }

    private void DelBond()
    {
      if (this.dgvBond.Rows.Count <= 0 || this.dgvBond.CurrentRow == null)
        return;
      Bond dataBoundItem = (Bond) this.dgvBond.CurrentRow.DataBoundItem;
      if (MessageBox.Show("Вы уверены, что хотите удалить запись?", "Внимание", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.OK)
      {
        this.session = Kvartplata.Domain.CurrentSession;
        try
        {
          this.session.Delete((object) dataBoundItem);
          this.session.Flush();
        }
        catch (Exception ex)
        {
          int num = (int) MessageBox.Show("Невозможно удалить запись", "Ошибка", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
        }
        this.session.Clear();
      }
    }

    private void dgvBond_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
    {
      this.btnDelRecord.Enabled = false;
      this.btnSave.Enabled = true;
      ((Bond) this.dgvBond.CurrentRow.DataBoundItem).IsEdit = true;
    }

    private void dgvBond_CellEndEdit(object sender, DataGridViewCellEventArgs e)
    {
      if (this.dgvBond.CurrentCell == null || this.dgvBond.CurrentCell.Value == null)
        return;
      Bond dataBoundItem = (Bond) this.dgvBond.CurrentRow.DataBoundItem;
      dataBoundItem.IsEdit = true;
      try
      {
        string name = this.dgvBond.Columns[e.ColumnIndex].Name;
        if (!(name == "DBeg"))
        {
          if (!(name == "DEnd"))
          {
            if (!(name == "Contract"))
            {
              if (name == "FIO")
              {
                try
                {
                  dataBoundItem.Person = this.session.Get<Person>(this.dgvBond.CurrentRow.Cells["FIO"].Value);
                }
                catch
                {
                }
              }
            }
            else
            {
              try
              {
                dataBoundItem.Contract = this.session.Get<Contract>(this.dgvBond.CurrentRow.Cells["Contract"].Value);
              }
              catch
              {
              }
            }
          }
          else
          {
            try
            {
              dataBoundItem.DEnd = Convert.ToDateTime(this.dgvBond.CurrentRow.Cells["DEnd"].Value);
            }
            catch
            {
            }
          }
        }
        else
        {
          try
          {
            dataBoundItem.DBeg = Convert.ToDateTime(this.dgvBond.CurrentRow.Cells["DBeg"].Value);
          }
          catch
          {
          }
        }
      }
      catch (Exception ex)
      {
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
      }
    }

    private void LoadSettingsBond()
    {
      this.MySettingsBond.Load();
      foreach (DataGridViewColumn column in (BaseCollection) this.dgvBond.Columns)
        this.MySettingsBond.GetMySettings(column);
    }

    private void dgvBond_ColumnWidthChanged(object sender, DataGridViewColumnEventArgs e)
    {
      if (this.MySettingsBond.FindByName(e.Column.Name) < 0)
        return;
      this.MySettingsBond.Columns[this.MySettingsBond.FindByName(e.Column.Name)].Width = e.Column.Width;
      this.MySettingsBond.Save();
    }

    private void dgvBond_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
    {
      if (this.dgvBond.DataSource == null)
        return;
      DataGridViewRow row = (sender as DataGridView).Rows[e.RowIndex];
      DateTime dbeg = ((Bond) row.DataBoundItem).DBeg;
      DateTime? periodName = this.NextMonthClosed.PeriodName;
      DateTime dateTime1 = Kvartplata.Classes.KvrplHelper.LastDay(periodName.Value);
      int num;
      if (dbeg <= dateTime1)
      {
        DateTime dend = ((Bond) row.DataBoundItem).DEnd;
        periodName = this.NextMonthClosed.PeriodName;
        DateTime dateTime2 = periodName.Value;
        num = dend >= dateTime2 ? 1 : 0;
      }
      else
        num = 0;
      if (num != 0)
      {
        row.DefaultCellStyle.BackColor = Color.PapayaWhip;
        row.DefaultCellStyle.ForeColor = Color.Black;
      }
      else
      {
        row.DefaultCellStyle.BackColor = Color.FromArgb((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
        row.DefaultCellStyle.ForeColor = Color.Gray;
      }
    }

    private void LoadParamForeign()
    {
      this.btnSave.Enabled = false;
      this.btnAddRecord.Enabled = false;
      this.btnDelRecord.Enabled = false;
      this.tsbMultiPastTime.Enabled = false;
      this.chbArhiv.Visible = false;
      this.session = Kvartplata.Domain.CurrentSession;
      this.dgvParamForeign.Columns.Clear();
      this.dgvParamForeign.DataSource = (object) null;
      IList<ParamForeign> paramForeignList = (IList<ParamForeign>) new List<ParamForeign>();
      this.dgvParamForeign.DataSource = (object) this.session.CreateQuery(string.Format("select pf from ParamForeign pf left join fetch pf.Service s left outer join pf.BaseTariff where pf.Period.PeriodId={0} and pf.LsClient.ClientId={1} order by " + Kvartplata.Classes.Options.SortService + ",pf.Code desc,pf.DBeg desc", (object) Kvartplata.Classes.Options.Period.PeriodId, (object) this.Client.ClientId)).List<ParamForeign>();
      this.MySettingsParamForeign.GridName = "ParamForeign";
      this.SetViewParamForeign();
      this.dgvParamForeign.Focus();
    }

    private void SetViewParamForeign()
    {
      this.dgvParamForeign.Columns["DBeg"].HeaderText = "Дата начала";
      this.dgvParamForeign.Columns["DEnd"].HeaderText = "Дата окончания";
      this.dgvParamForeign.Columns["ServiceName"].HeaderText = "Услуга";
      this.dgvParamForeign.Columns["ServiceName"].DisplayIndex = 0;
      this.dgvParamForeign.Columns["NormValue"].HeaderText = "Норматив";
      this.dgvParamForeign.Columns["Cost"].HeaderText = "Цена";
      this.dgvParamForeign.Columns["ParamValue"].HeaderText = "Объем";
      this.dgvParamForeign.Columns["P101"].HeaderText = "Количество жильцов";
      this.dgvParamForeign.Columns["P102"].HeaderText = "Количество вр.жильцов";
      this.dgvParamForeign.Columns["P2"].HeaderText = "Общая площадь";
      this.dgvParamForeign.Columns["BaseTariffName"].HeaderText = "На кого";
      this.dgvParamForeign.Columns["BaseTariffName"].DisplayIndex = 6;
      this.LoadSettingsParamForeign();
    }

    private void LoadSettingsParamForeign()
    {
      this.MySettingsParamForeign.Load();
      foreach (DataGridViewColumn column in (BaseCollection) this.dgvParamForeign.Columns)
        this.MySettingsParamForeign.GetMySettings(column);
    }

    private void dgvParamForeign_ColumnWidthChanged(object sender, DataGridViewColumnEventArgs e)
    {
      if (this.MySettingsParamForeign.FindByName(e.Column.Name) < 0)
        return;
      this.MySettingsParamForeign.Columns[this.MySettingsParamForeign.FindByName(e.Column.Name)].Width = e.Column.Width;
      this.MySettingsParamForeign.Save();
    }

    private void dgvParamForeign_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
    {
      if (((DataGridView) sender).DataSource == null)
        return;
      DataGridViewRow row = ((DataGridView) sender).Rows[e.RowIndex];
      if ((int) ((ParamForeign) row.DataBoundItem).Code == Kvartplata.Classes.Options.Period.PeriodId * 10)
        row.DefaultCellStyle.BackColor = Color.PapayaWhip;
      else
        row.DefaultCellStyle.ForeColor = Color.Gray;
    }

    private void TsmiTariff_Click(object sender, EventArgs e)
    {
      this.Cursor = Cursors.WaitCursor;
      FrmTariffs frmTariffs = new FrmTariffs(this.Client.Company);
      frmTariffs.Company_id = this.Client.Company.CompanyId;
      int num = (int) frmTariffs.ShowDialog();
      frmTariffs.Dispose();
      this.Cursor = Cursors.Default;
    }

    private void TsmiFacilities_Click(object sender, EventArgs e)
    {
      FrmMSP frmMsp = new FrmMSP(this.Client.Company);
      int num = (int) frmMsp.ShowDialog();
      frmMsp.Dispose();
    }

    private void TsmiAbsence_Click(object sender, EventArgs e)
    {
      FrmAbsence frmAbsence = new FrmAbsence(this.Client.Company);
      int num = (int) frmAbsence.ShowDialog();
      frmAbsence.Dispose();
    }

    private void TsmiQuality_Click(object sender, EventArgs e)
    {
      FrmQuality frmQuality = new FrmQuality(this.Client.Company);
      frmQuality.Company_id = this.Client.Company.CompanyId;
      int num = (int) frmQuality.ShowDialog();
      frmQuality.Dispose();
    }

    private void TsmiSourcesPayments_Click(object sender, EventArgs e)
    {
      FrmSourcePay frmSourcePay = new FrmSourcePay(this.Client.Company);
      int num = (int) frmSourcePay.ShowDialog();
      frmSourcePay.Dispose();
    }

    private void TsmiPurposePayment_Click(object sender, EventArgs e)
    {
      FrmPurposePay frmPurposePay = new FrmPurposePay(this.Client.Company);
      int num = (int) frmPurposePay.ShowDialog();
      frmPurposePay.Dispose();
    }

    private void TsmiParameters_Click(object sender, EventArgs e)
    {
      FrmParam frmParam = new FrmParam(this.Client.Company);
      frmParam.Company_id = this.Client.Company.CompanyId;
      int num = (int) frmParam.ShowDialog();
      frmParam.Dispose();
    }

    private void TsmiTypeDocuments_Click(object sender, EventArgs e)
    {
      FrmRightDoc frmRightDoc = new FrmRightDoc(this.Client.Company);
      int num = (int) frmRightDoc.ShowDialog();
      frmRightDoc.Dispose();
    }

    private void TsmiTypeCounters_Click(object sender, EventArgs e)
    {
      FrmTypeCounter frmTypeCounter = new FrmTypeCounter(this.Client.Company);
      int num = (int) frmTypeCounter.ShowDialog();
      frmTypeCounter.Dispose();
    }

    private void TsmiSuppliers_Click(object sender, EventArgs e)
    {
      FrmSupplier frmSupplier = new FrmSupplier(this.Client.Company);
      int num = (int) frmSupplier.ShowDialog();
      frmSupplier.Dispose();
    }

    private void TsmiReceipt_Click(object sender, EventArgs e)
    {
      FrmReceipt frmReceipt = new FrmReceipt(this.Client.Company);
      int num = (int) frmReceipt.ShowDialog();
      frmReceipt.Dispose();
    }

    private void TsmiServiceOrganizations_Click(object sender, EventArgs e)
    {
      FrmServiceParam frmServiceParam = new FrmServiceParam(this.Client.Company);
      frmServiceParam.Company_id = this.Client.Company.CompanyId;
      int num = (int) frmServiceParam.ShowDialog();
      frmServiceParam.Dispose();
    }

    private void TsmiService_Click(object sender, EventArgs e)
    {
      FrmDi_PhonesServ frmDiPhonesServ = new FrmDi_PhonesServ(this.Client.Company);
      int num = (int) frmDiPhonesServ.ShowDialog();
      frmDiPhonesServ.Dispose();
    }

    private void TsmiBanks_Click(object sender, EventArgs e)
    {
      this.Cursor = Cursors.WaitCursor;
      FrmBank frmBank = new FrmBank(this.Client.Company);
      int num = (int) frmBank.ShowDialog();
      frmBank.Dispose();
      this.Cursor = Cursors.Default;
    }

    private void TsmiOrganizations_Click(object sender, EventArgs e)
    {
      FrmOrg frmOrg = new FrmOrg(this.Client.Company);
      int num = (int) frmOrg.ShowDialog();
      frmOrg.Dispose();
      if (this.tcntrl.SelectedTab != this.tpArenda)
        return;
      this.LoadArenda();
    }

    private void TsmiTypeLocationCounter_Click(object sender, EventArgs e)
    {
      int num = (int) new FrmCoeffLocation(this.Client.Company).ShowDialog();
    }

    private void TsmiTypeSeals_Click(object sender, EventArgs e)
    {
      int num = (int) new FrmTypeSeal(this.Client.Company).ShowDialog();
    }

    private void TsmiTypeBindingServices_Click(object sender, EventArgs e)
    {
    }

    private void TsmiBindingServices_Click(object sender, EventArgs e)
    {
      int num = (int) new FrmCrossService(this.Client.Company).ShowDialog();
    }

    private void TsmiTypeNoteBook_Click(object sender, EventArgs e)
    {
      FrmTypeNoteBook frmTypeNoteBook = new FrmTypeNoteBook(this.Client.Company);
      int num = (int) frmTypeNoteBook.ShowDialog();
      frmTypeNoteBook.Dispose();
    }

    private void TsmiGuilds_Click(object sender, EventArgs e)
    {
      this.Cursor = Cursors.WaitCursor;
      FrmGuild frmGuild = new FrmGuild(this.Client.Company);
      int num = (int) frmGuild.ShowDialog();
      frmGuild.Dispose();
      this.Cursor = Cursors.Default;
    }

    private void TsmiContractOrganization_Click(object sender, EventArgs e)
    {
      this.Cursor = Cursors.WaitCursor;
      FrmContract frmContract = new FrmContract(this.Client.Company);
      int num = (int) frmContract.ShowDialog();
      frmContract.Dispose();
      this.Cursor = Cursors.Default;
    }

    private void tsbKvit_Click(object sender, EventArgs e)
    {
      if (this.Client.Complex.IdFk == Kvartplata.Classes.Options.Complex.IdFk)
      {
        if (!Kvartplata.Classes.KvrplHelper.CheckProxy(34, 1, this.Client.Company, true))
          return;
        this.Cursor = Cursors.WaitCursor;
        this.session = Kvartplata.Domain.CurrentSession;
        Kvartplata.Classes.Raion raion = this.session.CreateQuery(string.Format("select c.Raion from Company c where c.CompanyId={0}", (object) this.Client.Company.CompanyId)).List<Kvartplata.Classes.Raion>()[0];
        this.session.Clear();
        try
        {
          CallDll.WReceipt(4, raion.IdRnn, (int) this.Client.Company.CompanyId, this.city, this.Client.Home.IdHome, this.Client.ClientId, this.CurrentPeriod.PeriodName.Value.ToOADate(), Kvartplata.Classes.Options.Alias, Kvartplata.Classes.Options.Login, Kvartplata.Classes.Options.Pwd, this.Client.Complex.IdFk);
        }
        catch (Exception ex)
        {
          int num = (int) MessageBox.Show("Невозможно вызвать библиотеку печати квитанций!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          Kvartplata.Classes.KvrplHelper.WriteLog(ex, (Kvartplata.Classes.LsClient) null);
        }
        this.Cursor = Cursors.Default;
      }
      if (this.Client.Complex.IdFk != Kvartplata.Classes.Options.ComplexArenda.IdFk || !Kvartplata.Classes.KvrplHelper.CheckProxy(34, 1, this.Client.Company, true))
        return;
      this.Cursor = Cursors.WaitCursor;
      FrmBills frmBills = new FrmBills((short) 4, Convert.ToInt32(Kvartplata.Classes.KvrplHelper.BaseValue(1, this.Client.Company)), this.session.CreateQuery(string.Format("select c.Raion from Company c where c.CompanyId={0}", (object) this.Client.Company.CompanyId)).List<Kvartplata.Classes.Raion>()[0], this.Client.Company, this.Client.Home, this.Client, (BaseOrg) this.cmbOrganization.SelectedItem);
      int num1 = (int) frmBills.ShowDialog();
      frmBills.Dispose();
      this.Cursor = Cursors.Default;
      DateTime dateTime1 = this.mpCurrentPeriod.Value;
      DateTime? periodName = Kvartplata.Classes.Options.Period.PeriodName;
      DateTime dateTime2 = periodName.Value;
      if (dateTime1 != dateTime2)
      {
        this.mpCurrentPeriod.OldMonth = 0;
        Kvartplata.Classes.MonthPicker mpCurrentPeriod = this.mpCurrentPeriod;
        periodName = Kvartplata.Classes.Options.Period.PeriodName;
        DateTime dateTime3 = periodName.Value;
        mpCurrentPeriod.Value = dateTime3;
      }
      this.LoadBill();
      this.Cursor = Cursors.Default;
    }

    private void TsmiDischarge_Click(object sender, EventArgs e)
    {
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(34, 1, this.Client.Company, true))
        return;
      int num1 = !Kvartplata.Classes.KvrplHelper.CheckProxy(32, 2, this.Client.Company, false) ? 0 : 1;
      int admin = !Kvartplata.Classes.Options.Kvartplata || !Kvartplata.Classes.Options.Arenda ? (!Kvartplata.Classes.Options.Kvartplata ? num1 + 10 : num1 + 0) : num1 + 20;
      this.Cursor = Cursors.WaitCursor;
      Kvartplata.Classes.Company company = this.session.Get<Kvartplata.Classes.Company>((object) this.Client.Company.CompanyId);
      this.session.Clear();
      try
      {
        CallDll.Rep(this.city, 0, 0, (int) company.CompanyId, 0, this.Client.ClientId, Convert.ToInt32(((ToolStripItem) sender).Tag), Kvartplata.Classes.Options.Period.PeriodId, admin, Kvartplata.Classes.Options.Alias, Kvartplata.Classes.Options.Login, Kvartplata.Classes.Options.Pwd);
      }
      catch (Exception ex)
      {
        int num2 = (int) MessageBox.Show("Невозможно вызвать библиотеку отчетов!", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, (Kvartplata.Classes.LsClient) null);
      }
      this.Cursor = Cursors.Default;
    }

    private void tsbCalc_Click(object sender, EventArgs e)
    {
      if (!Kvartplata.Classes.KvrplHelper.CheckProxy(35, 2, this.Client.Company, true) || Kvartplata.Classes.KvrplHelper.MinMaxClosedPeriod("min", 4, this.Client.Company.Raion, this.Client.Company, this.session) >= Kvartplata.Classes.Options.Period.PeriodId && MessageBox.Show("Месяц закрыт. Продолжить?", "", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.Cancel)
        return;
      int num1;
      if (Kvartplata.Classes.KvrplHelper.MinMaxClosedPeriod("max", 4, this.Client.Company.Raion, this.Client.Company, this.session) + 2 <= Kvartplata.Classes.Options.Period.PeriodId)
        num1 = MessageBox.Show("Выбран месяц: " + Kvartplata.Classes.Options.Period.PeriodName.Value.ToString("MMMM", (IFormatProvider) CultureInfo.CurrentCulture) + " " + Kvartplata.Classes.Options.Period.PeriodName.Value.Year.ToString() + ". Продолжить?", "", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.Cancel ? 1 : 0;
      else
        num1 = 0;
      if (num1 != 0)
        return;
      this.Cursor = Cursors.WaitCursor;
      try
      {
        CallDll.Rent(this.CurrentPeriod.PeriodId, !Kvartplata.Classes.Options.RentMSP ? " and client_id in (" + this.Client.ClientId.ToString() + ")" : "*** and client_id in (" + this.Client.ClientId.ToString() + ")", Kvartplata.Classes.Options.Alias, Kvartplata.Classes.Options.Login, Kvartplata.Classes.Options.Pwd);
        this.dtmpCurrentPeriod_ValueChanged((object) null, (EventArgs) null);
      }
      catch (Exception ex)
      {
        int num2 = (int) MessageBox.Show("Невозможно вызвать библиотеку расчета!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, (Kvartplata.Classes.LsClient) null);
      }
      this.Cursor = Cursors.Default;
    }

    private void LoadUpPanel()
    {
      this.mpCurrentPeriod.Value = this.CurrentPeriod.PeriodName.Value;
      this.lblMonthCLosed.Text = this.MonthClosed.PeriodName.Value.ToString("MM.yyyy");
    }

    private void btnTypeDelivery_Click(object sender, EventArgs e)
    {
      this.tcntrl.SelectedTab = this.tpMessage;
    }

    private void tsmiLsOverhaul_Click(object sender, EventArgs e)
    {
      if (this.session.CreateQuery(string.Format("select distinct ls from SupplierClient spcl right join spcl.LsClient ls , LsService serv where ls.ClientId=serv.Client.ClientId and ls.ClientId={0} and spcl.Company is not null and serv.Service.ServiceId=150", (object) this.Client.ClientId)).List<Kvartplata.Classes.LsClient>().Count != 0)
        return;
      this.session.BeginTransaction();
      string connectionString = string.Format("Provider={4};Eng={0};Uid={1};Pwd={2}; Links={3}", (object) Kvartplata.Classes.Options.BaseName, (object) Kvartplata.Classes.Options.Login, (object) Kvartplata.Classes.Options.Pwd, (object) "tcpip{}", (object) Kvartplata.Classes.Options.Provider);
      Transfer transfer = this.session.CreateQuery("from Transfer tf where tf.Company.CompanyId=:cmp").SetParameter<short>("cmp", this.Client.Company.CompanyId).UniqueResult<Transfer>();
      string str = "";
      object obj1 = this.session.CreateQuery("select max(ls.SupplierClientId) from SupplierClient ls where ls.SupplierClientId between :beg and :end").SetParameter<int?>("beg", transfer.OhlBeg).SetParameter<int?>("end", transfer.OhlEnd).UniqueResult();
      int? nullable;
      object obj2;
      if (obj1 == null)
      {
        nullable = transfer.OhlBeg;
        int num = 1;
        obj2 = (object) (nullable.HasValue ? new int?(nullable.GetValueOrDefault() + num) : new int?());
      }
      else
        obj2 = (object) (Convert.ToInt32(obj1) + 1);
      int int32 = Convert.ToInt32(obj2);
      nullable = transfer.OhlEnd;
      int valueOrDefault = nullable.GetValueOrDefault();
      if (int32 > valueOrDefault && nullable.HasValue)
      {
        int num1 = (int) MessageBox.Show("Исчерпан лимит лицевых для компании!", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
      else
        str = obj2.ToString();
      string commandText = string.Format("INSERT INTO DBA.cmpSupplierClient(Company_id, Client_id, Supplier_id, Supplier_client, Uname, Dedit) VALUES({0}, {1}, {2}, {3}, '{4}', getdate())", (object) this.Client.Company.CompanyId, (object) this.Client.ClientId, (object) -39999859, (object) str, (object) Kvartplata.Classes.Options.Login);
      try
      {
        Kvartplata.Classes.OleDbHelper.ExecuteNonQuery(connectionString, CommandType.Text, commandText, 1000);
        this.session.Transaction.Commit();
        this.LoadSupplierClient();
      }
      catch (Exception ex)
      {
        Kvartplata.Classes.KvrplHelper.WriteLog(ex, this.Client);
        this.session.Transaction.Rollback();
      }
    }

    private void tbSurFlat_KeyPress(object sender, KeyPressEventArgs e)
    {
      char keyChar = e.KeyChar;
      if ((int) e.KeyChar >= 48 && (int) e.KeyChar <= 57 || (int) keyChar >= 1040 && (int) keyChar <= 1103 || ((int) keyChar == 8 || (int) keyChar == 46) || (int) keyChar == 44)
        return;
      e.Handled = true;
    }

    private void butFileCLient_Click(object sender, EventArgs e)
    {
      int num = (int) new FrmFileClient(this.Client.Company, this.Client, this.Client.Home.IdHome).ShowDialog();
    }

    private void dgvCounters_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
    {
      if (this.dgvCounters.CurrentCell.ColumnIndex != 3)
        return;
      e.Control.KeyPress -= new KeyPressEventHandler(this.Control_KeyPress);
      e.Control.KeyPress += new KeyPressEventHandler(this.Control_KeyPress);
    }

    private void Control_KeyPress(object sender, KeyPressEventArgs e)
    {
      if ((int) e.KeyChar != 95)
        return;
      e.Handled = true;
    }

    private void butDownloadDocHome_Click(object sender, EventArgs e)
    {
      try
      {
        byte[] bytes = new WebClient().DownloadData(Kvartplata.Classes.Options.DocHomeUri + "?idhome=" + (object) this.Client.Home.IdHome + "&sign=" + Kvartplata.Classes.KvrplHelper.getMd5Hash(this.Client.Home.IdHome.ToString() + "doc123home"));
        SaveFileDialog saveFileDialog = new SaveFileDialog();
        saveFileDialog.Filter = "zip files (*.zip)|*.zip";
        saveFileDialog.FilterIndex = 2;
        saveFileDialog.RestoreDirectory = true;
        saveFileDialog.FileName = this.Client.Home.IdHome.ToString() + ".zip";
        if (saveFileDialog.ShowDialog() != DialogResult.OK)
          return;
        System.IO.File.WriteAllBytes(saveFileDialog.FileName, bytes);
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show("Не найдены файлы на дом", "Ошибка");
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new Container();
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (FrmClientCard));
      DataGridViewCellStyle gridViewCellStyle1 = new DataGridViewCellStyle();
      DataGridViewCellStyle gridViewCellStyle2 = new DataGridViewCellStyle();
      DataGridViewCellStyle gridViewCellStyle3 = new DataGridViewCellStyle();
      this.contextMenuStrip1 = new ContextMenuStrip(this.components);
      this.tsmiCopyRecord = new ToolStripMenuItem();
      this.tsmiDeleteRecord = new ToolStripMenuItem();
      this.tsmiUpdateRecord = new ToolStripMenuItem();
      this.tsmiInPastTime = new ToolStripMenuItem();
      this.pnButton = new Panel();
      this.progressBar1 = new ProgressBar();
      this.btnLast = new Button();
      this.btnFirst = new Button();
      this.btnNext = new Button();
      this.btnPreview = new Button();
      this.btnDelRecord = new Button();
      this.btnAddRecord = new Button();
      this.btnSave = new Button();
      this.btnExit = new Button();
      this.ts = new ToolStrip();
      this.tsbMultiPastTime = new ToolStripDropDownButton();
      this.tsbDictionary = new ToolStripDropDownButton();
      this.tsmiTariff = new ToolStripMenuItem();
      this.tsmiFacilities = new ToolStripMenuItem();
      this.tsmiAbsence = new ToolStripMenuItem();
      this.tsmiQuality = new ToolStripMenuItem();
      this.tsmiSourcesPayments = new ToolStripMenuItem();
      this.tsmiPurposePayment = new ToolStripMenuItem();
      this.tsmiParameters = new ToolStripMenuItem();
      this.tsmiTypeDocuments = new ToolStripMenuItem();
      this.tsmiTypeCounters = new ToolStripMenuItem();
      this.tsmiSuppliers = new ToolStripMenuItem();
      this.tsmiReceipt = new ToolStripMenuItem();
      this.tsmiServiceOrganizations = new ToolStripMenuItem();
      this.tsmiService = new ToolStripMenuItem();
      this.tsmiBanks = new ToolStripMenuItem();
      this.tsmiOrganizations = new ToolStripMenuItem();
      this.tsmiTypeLocationCounter = new ToolStripMenuItem();
      this.tsmiTypeSeals = new ToolStripMenuItem();
      this.tsmiTypeBindingServices = new ToolStripMenuItem();
      this.tsmiBindingServices = new ToolStripMenuItem();
      this.tsmiTypeNoteBook = new ToolStripMenuItem();
      this.tsmiGuilds = new ToolStripMenuItem();
      this.tsmiContractOrganization = new ToolStripMenuItem();
      this.tsbReport = new ToolStripDropDownButton();
      this.tsmiDischarge = new ToolStripMenuItem();
      this.tsmiDetailAccounts = new ToolStripMenuItem();
      this.сВыборкойПениToolStripMenuItem = new ToolStripMenuItem();
      this.сНачислениемПениToolStripMenuItem = new ToolStripMenuItem();
      this.tsmiDogovor = new ToolStripMenuItem();
      this.tsmiLibraryReport = new ToolStripMenuItem();
      this.tsbCalc = new ToolStripButton();
      this.tsbKvit = new ToolStripButton();
      this.tsbKvit2 = new ToolStripDropDownButton();
      this.tsmiOldReceipt = new ToolStripMenuItem();
      this.tsmiNewReceipt = new ToolStripMenuItem();
      this.tsbPayment = new ToolStripButton();
      this.tsbFind = new ToolStripDropDownButton();
      this.cmsFind = new ContextMenuStrip(this.components);
      this.tsmiPersonalSearch = new ToolStripMenuItem();
      this.tsmiFlatSearch = new ToolStripMenuItem();
      this.tsmiContractSearch = new ToolStripMenuItem();
      this.tsbClient = new ToolStripDropDownButton();
      this.tsmiCreateClientsNum = new ToolStripMenuItem();
      this.tsmiLsKvartplata = new ToolStripMenuItem();
      this.tsmiLsArenda = new ToolStripMenuItem();
      this.tsmiLsOverhaul = new ToolStripMenuItem();
      this.tsmiDeleteClient = new ToolStripMenuItem();
      this.tsmiDivide = new ToolStripMenuItem();
      this.tsmiUnit = new ToolStripMenuItem();
      this.tsmiClose = new ToolStripMenuItem();
      this.tsbCounter = new ToolStripDropDownButton();
      this.tsbStack = new ToolStripButton();
      this.pnUp = new Panel();
      this.lblArError = new Label();
      this.cbShowAnotherOrg = new CheckBox();
      this.lblEdit = new Label();
      this.lblPastTimeLsService = new Label();
      this.mpCurrentPeriod = new Kvartplata.Classes.MonthPicker();
      this.chbArhiv = new CheckBox();
      this.lblPastTime = new Label();
      this.lblp3Address = new Label();
      this.lblp3FIO = new Label();
      this.lblp3LsClient = new Label();
      this.lblMonthCLosed = new Label();
      this.lblClosed = new Label();
      this.tcntrl = new TabControl();
      this.tpTitul = new TabPage();
      this.dgvSupplierClient = new DataGridView();
      this.label19 = new Label();
      this.pnPolicy = new Panel();
      this.pnInfoLsClinent = new Panel();
      this.lblTypeOwn = new Label();
      this.label21 = new Label();
      this.lblTempNumJilec = new Label();
      this.lbl8T = new Label();
      this.lblNumJilec = new Label();
      this.lbl7T = new Label();
      this.lblStatusT = new Label();
      this.lblRightDocT = new Label();
      this.lblFlatCategoryT = new Label();
      this.lbl6T = new Label();
      this.lbl5T = new Label();
      this.lbl4T = new Label();
      this.lblJilSquareT = new Label();
      this.lblAllSquareT = new Label();
      this.lbl3T = new Label();
      this.lbl2T = new Label();
      this.lblMspT = new Label();
      this.lbl1T = new Label();
      this.pnRemark = new Panel();
      this.mcArchive = new MonthCalendar();
      this.label7 = new Label();
      this.tbRemark = new TextBox();
      this.pnInfo = new Panel();
      this.txbDebt = new TextBox();
      this.label20 = new Label();
      this.pnNumers = new Panel();
      this.btnTypeDelivery = new Button();
      this.tbPhone = new TextBox();
      this.tbFloor = new TextBox();
      this.btnPinCode = new Button();
      this.label4 = new Label();
      this.label6 = new Label();
      this.tbEntrance = new TextBox();
      this.label3 = new Label();
      this.cbFlat = new ComboBox();
      this.lbl5 = new Label();
      this.tbSurFlat = new TextBox();
      this.lbl4 = new Label();
      this.pnFIO = new Panel();
      this.butDownloadDocHome = new Button();
      this.butFileCLient = new Button();
      this.cbArenda = new CheckBox();
      this.btnNoteBook = new Button();
      this.tbOldId = new TextBox();
      this.label5 = new Label();
      this.tbFamily = new TextBox();
      this.lbl1 = new Label();
      this.tpArenda = new TabPage();
      this.pnBill = new Panel();
      this.splitContainer1 = new SplitContainer();
      this.dgvBill = new DataGridView();
      this.lblBill = new Label();
      this.dvgArendaLS = new DataGridView();
      this.label8 = new Label();
      this.pnDogovor = new Panel();
      this.btnTypeDelivery2 = new Button();
      this.cmbDocumentType = new ComboBox();
      this.lblTypeDocument = new Label();
      this.btnPinCodeAr = new Button();
      this.txbArNumberRoom = new TextBox();
      this.lblArNumberRoom = new Label();
      this.txbArFloor = new TextBox();
      this.lblFloor = new Label();
      this.txbArEntrance = new TextBox();
      this.lblArEntrance = new Label();
      this.lblArNote = new Label();
      this.txbArNote = new TextBox();
      this.txbArPhone = new TextBox();
      this.lblArPhone = new Label();
      this.cmbArFlat = new ComboBox();
      this.lblArFlat = new Label();
      this.txbAdres = new TextBox();
      this.lblAdres = new Label();
      this.txbRentPrior = new TextBox();
      this.lblRentPrior = new Label();
      this.lbOrg = new ListBox();
      this.mtbKumiDate = new MaskedTextBox();
      this.mtbDate = new MaskedTextBox();
      this.mtbDEnd = new MaskedTextBox();
      this.lblDEnd = new Label();
      this.mtbDBeg = new MaskedTextBox();
      this.lblDBeg = new Label();
      this.btnOrgInfo = new Button();
      this.cmbOrganization = new ComboBox();
      this.cmbBuiltIn = new ComboBox();
      this.txbKumiNum = new TextBox();
      this.dtpKumiDate = new DateTimePicker();
      this.lblBuiltIn = new Label();
      this.lblKumiDate = new Label();
      this.lblKumiNum = new Label();
      this.dtpDate = new DateTimePicker();
      this.txbNum = new TextBox();
      this.lblDate = new Label();
      this.lblNum = new Label();
      this.lblOrg = new Label();
      this.tpOptions = new TabPage();
      this.dgvParams = new DataGridView();
      this.tpService = new TabPage();
      this.tcntrlService = new TabControl();
      this.tpLSService = new TabPage();
      this.dgvLsService = new DataGridView();
      this.pnLsService = new Panel();
      this.btnPastTimeLsService = new Button();
      this.btnDelLsService = new Button();
      this.btnAddLsService = new Button();
      this.btnSaveLsService = new Button();
      this.ucLsSupplier1 = new UCLsSupplier();
      this.tpServiceParam = new TabPage();
      this.dgvServiceParam = new DataGridView();
      this.pnServiceParam = new Panel();
      this.lblService = new Label();
      this.cmbService = new ComboBox();
      this.tpSaldo = new TabPage();
      this.tcntrlBalance = new TabControl();
      this.tpBalance = new TabPage();
      this.dgvBalance = new DataGridView();
      this.cmDetail = new ContextMenuStrip(this.components);
      this.tsmiDetailCorrectRent = new ToolStripMenuItem();
      this.tsmiDetailAllRent = new ToolStripMenuItem();
      this.pnBalance = new Panel();
      this.lblNDS = new Label();
      this.lblNDSText = new Label();
      this.lblComp = new Label();
      this.lblCompText = new Label();
      this.lblSubsText = new Label();
      this.lblSubs = new Label();
      this.lblRentMonth = new Label();
      this.lblRentMonthText = new Label();
      this.lblOverText = new Label();
      this.lblOverpay = new Label();
      this.btnMainCorrect = new Button();
      this.lblOutText = new Label();
      this.lblPayText = new Label();
      this.lblPastMSPText = new Label();
      this.lblMSPText = new Label();
      this.lblPastText = new Label();
      this.lblOut = new Label();
      this.lblRentText = new Label();
      this.lblInText = new Label();
      this.lblPayment = new Label();
      this.lblMSPPast = new Label();
      this.lblMSP = new Label();
      this.lblRentPast = new Label();
      this.lblRent = new Label();
      this.lblIn = new Label();
      this.pnFilterReceiptType = new Panel();
      this.cbReceiptType = new ComboBox();
      this.lbReceiptType = new Label();
      this.tpBalancePeni = new TabPage();
      this.dgvPeni = new DataGridView();
      this.pnPeni = new Panel();
      this.label16 = new Label();
      this.lblRentFull = new Label();
      this.lblOverPeniText = new Label();
      this.lblOverPeni = new Label();
      this.btnCorrect = new Button();
      this.label1 = new Label();
      this.label2 = new Label();
      this.label10 = new Label();
      this.lblOutPeni = new Label();
      this.label12 = new Label();
      this.label13 = new Label();
      this.lblPayPeni = new Label();
      this.lblCorrectPeni = new Label();
      this.lblRentPeni = new Label();
      this.lblInPeni = new Label();
      this.pnFilterPeniReceiptType = new Panel();
      this.cbPeniReceiptType = new ComboBox();
      this.lblPeniReceiptType = new Label();
      this.tpSocSaldo = new TabPage();
      this.dgvSocSaldo = new DataGridView();
      this.pnSocSaldo = new Panel();
      this.btnMspCorrect = new Button();
      this.label9 = new Label();
      this.label11 = new Label();
      this.label14 = new Label();
      this.label15 = new Label();
      this.lblOutSoc = new Label();
      this.label17 = new Label();
      this.label18 = new Label();
      this.lblPaySoc = new Label();
      this.lblCorrSoc = new Label();
      this.lblPastSoc = new Label();
      this.lblRentSoc = new Label();
      this.lblInSoc = new Label();
      this.pnUslSoc = new Panel();
      this.cbMSPReceiptType = new ComboBox();
      this.lblMSPReceiptType = new Label();
      this.cmbPersonMSP = new ComboBox();
      this.cmbPerson = new ComboBox();
      this.lblPersonMSP = new Label();
      this.lblPerson = new Label();
      this.tpLodgers = new TabPage();
      this.dgvLodgers = new DataGridView();
      this.cmLodgers = new ContextMenuStrip(this.components);
      this.tsmiPutDownStatusOwner = new ToolStripMenuItem();
      this.tsmiRemoveStatusOwner = new ToolStripMenuItem();
      this.pnLodgers = new Panel();
      this.txtVrJil = new TextBox();
      this.txtJil = new TextBox();
      this.lblVrJil = new Label();
      this.lblJil = new Label();
      this.lblLodgers = new Label();
      this.tpOwners = new TabPage();
      this.dgvOwners = new DataGridView();
      this.cmOwners = new ContextMenuStrip(this.components);
      this.tsmiSelectOwners = new ToolStripMenuItem();
      this.pnOwners = new Panel();
      this.btnDelOwner = new Button();
      this.btnAddOwner = new Button();
      this.btnSaveOwner = new Button();
      this.lblOwnerDoc = new Label();
      this.dgvOwnerDoc = new DataGridView();
      this.cmOwnerDoc = new ContextMenuStrip(this.components);
      this.tsmiCopyRec = new ToolStripMenuItem();
      this.tsmiInsertRecord = new ToolStripMenuItem();
      this.tpQuality = new TabPage();
      this.dgvQuality = new DataGridView();
      this.tpAbsence = new TabPage();
      this.dgvAbsence = new DataGridView();
      this.tpMSP = new TabPage();
      this.tcntrlMsp = new TabControl();
      this.tpMSPRecipient = new TabPage();
      this.dgvMsp = new DataGridView();
      this.cmCopyToPasttime = new ContextMenuStrip(this.components);
      this.tsmiCopyRecordInPastTime = new ToolStripMenuItem();
      this.tpFamily = new TabPage();
      this.dgvFrFamily = new DataGridView();
      this.pnBtnFrFamily = new Panel();
      this.btnDelFrFamily = new Button();
      this.btnAddFrFamily = new Button();
      this.btnSaveFrFamily = new Button();
      this.pnLsFamily = new Panel();
      this.dgvLsFamily = new DataGridView();
      this.pnBtnLsFamily = new Panel();
      this.btnDelLsFamily = new Button();
      this.btnAddLsFamily = new Button();
      this.btnSaveLsFamily = new Button();
      this.tpMspDocument = new TabPage();
      this.flwlpMspDocument = new FlowLayoutPanel();
      this.pnMSPDoc = new Panel();
      this.btnDeletePersDoc = new Button();
      this.btnAddPersDoc = new Button();
      this.dgvMspDocPers = new DataGridView();
      this.tpPensDoc = new TabPage();
      this.flpnPensDoc = new FlowLayoutPanel();
      this.flpnPFR = new FlowLayoutPanel();
      this.pnPensDoc = new Panel();
      this.btnDelPensDoc = new Button();
      this.btnAddPensDoc = new Button();
      this.dgvPensDocPers = new DataGridView();
      this.tpCounters = new TabPage();
      this.tcntrlCounters = new TabControl();
      this.tpEvidence = new TabPage();
      this.dgvEvidence = new DataGridView();
      this.pnPeriod = new Panel();
      this.lblFiltrService = new Label();
      this.cmbFiltrService = new ComboBox();
      this.cmbPeriod = new ComboBox();
      this.lblPeriod = new Label();
      this.pnEvidence = new Panel();
      this.btnLoad = new Button();
      this.btnEdit = new Button();
      this.tpNumCounters = new TabPage();
      this.dgvCounters = new DataGridView();
      this.cmsCounters = new ContextMenuStrip(this.components);
      this.miCopy = new ToolStripMenuItem();
      this.pnCounter = new Panel();
      this.btnDelCounter = new Button();
      this.chbCounterArchive = new CheckBox();
      this.lblMainCounters = new Label();
      this.btnAddCounter = new Button();
      this.btnSaveCounter = new Button();
      this.btnArchive = new Button();
      this.dgvMainCounters = new DataGridView();
      this.tpAudit = new TabPage();
      this.dgvAudit = new DataGridView();
      this.tpSeal = new TabPage();
      this.dgvSeal = new DataGridView();
      this.tpDetailEvidence = new TabPage();
      this.dgvDetailEvidence = new DataGridView();
      this.pnDetailPeriod = new Panel();
      this.lblFiltrDetailService = new Label();
      this.cmbFiltrDetailService = new ComboBox();
      this.cmbDetailPeriod = new ComboBox();
      this.lblDetailPeriod = new Label();
      this.tpWorkDistribute = new TabPage();
      this.tpMessage = new TabPage();
      this.dgvMessage = new DataGridView();
      this.tpUZP = new TabPage();
      this.dgvPersonsWork = new DataGridView();
      this.pnPersonsWork = new Panel();
      this.btnAgreement = new Button();
      this.btnDelPerson = new Button();
      this.btnAddPerson = new Button();
      this.btnSavePerson = new Button();
      this.lblContract = new Label();
      this.dgvBond = new DataGridView();
      this.tpRentMSP = new TabPage();
      this.dgvParamForeign = new DataGridView();
      this.tpPayWork = new TabPage();
      this.panWDDataGrid = new Panel();
      this.splitContainerWD = new SplitContainer();
      this.dgvWorkDistribute = new DataGridView();
      this.Period = new Counters.Classes.MaskDateColumn();
      this.Service = new DataGridViewComboBoxColumn();
      this.Recipient = new DataGridViewComboBoxColumn();
      this.Performer = new DataGridViewComboBoxColumn();
      this.rents = new DataGridViewTextBoxColumn();
      this.ParamValue = new DataGridViewTextBoxColumn();
      this.Scheme = new DataGridViewTextBoxColumn();
      this.MonthCnt = new DataGridViewTextBoxColumn();
      this.Rate = new DataGridViewTextBoxColumn();
      this.Comission = new DataGridViewTextBoxColumn();
      this.RentCorrect = new DataGridViewTextBoxColumn();
      this.RentPercentCorrect = new DataGridViewTextBoxColumn();
      this.UName = new DataGridViewTextBoxColumn();
      this.DEdit = new DataGridViewTextBoxColumn();
      this.dgvWorkPayRent = new DataGridView();
      this.PeriodPR = new Counters.Classes.MaskDateColumn();
      this.RecipientPR = new DataGridViewComboBoxColumn();
      this.PerformerPR = new DataGridViewComboBoxColumn();
      this.BalanceIn = new DataGridViewTextBoxColumn();
      this.RentPercent = new DataGridViewTextBoxColumn();
      this.RentDept = new DataGridViewTextBoxColumn();
      this.RentPR = new DataGridViewTextBoxColumn();
      this.BalanceOut = new DataGridViewTextBoxColumn();
      this.RentComission = new DataGridViewTextBoxColumn();
      this.Pay = new DataGridViewTextBoxColumn();
      this.PayDept = new DataGridViewTextBoxColumn();
      this.PayPersent = new DataGridViewTextBoxColumn();
      this.PayComission = new DataGridViewTextBoxColumn();
      this.pnWDButtons = new Panel();
      this.pnWDFilters = new Panel();
      this.lblWDService = new Label();
      this.cmbWDServiceFilter = new ComboBox();
      this.cmbWDPeriod = new ComboBox();
      this.lblWDPeriod = new Label();
      this.cmLsService = new ContextMenuStrip(this.components);
      this.tsmiLsService = new ToolStripMenuItem();
      this.tsmiLsSupplier = new ToolStripMenuItem();
      this.cmBalance = new ContextMenuStrip(this.components);
      this.tsmiHandChangesCharges = new ToolStripMenuItem();
      this.tsmiHandChangesBenefits = new ToolStripMenuItem();
      this.tmr = new System.Windows.Forms.Timer(this.components);
      this.tmrLsService = new System.Windows.Forms.Timer(this.components);
      this.hp = new HelpProvider();
      this.tmrEvidence = new System.Windows.Forms.Timer(this.components);
      this.cmsEntrance = new ContextMenuStrip(this.components);
      this.reportPolicy = new Report();
      this.tmrArError = new System.Windows.Forms.Timer(this.components);
      this.dataGridViewTextBoxColumn1 = new DataGridViewTextBoxColumn();
      this.dataGridViewTextBoxColumn2 = new DataGridViewTextBoxColumn();
      this.dataGridViewTextBoxColumn3 = new DataGridViewTextBoxColumn();
      this.dataGridViewTextBoxColumn4 = new DataGridViewTextBoxColumn();
      this.dataGridViewTextBoxColumn5 = new DataGridViewTextBoxColumn();
      this.dataGridViewTextBoxColumn6 = new DataGridViewTextBoxColumn();
      this.dataGridViewTextBoxColumn7 = new DataGridViewTextBoxColumn();
      this.dataGridViewTextBoxColumn8 = new DataGridViewTextBoxColumn();
      this.dataGridViewTextBoxColumn9 = new DataGridViewTextBoxColumn();
      this.dataGridViewTextBoxColumn10 = new DataGridViewTextBoxColumn();
      this.dataGridViewTextBoxColumn11 = new DataGridViewTextBoxColumn();
      this.dataGridViewTextBoxColumn12 = new DataGridViewTextBoxColumn();
      this.dataGridViewTextBoxColumn13 = new DataGridViewTextBoxColumn();
      this.dataGridViewTextBoxColumn14 = new DataGridViewTextBoxColumn();
      this.dataGridViewTextBoxColumn15 = new DataGridViewTextBoxColumn();
      this.dataGridViewTextBoxColumn16 = new DataGridViewTextBoxColumn();
      this.dataGridViewTextBoxColumn17 = new DataGridViewTextBoxColumn();
      this.dataGridViewTextBoxColumn18 = new DataGridViewTextBoxColumn();
      this.dataGridViewTextBoxColumn19 = new DataGridViewTextBoxColumn();
      this.dataGridViewTextBoxColumn20 = new DataGridViewTextBoxColumn();
      this.contextMenuStrip1.SuspendLayout();
      this.pnButton.SuspendLayout();
      this.ts.SuspendLayout();
      this.cmsFind.SuspendLayout();
      this.pnUp.SuspendLayout();
      this.tcntrl.SuspendLayout();
      this.tpTitul.SuspendLayout();
      ((ISupportInitialize) this.dgvSupplierClient).BeginInit();
      this.pnInfoLsClinent.SuspendLayout();
      this.pnRemark.SuspendLayout();
      this.pnInfo.SuspendLayout();
      this.pnNumers.SuspendLayout();
      this.pnFIO.SuspendLayout();
      this.tpArenda.SuspendLayout();
      this.pnBill.SuspendLayout();
      this.splitContainer1.Panel1.SuspendLayout();
      this.splitContainer1.Panel2.SuspendLayout();
      this.splitContainer1.SuspendLayout();
      ((ISupportInitialize) this.dgvBill).BeginInit();
      ((ISupportInitialize) this.dvgArendaLS).BeginInit();
      this.pnDogovor.SuspendLayout();
      this.tpOptions.SuspendLayout();
      ((ISupportInitialize) this.dgvParams).BeginInit();
      this.tpService.SuspendLayout();
      this.tcntrlService.SuspendLayout();
      this.tpLSService.SuspendLayout();
      ((ISupportInitialize) this.dgvLsService).BeginInit();
      this.pnLsService.SuspendLayout();
      this.tpServiceParam.SuspendLayout();
      ((ISupportInitialize) this.dgvServiceParam).BeginInit();
      this.pnServiceParam.SuspendLayout();
      this.tpSaldo.SuspendLayout();
      this.tcntrlBalance.SuspendLayout();
      this.tpBalance.SuspendLayout();
      ((ISupportInitialize) this.dgvBalance).BeginInit();
      this.cmDetail.SuspendLayout();
      this.pnBalance.SuspendLayout();
      this.pnFilterReceiptType.SuspendLayout();
      this.tpBalancePeni.SuspendLayout();
      ((ISupportInitialize) this.dgvPeni).BeginInit();
      this.pnPeni.SuspendLayout();
      this.pnFilterPeniReceiptType.SuspendLayout();
      this.tpSocSaldo.SuspendLayout();
      ((ISupportInitialize) this.dgvSocSaldo).BeginInit();
      this.pnSocSaldo.SuspendLayout();
      this.pnUslSoc.SuspendLayout();
      this.tpLodgers.SuspendLayout();
      ((ISupportInitialize) this.dgvLodgers).BeginInit();
      this.cmLodgers.SuspendLayout();
      this.pnLodgers.SuspendLayout();
      this.tpOwners.SuspendLayout();
      ((ISupportInitialize) this.dgvOwners).BeginInit();
      this.cmOwners.SuspendLayout();
      this.pnOwners.SuspendLayout();
      ((ISupportInitialize) this.dgvOwnerDoc).BeginInit();
      this.cmOwnerDoc.SuspendLayout();
      this.tpQuality.SuspendLayout();
      ((ISupportInitialize) this.dgvQuality).BeginInit();
      this.tpAbsence.SuspendLayout();
      ((ISupportInitialize) this.dgvAbsence).BeginInit();
      this.tpMSP.SuspendLayout();
      this.tcntrlMsp.SuspendLayout();
      this.tpMSPRecipient.SuspendLayout();
      ((ISupportInitialize) this.dgvMsp).BeginInit();
      this.cmCopyToPasttime.SuspendLayout();
      this.tpFamily.SuspendLayout();
      ((ISupportInitialize) this.dgvFrFamily).BeginInit();
      this.pnBtnFrFamily.SuspendLayout();
      this.pnLsFamily.SuspendLayout();
      ((ISupportInitialize) this.dgvLsFamily).BeginInit();
      this.pnBtnLsFamily.SuspendLayout();
      this.tpMspDocument.SuspendLayout();
      this.pnMSPDoc.SuspendLayout();
      ((ISupportInitialize) this.dgvMspDocPers).BeginInit();
      this.tpPensDoc.SuspendLayout();
      this.pnPensDoc.SuspendLayout();
      ((ISupportInitialize) this.dgvPensDocPers).BeginInit();
      this.tpCounters.SuspendLayout();
      this.tcntrlCounters.SuspendLayout();
      this.tpEvidence.SuspendLayout();
      ((ISupportInitialize) this.dgvEvidence).BeginInit();
      this.pnPeriod.SuspendLayout();
      this.pnEvidence.SuspendLayout();
      this.tpNumCounters.SuspendLayout();
      ((ISupportInitialize) this.dgvCounters).BeginInit();
      this.cmsCounters.SuspendLayout();
      this.pnCounter.SuspendLayout();
      ((ISupportInitialize) this.dgvMainCounters).BeginInit();
      this.tpAudit.SuspendLayout();
      ((ISupportInitialize) this.dgvAudit).BeginInit();
      this.tpSeal.SuspendLayout();
      ((ISupportInitialize) this.dgvSeal).BeginInit();
      this.tpDetailEvidence.SuspendLayout();
      ((ISupportInitialize) this.dgvDetailEvidence).BeginInit();
      this.pnDetailPeriod.SuspendLayout();
      this.tpMessage.SuspendLayout();
      ((ISupportInitialize) this.dgvMessage).BeginInit();
      this.tpUZP.SuspendLayout();
      ((ISupportInitialize) this.dgvPersonsWork).BeginInit();
      this.pnPersonsWork.SuspendLayout();
      ((ISupportInitialize) this.dgvBond).BeginInit();
      this.tpRentMSP.SuspendLayout();
      ((ISupportInitialize) this.dgvParamForeign).BeginInit();
      this.tpPayWork.SuspendLayout();
      this.panWDDataGrid.SuspendLayout();
      this.splitContainerWD.Panel1.SuspendLayout();
      this.splitContainerWD.Panel2.SuspendLayout();
      this.splitContainerWD.SuspendLayout();
      ((ISupportInitialize) this.dgvWorkDistribute).BeginInit();
      ((ISupportInitialize) this.dgvWorkPayRent).BeginInit();
      this.pnWDFilters.SuspendLayout();
      this.cmLsService.SuspendLayout();
      this.cmBalance.SuspendLayout();
      this.reportPolicy.BeginInit();
      this.SuspendLayout();
      this.contextMenuStrip1.Items.AddRange(new ToolStripItem[4]
      {
        (ToolStripItem) this.tsmiCopyRecord,
        (ToolStripItem) this.tsmiDeleteRecord,
        (ToolStripItem) this.tsmiUpdateRecord,
        (ToolStripItem) this.tsmiInPastTime
      });
      this.contextMenuStrip1.Name = "contextMenuStrip1";
      this.contextMenuStrip1.Size = new Size(331, 92);
      this.tsmiCopyRecord.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiCopyRecord.Image = (Image) componentResourceManager.GetObject("tsmiCopyRecord.Image");
      this.tsmiCopyRecord.ImageAlign = ContentAlignment.MiddleLeft;
      this.tsmiCopyRecord.Name = "tsmiCopyRecord";
      this.tsmiCopyRecord.Size = new Size(330, 22);
      this.tsmiCopyRecord.Text = "Скопировать запись в выбранные объекты";
      this.tsmiCopyRecord.Click += new EventHandler(this.tsmiCopyRecord_Click);
      this.tsmiDeleteRecord.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiDeleteRecord.Image = (Image) componentResourceManager.GetObject("tsmiDeleteRecord.Image");
      this.tsmiDeleteRecord.Name = "tsmiDeleteRecord";
      this.tsmiDeleteRecord.Size = new Size(330, 22);
      this.tsmiDeleteRecord.Text = "Удалить запись из выбранных объектов";
      this.tsmiDeleteRecord.Click += new EventHandler(this.tsmiDeleteRecord_Click);
      this.tsmiUpdateRecord.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiUpdateRecord.Image = (Image) componentResourceManager.GetObject("tsmiUpdateRecord.Image");
      this.tsmiUpdateRecord.Name = "tsmiUpdateRecord";
      this.tsmiUpdateRecord.Size = new Size(330, 22);
      this.tsmiUpdateRecord.Text = "Обновить запись в выбранных объектах";
      this.tsmiUpdateRecord.Click += new EventHandler(this.tsmiCopyRecord_Click);
      this.tsmiInPastTime.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiInPastTime.Name = "tsmiInPastTime";
      this.tsmiInPastTime.Size = new Size(330, 22);
      this.tsmiInPastTime.Text = "Скопировать запись в прошлое время";
      this.tsmiInPastTime.Click += new EventHandler(this.tsmiInPastTime_Click);
      this.pnButton.Controls.Add((Control) this.progressBar1);
      this.pnButton.Controls.Add((Control) this.btnLast);
      this.pnButton.Controls.Add((Control) this.btnFirst);
      this.pnButton.Controls.Add((Control) this.btnNext);
      this.pnButton.Controls.Add((Control) this.btnPreview);
      this.pnButton.Controls.Add((Control) this.btnDelRecord);
      this.pnButton.Controls.Add((Control) this.btnAddRecord);
      this.pnButton.Controls.Add((Control) this.btnSave);
      this.pnButton.Controls.Add((Control) this.btnExit);
      this.pnButton.Dock = DockStyle.Bottom;
      this.pnButton.Location = new Point(0, 854);
      this.pnButton.Margin = new Padding(4);
      this.pnButton.Name = "pnButton";
      this.pnButton.Size = new Size(1365, 40);
      this.pnButton.TabIndex = 1;
      this.progressBar1.Location = new Point(3, 5);
      this.progressBar1.Name = "progressBar1";
      this.progressBar1.Size = new Size(117, 23);
      this.progressBar1.Step = 1;
      this.progressBar1.Style = ProgressBarStyle.Continuous;
      this.progressBar1.TabIndex = 2;
      this.progressBar1.Visible = false;
      this.btnLast.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.btnLast.FlatStyle = FlatStyle.Popup;
      this.btnLast.Image = (Image) componentResourceManager.GetObject("btnLast.Image");
      this.btnLast.Location = new Point(1209, 5);
      this.btnLast.Name = "btnLast";
      this.btnLast.Size = new Size(40, 30);
      this.btnLast.TabIndex = 20;
      this.btnLast.UseVisualStyleBackColor = true;
      this.btnLast.Click += new EventHandler(this.btnLast_Click);
      this.btnFirst.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.btnFirst.FlatStyle = FlatStyle.Popup;
      this.btnFirst.Image = (Image) componentResourceManager.GetObject("btnFirst.Image");
      this.btnFirst.Location = new Point(1076, 5);
      this.btnFirst.Name = "btnFirst";
      this.btnFirst.Size = new Size(40, 30);
      this.btnFirst.TabIndex = 19;
      this.btnFirst.UseVisualStyleBackColor = true;
      this.btnFirst.Click += new EventHandler(this.btnFirstClient_Click);
      this.btnNext.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.btnNext.FlatStyle = FlatStyle.Popup;
      this.btnNext.Image = (Image) componentResourceManager.GetObject("btnNext.Image");
      this.btnNext.Location = new Point(1163, 5);
      this.btnNext.Name = "btnNext";
      this.btnNext.Size = new Size(40, 30);
      this.btnNext.TabIndex = 18;
      this.btnNext.UseVisualStyleBackColor = true;
      this.btnNext.Click += new EventHandler(this.btnNextClient_Click);
      this.btnPreview.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.btnPreview.FlatStyle = FlatStyle.Popup;
      this.btnPreview.Image = (Image) componentResourceManager.GetObject("btnPreview.Image");
      this.btnPreview.Location = new Point(1122, 5);
      this.btnPreview.Name = "btnPreview";
      this.btnPreview.Size = new Size(35, 30);
      this.btnPreview.TabIndex = 17;
      this.btnPreview.UseVisualStyleBackColor = true;
      this.btnPreview.Click += new EventHandler(this.btnPrevClient_Click);
      this.btnDelRecord.Image = (Image) componentResourceManager.GetObject("btnDelRecord.Image");
      this.btnDelRecord.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnDelRecord.Location = new Point(254, 5);
      this.btnDelRecord.Name = "btnDelRecord";
      this.btnDelRecord.Size = new Size(96, 30);
      this.btnDelRecord.TabIndex = 3;
      this.btnDelRecord.Text = "Удалить";
      this.btnDelRecord.TextAlign = ContentAlignment.MiddleRight;
      this.btnDelRecord.UseVisualStyleBackColor = true;
      this.btnDelRecord.Click += new EventHandler(this.butDelRecord_Click);
      this.btnAddRecord.Image = (Image) componentResourceManager.GetObject("btnAddRecord.Image");
      this.btnAddRecord.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnAddRecord.Location = new Point(144, 5);
      this.btnAddRecord.Name = "btnAddRecord";
      this.btnAddRecord.Size = new Size(104, 30);
      this.btnAddRecord.TabIndex = 2;
      this.btnAddRecord.Text = "Добавить";
      this.btnAddRecord.TextAlign = ContentAlignment.MiddleRight;
      this.btnAddRecord.UseVisualStyleBackColor = true;
      this.btnAddRecord.Click += new EventHandler(this.btnAddRecord_Click);
      this.btnSave.Image = (Image) componentResourceManager.GetObject("btnSave.Image");
      this.btnSave.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnSave.Location = new Point(356, 5);
      this.btnSave.Name = "btnSave";
      this.btnSave.Size = new Size(105, 30);
      this.btnSave.TabIndex = 1;
      this.btnSave.Text = "Сохранить";
      this.btnSave.TextAlign = ContentAlignment.MiddleRight;
      this.btnSave.UseVisualStyleBackColor = true;
      this.btnSave.Click += new EventHandler(this.btnSave_Click);
      this.btnExit.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.btnExit.DialogResult = DialogResult.Cancel;
      this.btnExit.Image = (Image) componentResourceManager.GetObject("btnExit.Image");
      this.btnExit.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnExit.Location = new Point(1269, 5);
      this.btnExit.Margin = new Padding(4);
      this.btnExit.Name = "btnExit";
      this.btnExit.Size = new Size(83, 30);
      this.btnExit.TabIndex = 0;
      this.btnExit.Text = "Выход";
      this.btnExit.TextAlign = ContentAlignment.MiddleRight;
      this.btnExit.UseVisualStyleBackColor = true;
      this.btnExit.Click += new EventHandler(this.btnExit_Click);
      this.ts.AutoSize = false;
      this.ts.Dock = DockStyle.Left;
      this.ts.Font = new Font("Tahoma", 10f);
      this.ts.Items.AddRange(new ToolStripItem[11]
      {
        (ToolStripItem) this.tsbMultiPastTime,
        (ToolStripItem) this.tsbDictionary,
        (ToolStripItem) this.tsbReport,
        (ToolStripItem) this.tsbCalc,
        (ToolStripItem) this.tsbKvit,
        (ToolStripItem) this.tsbKvit2,
        (ToolStripItem) this.tsbPayment,
        (ToolStripItem) this.tsbFind,
        (ToolStripItem) this.tsbClient,
        (ToolStripItem) this.tsbCounter,
        (ToolStripItem) this.tsbStack
      });
      this.ts.Location = new Point(0, 0);
      this.ts.Name = "ts";
      this.ts.Size = new Size(120, 854);
      this.ts.TabIndex = 3;
      this.ts.Text = "toolStrip1";
      this.tsbMultiPastTime.Image = (Image) componentResourceManager.GetObject("tsbMultiPastTime.Image");
      this.tsbMultiPastTime.ImageScaling = ToolStripItemImageScaling.None;
      this.tsbMultiPastTime.ImageTransparentColor = Color.Magenta;
      this.tsbMultiPastTime.Name = "tsbMultiPastTime";
      this.tsbMultiPastTime.Size = new Size(118, 69);
      this.tsbMultiPastTime.Text = "Прошлое время";
      this.tsbMultiPastTime.TextImageRelation = TextImageRelation.ImageAboveText;
      this.tsbMultiPastTime.Click += new EventHandler(this.toolStripButton1_Click);
      this.tsbDictionary.BackColor = SystemColors.Control;
      this.tsbDictionary.DropDownItems.AddRange(new ToolStripItem[22]
      {
        (ToolStripItem) this.tsmiTariff,
        (ToolStripItem) this.tsmiFacilities,
        (ToolStripItem) this.tsmiAbsence,
        (ToolStripItem) this.tsmiQuality,
        (ToolStripItem) this.tsmiSourcesPayments,
        (ToolStripItem) this.tsmiPurposePayment,
        (ToolStripItem) this.tsmiParameters,
        (ToolStripItem) this.tsmiTypeDocuments,
        (ToolStripItem) this.tsmiTypeCounters,
        (ToolStripItem) this.tsmiSuppliers,
        (ToolStripItem) this.tsmiReceipt,
        (ToolStripItem) this.tsmiServiceOrganizations,
        (ToolStripItem) this.tsmiService,
        (ToolStripItem) this.tsmiBanks,
        (ToolStripItem) this.tsmiOrganizations,
        (ToolStripItem) this.tsmiTypeLocationCounter,
        (ToolStripItem) this.tsmiTypeSeals,
        (ToolStripItem) this.tsmiTypeBindingServices,
        (ToolStripItem) this.tsmiBindingServices,
        (ToolStripItem) this.tsmiTypeNoteBook,
        (ToolStripItem) this.tsmiGuilds,
        (ToolStripItem) this.tsmiContractOrganization
      });
      this.tsbDictionary.Image = (Image) componentResourceManager.GetObject("tsbDictionary.Image");
      this.tsbDictionary.ImageScaling = ToolStripItemImageScaling.None;
      this.tsbDictionary.ImageTransparentColor = Color.Magenta;
      this.tsbDictionary.Name = "tsbDictionary";
      this.tsbDictionary.Size = new Size(118, 69);
      this.tsbDictionary.Text = "Справочники";
      this.tsbDictionary.TextImageRelation = TextImageRelation.ImageAboveText;
      this.tsmiTariff.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiTariff.Name = "tsmiTariff";
      this.tsmiTariff.Size = new Size(261, 22);
      this.tsmiTariff.Text = "Тарифы";
      this.tsmiTariff.Click += new EventHandler(this.TsmiTariff_Click);
      this.tsmiFacilities.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiFacilities.Name = "tsmiFacilities";
      this.tsmiFacilities.Size = new Size(261, 22);
      this.tsmiFacilities.Text = "Льготы";
      this.tsmiFacilities.Click += new EventHandler(this.TsmiFacilities_Click);
      this.tsmiAbsence.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiAbsence.Name = "tsmiAbsence";
      this.tsmiAbsence.Size = new Size(261, 22);
      this.tsmiAbsence.Text = "Отсутствие";
      this.tsmiAbsence.Click += new EventHandler(this.TsmiAbsence_Click);
      this.tsmiQuality.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiQuality.Name = "tsmiQuality";
      this.tsmiQuality.Size = new Size(261, 22);
      this.tsmiQuality.Text = "Качество";
      this.tsmiQuality.Click += new EventHandler(this.TsmiQuality_Click);
      this.tsmiSourcesPayments.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiSourcesPayments.Name = "tsmiSourcesPayments";
      this.tsmiSourcesPayments.Size = new Size(261, 22);
      this.tsmiSourcesPayments.Text = "Источники платежей";
      this.tsmiSourcesPayments.Click += new EventHandler(this.TsmiSourcesPayments_Click);
      this.tsmiPurposePayment.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiPurposePayment.Name = "tsmiPurposePayment";
      this.tsmiPurposePayment.Size = new Size(261, 22);
      this.tsmiPurposePayment.Text = "Назначение платежей ";
      this.tsmiPurposePayment.Click += new EventHandler(this.TsmiPurposePayment_Click);
      this.tsmiParameters.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiParameters.Name = "tsmiParameters";
      this.tsmiParameters.Size = new Size(261, 22);
      this.tsmiParameters.Text = "Параметры";
      this.tsmiParameters.Click += new EventHandler(this.TsmiParameters_Click);
      this.tsmiTypeDocuments.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiTypeDocuments.Name = "tsmiTypeDocuments";
      this.tsmiTypeDocuments.Size = new Size(261, 22);
      this.tsmiTypeDocuments.Text = "Виды документов";
      this.tsmiTypeDocuments.Click += new EventHandler(this.TsmiTypeDocuments_Click);
      this.tsmiTypeCounters.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiTypeCounters.Name = "tsmiTypeCounters";
      this.tsmiTypeCounters.Size = new Size(261, 22);
      this.tsmiTypeCounters.Text = "Типы счетчиков";
      this.tsmiTypeCounters.Click += new EventHandler(this.TsmiTypeCounters_Click);
      this.tsmiSuppliers.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiSuppliers.Name = "tsmiSuppliers";
      this.tsmiSuppliers.Size = new Size(261, 22);
      this.tsmiSuppliers.Text = "Поставщики";
      this.tsmiSuppliers.Click += new EventHandler(this.TsmiSuppliers_Click);
      this.tsmiReceipt.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiReceipt.Name = "tsmiReceipt";
      this.tsmiReceipt.Size = new Size(261, 22);
      this.tsmiReceipt.Text = "Квитанция";
      this.tsmiReceipt.Click += new EventHandler(this.TsmiReceipt_Click);
      this.tsmiServiceOrganizations.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiServiceOrganizations.Name = "tsmiServiceOrganizations";
      this.tsmiServiceOrganizations.Size = new Size(261, 22);
      this.tsmiServiceOrganizations.Text = "Услуги организаций";
      this.tsmiServiceOrganizations.Click += new EventHandler(this.TsmiServiceOrganizations_Click);
      this.tsmiService.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiService.Name = "tsmiService";
      this.tsmiService.Size = new Size(261, 22);
      this.tsmiService.Text = "Службы";
      this.tsmiService.Click += new EventHandler(this.TsmiService_Click);
      this.tsmiBanks.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiBanks.Name = "tsmiBanks";
      this.tsmiBanks.Size = new Size(261, 22);
      this.tsmiBanks.Text = "Банки";
      this.tsmiBanks.Click += new EventHandler(this.TsmiBanks_Click);
      this.tsmiOrganizations.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiOrganizations.Name = "tsmiOrganizations";
      this.tsmiOrganizations.Size = new Size(261, 22);
      this.tsmiOrganizations.Text = "Организации";
      this.tsmiOrganizations.Click += new EventHandler(this.TsmiOrganizations_Click);
      this.tsmiTypeLocationCounter.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiTypeLocationCounter.Name = "tsmiTypeLocationCounter";
      this.tsmiTypeLocationCounter.Size = new Size(261, 22);
      this.tsmiTypeLocationCounter.Text = "Типы расположения счетчиков";
      this.tsmiTypeLocationCounter.Click += new EventHandler(this.TsmiTypeLocationCounter_Click);
      this.tsmiTypeSeals.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiTypeSeals.Name = "tsmiTypeSeals";
      this.tsmiTypeSeals.Size = new Size(261, 22);
      this.tsmiTypeSeals.Text = "Типы пломб на счетчиках";
      this.tsmiTypeSeals.Click += new EventHandler(this.TsmiTypeSeals_Click);
      this.tsmiTypeBindingServices.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiTypeBindingServices.Name = "tsmiTypeBindingServices";
      this.tsmiTypeBindingServices.Size = new Size(261, 22);
      this.tsmiTypeBindingServices.Text = "Типы связывания услуг";
      this.tsmiTypeBindingServices.Visible = false;
      this.tsmiTypeBindingServices.Click += new EventHandler(this.TsmiTypeBindingServices_Click);
      this.tsmiBindingServices.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiBindingServices.Name = "tsmiBindingServices";
      this.tsmiBindingServices.Size = new Size(261, 22);
      this.tsmiBindingServices.Text = "Связанные услуги";
      this.tsmiBindingServices.Click += new EventHandler(this.TsmiBindingServices_Click);
      this.tsmiTypeNoteBook.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiTypeNoteBook.Name = "tsmiTypeNoteBook";
      this.tsmiTypeNoteBook.Size = new Size(261, 22);
      this.tsmiTypeNoteBook.Text = "Типы записей в блокноте";
      this.tsmiTypeNoteBook.Click += new EventHandler(this.TsmiTypeNoteBook_Click);
      this.tsmiGuilds.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiGuilds.Name = "tsmiGuilds";
      this.tsmiGuilds.Size = new Size(261, 22);
      this.tsmiGuilds.Text = "Цехи";
      this.tsmiGuilds.Click += new EventHandler(this.TsmiGuilds_Click);
      this.tsmiContractOrganization.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiContractOrganization.Name = "tsmiContractOrganization";
      this.tsmiContractOrganization.Size = new Size(261, 22);
      this.tsmiContractOrganization.Text = "Договоры организаций";
      this.tsmiContractOrganization.Click += new EventHandler(this.TsmiContractOrganization_Click);
      this.tsbReport.AutoSize = false;
      this.tsbReport.DropDownItems.AddRange(new ToolStripItem[4]
      {
        (ToolStripItem) this.tsmiDischarge,
        (ToolStripItem) this.tsmiDetailAccounts,
        (ToolStripItem) this.tsmiDogovor,
        (ToolStripItem) this.tsmiLibraryReport
      });
      this.tsbReport.Image = (Image) componentResourceManager.GetObject("tsbReport.Image");
      this.tsbReport.ImageScaling = ToolStripItemImageScaling.None;
      this.tsbReport.ImageTransparentColor = Color.Magenta;
      this.tsbReport.Name = "tsbReport";
      this.tsbReport.Size = new Size(118, 69);
      this.tsbReport.Text = "Отчеты";
      this.tsbReport.TextImageRelation = TextImageRelation.ImageAboveText;
      this.tsmiDischarge.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiDischarge.Name = "tsmiDischarge";
      this.tsmiDischarge.Size = new Size(237, 22);
      this.tsmiDischarge.Tag = (object) "29";
      this.tsmiDischarge.Text = "Выписка из лицевого счета";
      this.tsmiDischarge.Click += new EventHandler(this.TsmiDischarge_Click);
      this.tsmiDetailAccounts.DropDownItems.AddRange(new ToolStripItem[2]
      {
        (ToolStripItem) this.сВыборкойПениToolStripMenuItem,
        (ToolStripItem) this.сНачислениемПениToolStripMenuItem
      });
      this.tsmiDetailAccounts.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiDetailAccounts.Name = "tsmiDetailAccounts";
      this.tsmiDetailAccounts.Size = new Size(237, 22);
      this.tsmiDetailAccounts.Text = "Сведения по счету";
      this.сВыборкойПениToolStripMenuItem.Name = "сВыборкойПениToolStripMenuItem";
      this.сВыборкойПениToolStripMenuItem.Size = new Size(197, 22);
      this.сВыборкойПениToolStripMenuItem.Tag = (object) "78";
      this.сВыборкойПениToolStripMenuItem.Text = "С выборкой пени";
      this.сВыборкойПениToolStripMenuItem.Click += new EventHandler(this.TsmiDischarge_Click);
      this.сНачислениемПениToolStripMenuItem.Name = "сНачислениемПениToolStripMenuItem";
      this.сНачислениемПениToolStripMenuItem.Size = new Size(197, 22);
      this.сНачислениемПениToolStripMenuItem.Tag = (object) "77";
      this.сНачислениемПениToolStripMenuItem.Text = "С начислением пени";
      this.сНачислениемПениToolStripMenuItem.Click += new EventHandler(this.TsmiDischarge_Click);
      this.tsmiDogovor.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiDogovor.Name = "tsmiDogovor";
      this.tsmiDogovor.Size = new Size(237, 22);
      this.tsmiDogovor.Tag = (object) "135";
      this.tsmiDogovor.Text = "Договор";
      this.tsmiDogovor.Click += new EventHandler(this.TsmiDischarge_Click);
      this.tsmiLibraryReport.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiLibraryReport.Name = "tsmiLibraryReport";
      this.tsmiLibraryReport.Size = new Size(237, 22);
      this.tsmiLibraryReport.Tag = (object) "0";
      this.tsmiLibraryReport.Text = "Библиотека отчетов";
      this.tsmiLibraryReport.Click += new EventHandler(this.TsmiDischarge_Click);
      this.tsbCalc.Image = (Image) componentResourceManager.GetObject("tsbCalc.Image");
      this.tsbCalc.ImageScaling = ToolStripItemImageScaling.None;
      this.tsbCalc.ImageTransparentColor = Color.Magenta;
      this.tsbCalc.Name = "tsbCalc";
      this.tsbCalc.Size = new Size(118, 69);
      this.tsbCalc.Text = "Расчёт";
      this.tsbCalc.TextImageRelation = TextImageRelation.ImageAboveText;
      this.tsbCalc.Click += new EventHandler(this.tsbCalc_Click);
      this.tsbKvit.Image = (Image) componentResourceManager.GetObject("tsbKvit.Image");
      this.tsbKvit.ImageScaling = ToolStripItemImageScaling.None;
      this.tsbKvit.ImageTransparentColor = Color.Magenta;
      this.tsbKvit.Name = "tsbKvit";
      this.tsbKvit.Size = new Size(118, 69);
      this.tsbKvit.Text = "Квитанция";
      this.tsbKvit.TextAlign = ContentAlignment.BottomCenter;
      this.tsbKvit.TextImageRelation = TextImageRelation.ImageAboveText;
      this.tsbKvit.Visible = false;
      this.tsbKvit.Click += new EventHandler(this.tsbKvit_Click);
      this.tsbKvit2.DropDownItems.AddRange(new ToolStripItem[2]
      {
        (ToolStripItem) this.tsmiOldReceipt,
        (ToolStripItem) this.tsmiNewReceipt
      });
      this.tsbKvit2.Image = (Image) Resources.notepad;
      this.tsbKvit2.ImageScaling = ToolStripItemImageScaling.None;
      this.tsbKvit2.ImageTransparentColor = Color.Magenta;
      this.tsbKvit2.Name = "tsbKvit2";
      this.tsbKvit2.Size = new Size(118, 69);
      this.tsbKvit2.Text = "Квитанция";
      this.tsbKvit2.TextAlign = ContentAlignment.BottomCenter;
      this.tsbKvit2.TextImageRelation = TextImageRelation.ImageAboveText;
      this.tsmiOldReceipt.Name = "tsmiOldReceipt";
      this.tsmiOldReceipt.Size = new Size(162, 22);
      this.tsmiOldReceipt.Text = "Прежняя";
      this.tsmiOldReceipt.Click += new EventHandler(this.tsbKvit_Click);
      this.tsmiNewReceipt.Name = "tsmiNewReceipt";
      this.tsmiNewReceipt.Size = new Size(162, 22);
      this.tsmiNewReceipt.Tag = (object) "32";
      this.tsmiNewReceipt.Text = "Обновленная";
      this.tsmiNewReceipt.Click += new EventHandler(this.TsmiDischarge_Click);
      this.tsbPayment.Image = (Image) componentResourceManager.GetObject("tsbPayment.Image");
      this.tsbPayment.ImageScaling = ToolStripItemImageScaling.None;
      this.tsbPayment.ImageTransparentColor = Color.Magenta;
      this.tsbPayment.Name = "tsbPayment";
      this.tsbPayment.Size = new Size(118, 69);
      this.tsbPayment.Text = "Платежи";
      this.tsbPayment.TextImageRelation = TextImageRelation.ImageAboveText;
      this.tsbPayment.Click += new EventHandler(this.tsbPayment_Click);
      this.tsbFind.DropDown = (ToolStripDropDown) this.cmsFind;
      this.tsbFind.Image = (Image) Resources.Search;
      this.tsbFind.ImageScaling = ToolStripItemImageScaling.None;
      this.tsbFind.ImageTransparentColor = Color.Magenta;
      this.tsbFind.Name = "tsbFind";
      this.tsbFind.Size = new Size(118, 69);
      this.tsbFind.Text = "Поиск";
      this.tsbFind.TextImageRelation = TextImageRelation.ImageAboveText;
      this.cmsFind.Items.AddRange(new ToolStripItem[3]
      {
        (ToolStripItem) this.tsmiPersonalSearch,
        (ToolStripItem) this.tsmiFlatSearch,
        (ToolStripItem) this.tsmiContractSearch
      });
      this.cmsFind.Name = "cmsFind";
      this.cmsFind.OwnerItem = (ToolStripItem) this.tsbFind;
      this.cmsFind.Size = new Size(190, 70);
      this.tsmiPersonalSearch.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiPersonalSearch.Name = "tsmiPersonalSearch";
      this.tsmiPersonalSearch.ShortcutKeys = Keys.F2;
      this.tsmiPersonalSearch.Size = new Size(189, 22);
      this.tsmiPersonalSearch.Text = "По лицевому";
      this.tsmiPersonalSearch.Click += new EventHandler(this.tsmiPersonalSearch_Click);
      this.tsmiFlatSearch.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiFlatSearch.Name = "tsmiFlatSearch";
      this.tsmiFlatSearch.ShortcutKeys = Keys.F3;
      this.tsmiFlatSearch.Size = new Size(189, 22);
      this.tsmiFlatSearch.Text = "По квартире";
      this.tsmiFlatSearch.Click += new EventHandler(this.tsmiFlatSearch_Click);
      this.tsmiContractSearch.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiContractSearch.Name = "tsmiContractSearch";
      this.tsmiContractSearch.ShortcutKeys = Keys.F6;
      this.tsmiContractSearch.Size = new Size(189, 22);
      this.tsmiContractSearch.Text = "Поиск договора";
      this.tsmiContractSearch.Click += new EventHandler(this.tsmiContractSearch_Click);
      this.tsbClient.DropDownItems.AddRange(new ToolStripItem[5]
      {
        (ToolStripItem) this.tsmiCreateClientsNum,
        (ToolStripItem) this.tsmiDeleteClient,
        (ToolStripItem) this.tsmiDivide,
        (ToolStripItem) this.tsmiUnit,
        (ToolStripItem) this.tsmiClose
      });
      this.tsbClient.Image = (Image) componentResourceManager.GetObject("tsbClient.Image");
      this.tsbClient.ImageScaling = ToolStripItemImageScaling.None;
      this.tsbClient.ImageTransparentColor = Color.Magenta;
      this.tsbClient.Name = "tsbClient";
      this.tsbClient.Size = new Size(118, 69);
      this.tsbClient.Text = "Лицевой";
      this.tsbClient.TextImageRelation = TextImageRelation.ImageAboveText;
      this.tsmiCreateClientsNum.DropDownItems.AddRange(new ToolStripItem[3]
      {
        (ToolStripItem) this.tsmiLsKvartplata,
        (ToolStripItem) this.tsmiLsArenda,
        (ToolStripItem) this.tsmiLsOverhaul
      });
      this.tsmiCreateClientsNum.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiCreateClientsNum.Name = "tsmiCreateClientsNum";
      this.tsmiCreateClientsNum.Size = new Size(147, 22);
      this.tsmiCreateClientsNum.Text = "Создать";
      this.tsmiCreateClientsNum.Click += new EventHandler(this.tsmiCreateClientsNum_Click);
      this.tsmiLsKvartplata.Name = "tsmiLsKvartplata";
      this.tsmiLsKvartplata.Size = new Size(200, 22);
      this.tsmiLsKvartplata.Tag = (object) "100";
      this.tsmiLsKvartplata.Text = "Лицевой квартплаты";
      this.tsmiLsKvartplata.Click += new EventHandler(this.tsmiLsKvartplata_Click);
      this.tsmiLsArenda.Name = "tsmiLsArenda";
      this.tsmiLsArenda.Size = new Size(200, 22);
      this.tsmiLsArenda.Tag = (object) "110";
      this.tsmiLsArenda.Text = "Лицевой аренды";
      this.tsmiLsArenda.Click += new EventHandler(this.tsmiLsKvartplata_Click);
      this.tsmiLsOverhaul.Name = "tsmiLsOverhaul";
      this.tsmiLsOverhaul.Size = new Size(200, 22);
      this.tsmiLsOverhaul.Text = "Лицевой капремонта";
      this.tsmiLsOverhaul.Visible = false;
      this.tsmiLsOverhaul.Click += new EventHandler(this.tsmiLsOverhaul_Click);
      this.tsmiDeleteClient.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiDeleteClient.Name = "tsmiDeleteClient";
      this.tsmiDeleteClient.Size = new Size(147, 22);
      this.tsmiDeleteClient.Text = "Удалить";
      this.tsmiDeleteClient.Click += new EventHandler(this.tsmiDeleteClient_Click);
      this.tsmiDivide.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiDivide.Name = "tsmiDivide";
      this.tsmiDivide.Size = new Size(147, 22);
      this.tsmiDivide.Tag = (object) "-1";
      this.tsmiDivide.Text = "Разделить";
      this.tsmiDivide.Click += new EventHandler(this.TsmiDischarge_Click);
      this.tsmiUnit.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiUnit.Name = "tsmiUnit";
      this.tsmiUnit.Size = new Size(147, 22);
      this.tsmiUnit.Tag = (object) "-2";
      this.tsmiUnit.Text = "Объединить";
      this.tsmiUnit.Click += new EventHandler(this.TsmiDischarge_Click);
      this.tsmiClose.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiClose.Name = "tsmiClose";
      this.tsmiClose.Size = new Size(147, 22);
      this.tsmiClose.Text = "Закрыть";
      this.tsmiClose.Click += new EventHandler(this.tsmiClose_Click);
      this.tsbCounter.Font = new Font("Tahoma", 10f);
      this.tsbCounter.Image = (Image) componentResourceManager.GetObject("tsbCounter.Image");
      this.tsbCounter.ImageScaling = ToolStripItemImageScaling.None;
      this.tsbCounter.ImageTransparentColor = Color.Magenta;
      this.tsbCounter.Name = "tsbCounter";
      this.tsbCounter.Size = new Size(118, 69);
      this.tsbCounter.Text = "Счетчики";
      this.tsbCounter.TextImageRelation = TextImageRelation.ImageAboveText;
      this.tsbCounter.Click += new EventHandler(this.tsbCounters_Click);
      this.tsbStack.Image = (Image) Resources.network48;
      this.tsbStack.ImageScaling = ToolStripItemImageScaling.None;
      this.tsbStack.ImageTransparentColor = Color.Magenta;
      this.tsbStack.Name = "tsbStack";
      this.tsbStack.Size = new Size(118, 69);
      this.tsbStack.Text = "Внешние данные";
      this.tsbStack.TextImageRelation = TextImageRelation.ImageAboveText;
      this.tsbStack.Click += new EventHandler(this.tsbStack_Click);
      this.pnUp.Controls.Add((Control) this.lblArError);
      this.pnUp.Controls.Add((Control) this.cbShowAnotherOrg);
      this.pnUp.Controls.Add((Control) this.lblEdit);
      this.pnUp.Controls.Add((Control) this.lblPastTimeLsService);
      this.pnUp.Controls.Add((Control) this.mpCurrentPeriod);
      this.pnUp.Controls.Add((Control) this.chbArhiv);
      this.pnUp.Controls.Add((Control) this.lblPastTime);
      this.pnUp.Controls.Add((Control) this.lblp3Address);
      this.pnUp.Controls.Add((Control) this.lblp3FIO);
      this.pnUp.Controls.Add((Control) this.lblp3LsClient);
      this.pnUp.Controls.Add((Control) this.lblMonthCLosed);
      this.pnUp.Controls.Add((Control) this.lblClosed);
      this.pnUp.Dock = DockStyle.Top;
      this.pnUp.Location = new Point(120, 0);
      this.pnUp.Name = "pnUp";
      this.pnUp.Size = new Size(1245, 98);
      this.pnUp.TabIndex = 4;
      this.lblArError.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.lblArError.AutoSize = true;
      this.lblArError.BackColor = SystemColors.Control;
      this.lblArError.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblArError.ForeColor = Color.DarkOrange;
      this.lblArError.Location = new Point(1031, 76);
      this.lblArError.Name = "lblArError";
      this.lblArError.Size = new Size(183, 16);
      this.lblArError.TabIndex = 21;
      this.lblArError.Text = "Режим редактирования";
      this.lblArError.Visible = false;
      this.cbShowAnotherOrg.AutoSize = true;
      this.cbShowAnotherOrg.Enabled = false;
      this.cbShowAnotherOrg.Location = new Point(8, 74);
      this.cbShowAnotherOrg.Name = "cbShowAnotherOrg";
      this.cbShowAnotherOrg.Size = new Size(339, 21);
      this.cbShowAnotherOrg.TabIndex = 20;
      this.cbShowAnotherOrg.Text = "Показать информацию сторонних организаций";
      this.cbShowAnotherOrg.UseVisualStyleBackColor = true;
      this.cbShowAnotherOrg.CheckedChanged += new EventHandler(this.cbShowAnotherOrg_CheckedChanged);
      this.lblEdit.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.lblEdit.AutoSize = true;
      this.lblEdit.BackColor = SystemColors.Control;
      this.lblEdit.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblEdit.ForeColor = Color.DarkOrange;
      this.lblEdit.Location = new Point(1031, 56);
      this.lblEdit.Name = "lblEdit";
      this.lblEdit.Size = new Size(183, 16);
      this.lblEdit.TabIndex = 19;
      this.lblEdit.Text = "Режим редактирования";
      this.lblEdit.Visible = false;
      this.lblPastTimeLsService.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.lblPastTimeLsService.AutoSize = true;
      this.lblPastTimeLsService.BackColor = Color.Transparent;
      this.lblPastTimeLsService.FlatStyle = FlatStyle.Popup;
      this.lblPastTimeLsService.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblPastTimeLsService.ForeColor = SystemColors.Control;
      this.lblPastTimeLsService.Location = new Point(1031, 60);
      this.lblPastTimeLsService.Name = "lblPastTimeLsService";
      this.lblPastTimeLsService.Size = new Size(199, 16);
      this.lblPastTimeLsService.TabIndex = 17;
      this.lblPastTimeLsService.Text = "Режим прошлого времени";
      this.mpCurrentPeriod.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.mpCurrentPeriod.CustomFormat = "MMMM yyyy";
      this.mpCurrentPeriod.Format = DateTimePickerFormat.Custom;
      this.mpCurrentPeriod.Location = new Point(1098, 6);
      this.mpCurrentPeriod.Name = "mpCurrentPeriod";
      this.mpCurrentPeriod.OldMonth = 0;
      this.mpCurrentPeriod.ShowUpDown = true;
      this.mpCurrentPeriod.Size = new Size(140, 23);
      this.mpCurrentPeriod.TabIndex = 18;
      this.mpCurrentPeriod.ValueChanged += new EventHandler(this.dtmpCurrentPeriod_ValueChanged);
      this.chbArhiv.AutoSize = true;
      this.chbArhiv.Location = new Point(8, 55);
      this.chbArhiv.Name = "chbArhiv";
      this.chbArhiv.Size = new Size(65, 21);
      this.chbArhiv.TabIndex = 17;
      this.chbArhiv.Text = "Архив";
      this.chbArhiv.UseVisualStyleBackColor = true;
      this.chbArhiv.CheckedChanged += new EventHandler(this.chbArhiv_CheckedChanged);
      this.lblPastTime.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.lblPastTime.AutoSize = true;
      this.lblPastTime.FlatStyle = FlatStyle.Popup;
      this.lblPastTime.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblPastTime.ForeColor = SystemColors.ButtonFace;
      this.lblPastTime.Location = new Point(1031, 60);
      this.lblPastTime.Name = "lblPastTime";
      this.lblPastTime.Size = new Size(199, 16);
      this.lblPastTime.TabIndex = 16;
      this.lblPastTime.Text = "Режим прошлого времени";
      this.lblp3Address.AutoSize = true;
      this.lblp3Address.Font = new Font("Microsoft Sans Serif", 10f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblp3Address.Location = new Point(28, 36);
      this.lblp3Address.Name = "lblp3Address";
      this.lblp3Address.Size = new Size(0, 17);
      this.lblp3Address.TabIndex = 15;
      this.lblp3FIO.AutoSize = true;
      this.lblp3FIO.Font = new Font("Microsoft Sans Serif", 10f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblp3FIO.Location = new Point(125, 12);
      this.lblp3FIO.Name = "lblp3FIO";
      this.lblp3FIO.Size = new Size(0, 17);
      this.lblp3FIO.TabIndex = 14;
      this.lblp3LsClient.AutoSize = true;
      this.lblp3LsClient.Font = new Font("Microsoft Sans Serif", 10f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblp3LsClient.Location = new Point(28, 12);
      this.lblp3LsClient.Name = "lblp3LsClient";
      this.lblp3LsClient.Size = new Size(0, 17);
      this.lblp3LsClient.TabIndex = 13;
      this.lblMonthCLosed.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.lblMonthCLosed.AutoSize = true;
      this.lblMonthCLosed.Location = new Point(1168, 36);
      this.lblMonthCLosed.Name = "lblMonthCLosed";
      this.lblMonthCLosed.Size = new Size(46, 17);
      this.lblMonthCLosed.TabIndex = 12;
      this.lblMonthCLosed.Text = "label2";
      this.lblClosed.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.lblClosed.AutoSize = true;
      this.lblClosed.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblClosed.Location = new Point(1031, 36);
      this.lblClosed.Margin = new Padding(4, 0, 4, 0);
      this.lblClosed.Name = "lblClosed";
      this.lblClosed.Size = new Size(139, 16);
      this.lblClosed.TabIndex = 11;
      this.lblClosed.Text = "Закрытый период";
      this.tcntrl.Controls.Add((Control) this.tpTitul);
      this.tcntrl.Controls.Add((Control) this.tpArenda);
      this.tcntrl.Controls.Add((Control) this.tpOptions);
      this.tcntrl.Controls.Add((Control) this.tpService);
      this.tcntrl.Controls.Add((Control) this.tpSaldo);
      this.tcntrl.Controls.Add((Control) this.tpLodgers);
      this.tcntrl.Controls.Add((Control) this.tpOwners);
      this.tcntrl.Controls.Add((Control) this.tpQuality);
      this.tcntrl.Controls.Add((Control) this.tpAbsence);
      this.tcntrl.Controls.Add((Control) this.tpMSP);
      this.tcntrl.Controls.Add((Control) this.tpCounters);
      this.tcntrl.Controls.Add((Control) this.tpMessage);
      this.tcntrl.Controls.Add((Control) this.tpUZP);
      this.tcntrl.Controls.Add((Control) this.tpRentMSP);
      this.tcntrl.Controls.Add((Control) this.tpPayWork);
      this.tcntrl.Dock = DockStyle.Fill;
      this.tcntrl.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.hp.SetHelpKeyword((Control) this.tcntrl, "kv41.html");
      this.hp.SetHelpNavigator((Control) this.tcntrl, HelpNavigator.Topic);
      this.tcntrl.Location = new Point(120, 98);
      this.tcntrl.Margin = new Padding(4);
      this.tcntrl.Multiline = true;
      this.tcntrl.Name = "tcntrl";
      this.tcntrl.SelectedIndex = 0;
      this.hp.SetShowHelp((Control) this.tcntrl, true);
      this.tcntrl.Size = new Size(1245, 756);
      this.tcntrl.TabIndex = 5;
      this.tcntrl.SelectedIndexChanged += new EventHandler(this.tabControl1_SelectedIndexChanged);
      this.tpTitul.BackColor = Color.AliceBlue;
      this.tpTitul.Controls.Add((Control) this.dgvSupplierClient);
      this.tpTitul.Controls.Add((Control) this.label19);
      this.tpTitul.Controls.Add((Control) this.pnPolicy);
      this.tpTitul.Controls.Add((Control) this.pnInfoLsClinent);
      this.tpTitul.Controls.Add((Control) this.pnRemark);
      this.tpTitul.Controls.Add((Control) this.pnInfo);
      this.tpTitul.Controls.Add((Control) this.pnNumers);
      this.tpTitul.Controls.Add((Control) this.pnFIO);
      this.hp.SetHelpKeyword((Control) this.tpTitul, "");
      this.tpTitul.Location = new Point(4, 46);
      this.tpTitul.Margin = new Padding(4);
      this.tpTitul.Name = "tpTitul";
      this.tpTitul.Padding = new Padding(4);
      this.hp.SetShowHelp((Control) this.tpTitul, true);
      this.tpTitul.Size = new Size(1237, 706);
      this.tpTitul.TabIndex = 0;
      this.tpTitul.Text = "Титульная";
      this.tpTitul.UseVisualStyleBackColor = true;
      this.dgvSupplierClient.BackgroundColor = Color.AliceBlue;
      this.dgvSupplierClient.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvSupplierClient.Dock = DockStyle.Fill;
      this.dgvSupplierClient.Location = new Point(4, 498);
      this.dgvSupplierClient.Name = "dgvSupplierClient";
      this.dgvSupplierClient.Size = new Size(1229, 204);
      this.dgvSupplierClient.TabIndex = 11;
      this.dgvSupplierClient.CellBeginEdit += new DataGridViewCellCancelEventHandler(this.dgvSupplierClient_CellBeginEdit_1);
      this.dgvSupplierClient.CellEndEdit += new DataGridViewCellEventHandler(this.dgvSupplierClient_CellEndEdit);
      this.dgvSupplierClient.ColumnWidthChanged += new DataGridViewColumnEventHandler(this.dgvSupplierClient_ColumnWidthChanged);
      this.dgvSupplierClient.DataError += new DataGridViewDataErrorEventHandler(this.dataGridView1_DataError);
      this.label19.BackColor = Color.Transparent;
      this.label19.Dock = DockStyle.Top;
      this.label19.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.label19.Location = new Point(4, 472);
      this.label19.Name = "label19";
      this.label19.Size = new Size(1229, 26);
      this.label19.TabIndex = 9;
      this.label19.Text = "Лицевые сторонних организаций";
      this.label19.TextAlign = ContentAlignment.MiddleLeft;
      this.pnPolicy.BorderStyle = BorderStyle.Fixed3D;
      this.pnPolicy.Dock = DockStyle.Top;
      this.pnPolicy.Location = new Point(4, 403);
      this.pnPolicy.Name = "pnPolicy";
      this.pnPolicy.Size = new Size(1229, 69);
      this.pnPolicy.TabIndex = 12;
      this.pnPolicy.Visible = false;
      this.pnInfoLsClinent.BorderStyle = BorderStyle.Fixed3D;
      this.pnInfoLsClinent.Controls.Add((Control) this.lblTypeOwn);
      this.pnInfoLsClinent.Controls.Add((Control) this.label21);
      this.pnInfoLsClinent.Controls.Add((Control) this.lblTempNumJilec);
      this.pnInfoLsClinent.Controls.Add((Control) this.lbl8T);
      this.pnInfoLsClinent.Controls.Add((Control) this.lblNumJilec);
      this.pnInfoLsClinent.Controls.Add((Control) this.lbl7T);
      this.pnInfoLsClinent.Controls.Add((Control) this.lblStatusT);
      this.pnInfoLsClinent.Controls.Add((Control) this.lblRightDocT);
      this.pnInfoLsClinent.Controls.Add((Control) this.lblFlatCategoryT);
      this.pnInfoLsClinent.Controls.Add((Control) this.lbl6T);
      this.pnInfoLsClinent.Controls.Add((Control) this.lbl5T);
      this.pnInfoLsClinent.Controls.Add((Control) this.lbl4T);
      this.pnInfoLsClinent.Controls.Add((Control) this.lblJilSquareT);
      this.pnInfoLsClinent.Controls.Add((Control) this.lblAllSquareT);
      this.pnInfoLsClinent.Controls.Add((Control) this.lbl3T);
      this.pnInfoLsClinent.Controls.Add((Control) this.lbl2T);
      this.pnInfoLsClinent.Controls.Add((Control) this.lblMspT);
      this.pnInfoLsClinent.Controls.Add((Control) this.lbl1T);
      this.pnInfoLsClinent.Dock = DockStyle.Top;
      this.pnInfoLsClinent.Location = new Point(4, 266);
      this.pnInfoLsClinent.Name = "pnInfoLsClinent";
      this.pnInfoLsClinent.Size = new Size(1229, 137);
      this.pnInfoLsClinent.TabIndex = 8;
      this.lblTypeOwn.AutoSize = true;
      this.lblTypeOwn.Location = new Point(784, 15);
      this.lblTypeOwn.Name = "lblTypeOwn";
      this.lblTypeOwn.Size = new Size(72, 16);
      this.lblTypeOwn.TabIndex = 17;
      this.lblTypeOwn.Text = "значение";
      this.label21.AutoSize = true;
      this.label21.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.label21.Location = new Point(626, 15);
      this.label21.Name = "label21";
      this.label21.Size = new Size(135, 16);
      this.label21.TabIndex = 16;
      this.label21.Text = "Тип собственности";
      this.lblTempNumJilec.AutoSize = true;
      this.lblTempNumJilec.Location = new Point(440, 95);
      this.lblTempNumJilec.Name = "lblTempNumJilec";
      this.lblTempNumJilec.Size = new Size(72, 16);
      this.lblTempNumJilec.TabIndex = 15;
      this.lblTempNumJilec.Text = "значение";
      this.lbl8T.AutoSize = true;
      this.lbl8T.Location = new Point(286, 95);
      this.lbl8T.Name = "lbl8T";
      this.lbl8T.Size = new Size(152, 32);
      this.lbl8T.TabIndex = 14;
      this.lbl8T.Text = "Количество вр. зарег.\r\n жильцов";
      this.lblNumJilec.AutoSize = true;
      this.lblNumJilec.Location = new Point(167, 95);
      this.lblNumJilec.Name = "lblNumJilec";
      this.lblNumJilec.Size = new Size(72, 16);
      this.lblNumJilec.TabIndex = 13;
      this.lblNumJilec.Text = "значение";
      this.lbl7T.AutoSize = true;
      this.lbl7T.Location = new Point(13, 95);
      this.lbl7T.Name = "lbl7T";
      this.lbl7T.Size = new Size(145, 16);
      this.lbl7T.TabIndex = 12;
      this.lbl7T.Text = "Количество жильцов";
      this.lblStatusT.AutoSize = true;
      this.lblStatusT.Location = new Point(440, 70);
      this.lblStatusT.Name = "lblStatusT";
      this.lblStatusT.Size = new Size(72, 16);
      this.lblStatusT.TabIndex = 11;
      this.lblStatusT.Text = "значение";
      this.lblRightDocT.AutoSize = true;
      this.lblRightDocT.Location = new Point(440, 43);
      this.lblRightDocT.Name = "lblRightDocT";
      this.lblRightDocT.Size = new Size(72, 16);
      this.lblRightDocT.TabIndex = 10;
      this.lblRightDocT.Text = "значение";
      this.lblFlatCategoryT.AutoSize = true;
      this.lblFlatCategoryT.Location = new Point(440, 15);
      this.lblFlatCategoryT.Name = "lblFlatCategoryT";
      this.lblFlatCategoryT.Size = new Size(72, 16);
      this.lblFlatCategoryT.TabIndex = 9;
      this.lblFlatCategoryT.Text = "значение";
      this.lbl6T.AutoSize = true;
      this.lbl6T.Location = new Point(286, 70);
      this.lbl6T.Name = "lbl6T";
      this.lbl6T.Size = new Size(76, 16);
      this.lbl6T.TabIndex = 8;
      this.lbl6T.Text = "Статус л/с";
      this.lbl5T.AutoSize = true;
      this.lbl5T.Location = new Point(286, 43);
      this.lbl5T.Name = "lbl5T";
      this.lbl5T.Size = new Size(63, 16);
      this.lbl5T.TabIndex = 7;
      this.lbl5T.Text = "Договор";
      this.lbl4T.AutoSize = true;
      this.lbl4T.Location = new Point(286, 15);
      this.lbl4T.Name = "lbl4T";
      this.lbl4T.Size = new Size(142, 16);
      this.lbl4T.TabIndex = 6;
      this.lbl4T.Text = "Категория квартиры";
      this.lblJilSquareT.AutoSize = true;
      this.lblJilSquareT.Location = new Point(167, 70);
      this.lblJilSquareT.Name = "lblJilSquareT";
      this.lblJilSquareT.Size = new Size(72, 16);
      this.lblJilSquareT.TabIndex = 5;
      this.lblJilSquareT.Text = "значение";
      this.lblAllSquareT.AutoSize = true;
      this.lblAllSquareT.Location = new Point(167, 43);
      this.lblAllSquareT.Name = "lblAllSquareT";
      this.lblAllSquareT.Size = new Size(72, 16);
      this.lblAllSquareT.TabIndex = 4;
      this.lblAllSquareT.Text = "значение";
      this.lbl3T.AutoSize = true;
      this.lbl3T.Location = new Point(13, 70);
      this.lbl3T.Name = "lbl3T";
      this.lbl3T.Size = new Size(111, 16);
      this.lbl3T.TabIndex = 3;
      this.lbl3T.Text = "Жилая площадь";
      this.lbl2T.AutoSize = true;
      this.lbl2T.Location = new Point(13, 43);
      this.lbl2T.Name = "lbl2T";
      this.lbl2T.Size = new Size(109, 16);
      this.lbl2T.TabIndex = 2;
      this.lbl2T.Text = "Общая площадь";
      this.lblMspT.AutoSize = true;
      this.lblMspT.Location = new Point(167, 15);
      this.lblMspT.Name = "lblMspT";
      this.lblMspT.Size = new Size(96, 16);
      this.lblMspT.TabIndex = 1;
      this.lblMspT.Text = "номера льгот";
      this.lbl1T.AutoSize = true;
      this.lbl1T.Location = new Point(13, 15);
      this.lbl1T.Name = "lbl1T";
      this.lbl1T.Size = new Size(54, 16);
      this.lbl1T.TabIndex = 0;
      this.lbl1T.Text = "Льготы";
      this.pnRemark.BorderStyle = BorderStyle.Fixed3D;
      this.pnRemark.Controls.Add((Control) this.mcArchive);
      this.pnRemark.Controls.Add((Control) this.label7);
      this.pnRemark.Controls.Add((Control) this.tbRemark);
      this.pnRemark.Dock = DockStyle.Top;
      this.pnRemark.Location = new Point(4, 157);
      this.pnRemark.Name = "pnRemark";
      this.pnRemark.Size = new Size(1229, 109);
      this.pnRemark.TabIndex = 4;
      this.mcArchive.BackColor = SystemColors.ActiveCaptionText;
      this.mcArchive.Location = new Point(298, 10);
      this.mcArchive.Name = "mcArchive";
      this.mcArchive.TabIndex = 16;
      this.mcArchive.TitleBackColor = Color.DarkOrange;
      this.mcArchive.Visible = false;
      this.mcArchive.DateSelected += new DateRangeEventHandler(this.mcArchive_DateSelected);
      this.label7.AutoSize = true;
      this.label7.Location = new Point(20, 15);
      this.label7.Name = "label7";
      this.label7.Size = new Size(90, 16);
      this.label7.TabIndex = 2;
      this.label7.Text = "Примечания";
      this.tbRemark.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
      this.tbRemark.Location = new Point(23, 34);
      this.tbRemark.Multiline = true;
      this.tbRemark.Name = "tbRemark";
      this.tbRemark.Size = new Size(1181, 61);
      this.tbRemark.TabIndex = 10;
      this.tbRemark.TextChanged += new EventHandler(this.cbFlat_TextChanged);
      this.pnInfo.BorderStyle = BorderStyle.Fixed3D;
      this.pnInfo.Controls.Add((Control) this.txbDebt);
      this.pnInfo.Controls.Add((Control) this.label20);
      this.pnInfo.Dock = DockStyle.Top;
      this.pnInfo.Location = new Point(4, 116);
      this.pnInfo.Name = "pnInfo";
      this.pnInfo.Size = new Size(1229, 41);
      this.pnInfo.TabIndex = 3;
      this.txbDebt.Location = new Point(180, 7);
      this.txbDebt.Name = "txbDebt";
      this.txbDebt.ReadOnly = true;
      this.txbDebt.Size = new Size(633, 22);
      this.txbDebt.TabIndex = 1;
      this.label20.AutoSize = true;
      this.label20.Location = new Point(3, 10);
      this.label20.Name = "label20";
      this.label20.Size = new Size(171, 16);
      this.label20.TabIndex = 0;
      this.label20.Text = "Информация о должнике";
      this.pnNumers.AutoScroll = true;
      this.pnNumers.BorderStyle = BorderStyle.Fixed3D;
      this.pnNumers.Controls.Add((Control) this.btnTypeDelivery);
      this.pnNumers.Controls.Add((Control) this.tbPhone);
      this.pnNumers.Controls.Add((Control) this.tbFloor);
      this.pnNumers.Controls.Add((Control) this.btnPinCode);
      this.pnNumers.Controls.Add((Control) this.label4);
      this.pnNumers.Controls.Add((Control) this.label6);
      this.pnNumers.Controls.Add((Control) this.tbEntrance);
      this.pnNumers.Controls.Add((Control) this.label3);
      this.pnNumers.Controls.Add((Control) this.cbFlat);
      this.pnNumers.Controls.Add((Control) this.lbl5);
      this.pnNumers.Controls.Add((Control) this.tbSurFlat);
      this.pnNumers.Controls.Add((Control) this.lbl4);
      this.pnNumers.Dock = DockStyle.Top;
      this.pnNumers.Location = new Point(4, 43);
      this.pnNumers.Name = "pnNumers";
      this.pnNumers.Size = new Size(1229, 73);
      this.pnNumers.TabIndex = 2;
      this.btnTypeDelivery.Image = (Image) componentResourceManager.GetObject("btnTypeDelivery.Image");
      this.btnTypeDelivery.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnTypeDelivery.Location = new Point(895, 4);
      this.btnTypeDelivery.Name = "btnTypeDelivery";
      this.btnTypeDelivery.Size = new Size(160, 30);
      this.btnTypeDelivery.TabIndex = 15;
      this.btnTypeDelivery.Text = "Способ доставки";
      this.btnTypeDelivery.TextAlign = ContentAlignment.MiddleRight;
      this.btnTypeDelivery.UseVisualStyleBackColor = true;
      this.btnTypeDelivery.Click += new EventHandler(this.btnTypeDelivery_Click);
      this.tbPhone.Location = new Point(629, 8);
      this.tbPhone.Name = "tbPhone";
      this.tbPhone.Size = new Size(135, 22);
      this.tbPhone.TabIndex = 9;
      this.tbPhone.TextChanged += new EventHandler(this.cbFlat_TextChanged);
      this.tbFloor.Location = new Point(491, 8);
      this.tbFloor.Name = "tbFloor";
      this.tbFloor.Size = new Size(47, 22);
      this.tbFloor.TabIndex = 8;
      this.tbFloor.TextChanged += new EventHandler(this.cbFlat_TextChanged);
      this.btnPinCode.Image = (Image) componentResourceManager.GetObject("btnPinCode.Image");
      this.btnPinCode.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnPinCode.Location = new Point(785, 4);
      this.btnPinCode.Name = "btnPinCode";
      this.btnPinCode.Size = new Size(93, 30);
      this.btnPinCode.TabIndex = 14;
      this.btnPinCode.Text = "Пин-код";
      this.btnPinCode.TextAlign = ContentAlignment.MiddleRight;
      this.btnPinCode.UseVisualStyleBackColor = true;
      this.btnPinCode.Click += new EventHandler(this.btnPinCode_Click);
      this.label4.AutoSize = true;
      this.label4.Location = new Point(554, 11);
      this.label4.Margin = new Padding(4, 0, 4, 0);
      this.label4.Name = "label4";
      this.label4.Size = new Size(68, 16);
      this.label4.TabIndex = 10;
      this.label4.Text = "Телефон";
      this.label6.AutoSize = true;
      this.label6.Location = new Point(442, 11);
      this.label6.Margin = new Padding(4, 0, 4, 0);
      this.label6.Name = "label6";
      this.label6.Size = new Size(42, 16);
      this.label6.TabIndex = 14;
      this.label6.Text = "Этаж";
      this.tbEntrance.Location = new Point(383, 8);
      this.tbEntrance.Name = "tbEntrance";
      this.tbEntrance.Size = new Size(47, 22);
      this.tbEntrance.TabIndex = 7;
      this.tbEntrance.MouseClick += new MouseEventHandler(this.tbEntrance_MouseClick);
      this.tbEntrance.TextChanged += new EventHandler(this.cbFlat_TextChanged);
      this.label3.AutoSize = true;
      this.label3.Location = new Point(295, 11);
      this.label3.Margin = new Padding(4, 0, 4, 0);
      this.label3.Name = "label3";
      this.label3.Size = new Size(90, 16);
      this.label3.TabIndex = 12;
      this.label3.Text = "№ подъезда";
      this.cbFlat.DropDownStyle = ComboBoxStyle.DropDownList;
      this.cbFlat.FormattingEnabled = true;
      this.cbFlat.Location = new Point(52, 8);
      this.cbFlat.Name = "cbFlat";
      this.cbFlat.Size = new Size(66, 24);
      this.cbFlat.TabIndex = 5;
      this.cbFlat.TextChanged += new EventHandler(this.cbFlat_TextChanged);
      this.lbl5.AutoSize = true;
      this.lbl5.Location = new Point(4, 11);
      this.lbl5.Margin = new Padding(4, 0, 4, 0);
      this.lbl5.Name = "lbl5";
      this.lbl5.Size = new Size(43, 16);
      this.lbl5.TabIndex = 9;
      this.lbl5.Text = "№ кв.";
      this.tbSurFlat.Location = new Point(198, 8);
      this.tbSurFlat.Name = "tbSurFlat";
      this.tbSurFlat.Size = new Size(76, 22);
      this.tbSurFlat.TabIndex = 6;
      this.tbSurFlat.TextChanged += new EventHandler(this.cbFlat_TextChanged);
      this.tbSurFlat.KeyPress += new KeyPressEventHandler(this.tbSurFlat_KeyPress);
      this.lbl4.AutoSize = true;
      this.lbl4.Location = new Point(136, 11);
      this.lbl4.Margin = new Padding(4, 0, 4, 0);
      this.lbl4.Name = "lbl4";
      this.lbl4.Size = new Size(60, 16);
      this.lbl4.TabIndex = 8;
      this.lbl4.Text = "№ комн.";
      this.pnFIO.BorderStyle = BorderStyle.Fixed3D;
      this.pnFIO.Controls.Add((Control) this.butDownloadDocHome);
      this.pnFIO.Controls.Add((Control) this.butFileCLient);
      this.pnFIO.Controls.Add((Control) this.cbArenda);
      this.pnFIO.Controls.Add((Control) this.btnNoteBook);
      this.pnFIO.Controls.Add((Control) this.tbOldId);
      this.pnFIO.Controls.Add((Control) this.label5);
      this.pnFIO.Controls.Add((Control) this.tbFamily);
      this.pnFIO.Controls.Add((Control) this.lbl1);
      this.pnFIO.Dock = DockStyle.Top;
      this.pnFIO.Location = new Point(4, 4);
      this.pnFIO.Name = "pnFIO";
      this.pnFIO.Size = new Size(1229, 39);
      this.pnFIO.TabIndex = 1;
      this.butDownloadDocHome.Location = new Point(862, 2);
      this.butDownloadDocHome.Name = "butDownloadDocHome";
      this.butDownloadDocHome.Size = new Size(193, 30);
      this.butDownloadDocHome.TabIndex = 18;
      this.butDownloadDocHome.Text = "Скачать документы на дом";
      this.butDownloadDocHome.UseVisualStyleBackColor = true;
      this.butDownloadDocHome.Click += new EventHandler(this.butDownloadDocHome_Click);
      this.butFileCLient.Image = (Image) Resources.Card_File;
      this.butFileCLient.ImageAlign = ContentAlignment.MiddleLeft;
      this.butFileCLient.Location = new Point(728, 2);
      this.butFileCLient.Name = "butFileCLient";
      this.butFileCLient.Size = new Size(128, 30);
      this.butFileCLient.TabIndex = 17;
      this.butFileCLient.Text = "Файлы";
      this.butFileCLient.UseVisualStyleBackColor = true;
      this.butFileCLient.Click += new EventHandler(this.butFileCLient_Click);
      this.cbArenda.AutoSize = true;
      this.cbArenda.Location = new Point(1125, 9);
      this.cbArenda.Name = "cbArenda";
      this.cbArenda.Size = new Size(99, 20);
      this.cbArenda.TabIndex = 16;
      this.cbArenda.Text = "Арендатор";
      this.cbArenda.UseVisualStyleBackColor = true;
      this.cbArenda.Visible = false;
      this.cbArenda.CheckedChanged += new EventHandler(this.cbFlat_TextChanged);
      this.btnNoteBook.Image = (Image) componentResourceManager.GetObject("btnNoteBook.Image");
      this.btnNoteBook.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnNoteBook.Location = new Point(503, 2);
      this.btnNoteBook.Name = "btnNoteBook";
      this.btnNoteBook.Size = new Size(173, 30);
      this.btnNoteBook.TabIndex = 15;
      this.btnNoteBook.Text = "Блокнот бухгалтера";
      this.btnNoteBook.TextAlign = ContentAlignment.MiddleRight;
      this.btnNoteBook.UseVisualStyleBackColor = true;
      this.btnNoteBook.Click += new EventHandler(this.btnNoteBook_Click);
      this.tbOldId.Location = new Point(369, 6);
      this.tbOldId.Name = "tbOldId";
      this.tbOldId.Size = new Size(102, 22);
      this.tbOldId.TabIndex = 4;
      this.tbOldId.TextChanged += new EventHandler(this.cbFlat_TextChanged);
      this.label5.AutoSize = true;
      this.label5.Location = new Point(246, 9);
      this.label5.Margin = new Padding(4, 0, 4, 0);
      this.label5.Name = "label5";
      this.label5.Size = new Size(116, 16);
      this.label5.TabIndex = 13;
      this.label5.Text = "Старый лицевой";
      this.tbFamily.Location = new Point(77, 7);
      this.tbFamily.Name = "tbFamily";
      this.tbFamily.Size = new Size(142, 22);
      this.tbFamily.TabIndex = 1;
      this.tbFamily.TextChanged += new EventHandler(this.cbFlat_TextChanged);
      this.lbl1.AutoSize = true;
      this.lbl1.Location = new Point(3, 9);
      this.lbl1.Margin = new Padding(4, 0, 4, 0);
      this.lbl1.Name = "lbl1";
      this.lbl1.Size = new Size(67, 16);
      this.lbl1.TabIndex = 7;
      this.lbl1.Text = "Фамилия";
      this.tpArenda.Controls.Add((Control) this.pnBill);
      this.tpArenda.Controls.Add((Control) this.pnDogovor);
      this.tpArenda.Location = new Point(4, 46);
      this.tpArenda.Name = "tpArenda";
      this.tpArenda.Padding = new Padding(3);
      this.tpArenda.Size = new Size(1237, 706);
      this.tpArenda.TabIndex = 12;
      this.tpArenda.Text = "Договор";
      this.tpArenda.UseVisualStyleBackColor = true;
      this.pnBill.BackColor = Color.Transparent;
      this.pnBill.BorderStyle = BorderStyle.Fixed3D;
      this.pnBill.Controls.Add((Control) this.splitContainer1);
      this.pnBill.Dock = DockStyle.Fill;
      this.pnBill.Location = new Point(3, 444);
      this.pnBill.Name = "pnBill";
      this.pnBill.Size = new Size(1231, 259);
      this.pnBill.TabIndex = 13;
      this.splitContainer1.Dock = DockStyle.Fill;
      this.splitContainer1.Location = new Point(0, 0);
      this.splitContainer1.Name = "splitContainer1";
      this.splitContainer1.Panel1.Controls.Add((Control) this.dgvBill);
      this.splitContainer1.Panel1.Controls.Add((Control) this.lblBill);
      this.splitContainer1.Panel2.BackColor = Color.Transparent;
      this.splitContainer1.Panel2.Controls.Add((Control) this.dvgArendaLS);
      this.splitContainer1.Panel2.Controls.Add((Control) this.label8);
      this.splitContainer1.Size = new Size(1227, (int) byte.MaxValue);
      this.splitContainer1.SplitterDistance = 629;
      this.splitContainer1.TabIndex = 0;
      this.dgvBill.BackgroundColor = Color.AliceBlue;
      this.dgvBill.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvBill.Dock = DockStyle.Fill;
      this.dgvBill.Location = new Point(0, 18);
      this.dgvBill.Name = "dgvBill";
      this.dgvBill.Size = new Size(629, 237);
      this.dgvBill.TabIndex = 1;
      this.dgvBill.CellValueChanged += new DataGridViewCellEventHandler(this.dgvBill_CellValueChanged);
      this.dgvBill.ColumnWidthChanged += new DataGridViewColumnEventHandler(this.dgvBill_ColumnWidthChanged);
      this.lblBill.BackColor = Color.Transparent;
      this.lblBill.Dock = DockStyle.Top;
      this.lblBill.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblBill.Location = new Point(0, 0);
      this.lblBill.Name = "lblBill";
      this.lblBill.Size = new Size(629, 18);
      this.lblBill.TabIndex = 0;
      this.lblBill.Text = "Счета";
      this.dvgArendaLS.BackgroundColor = Color.AliceBlue;
      this.dvgArendaLS.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dvgArendaLS.Dock = DockStyle.Fill;
      this.dvgArendaLS.Location = new Point(0, 19);
      this.dvgArendaLS.Name = "dvgArendaLS";
      this.dvgArendaLS.Size = new Size(594, 236);
      this.dvgArendaLS.TabIndex = 3;
      this.dvgArendaLS.CellBeginEdit += new DataGridViewCellCancelEventHandler(this.dvgArendaLS_CellBeginEdit);
      this.dvgArendaLS.CellEndEdit += new DataGridViewCellEventHandler(this.dvgArendaLS_CellEndEdit);
      this.label8.Dock = DockStyle.Top;
      this.label8.Location = new Point(0, 0);
      this.label8.Name = "label8";
      this.label8.Size = new Size(594, 19);
      this.label8.TabIndex = 2;
      this.label8.Text = "Лицевые сторонних организаций";
      this.pnDogovor.BackColor = Color.AliceBlue;
      this.pnDogovor.BorderStyle = BorderStyle.Fixed3D;
      this.pnDogovor.Controls.Add((Control) this.btnTypeDelivery2);
      this.pnDogovor.Controls.Add((Control) this.cmbDocumentType);
      this.pnDogovor.Controls.Add((Control) this.lblTypeDocument);
      this.pnDogovor.Controls.Add((Control) this.btnPinCodeAr);
      this.pnDogovor.Controls.Add((Control) this.txbArNumberRoom);
      this.pnDogovor.Controls.Add((Control) this.lblArNumberRoom);
      this.pnDogovor.Controls.Add((Control) this.txbArFloor);
      this.pnDogovor.Controls.Add((Control) this.lblFloor);
      this.pnDogovor.Controls.Add((Control) this.txbArEntrance);
      this.pnDogovor.Controls.Add((Control) this.lblArEntrance);
      this.pnDogovor.Controls.Add((Control) this.lblArNote);
      this.pnDogovor.Controls.Add((Control) this.txbArNote);
      this.pnDogovor.Controls.Add((Control) this.txbArPhone);
      this.pnDogovor.Controls.Add((Control) this.lblArPhone);
      this.pnDogovor.Controls.Add((Control) this.cmbArFlat);
      this.pnDogovor.Controls.Add((Control) this.lblArFlat);
      this.pnDogovor.Controls.Add((Control) this.txbAdres);
      this.pnDogovor.Controls.Add((Control) this.lblAdres);
      this.pnDogovor.Controls.Add((Control) this.txbRentPrior);
      this.pnDogovor.Controls.Add((Control) this.lblRentPrior);
      this.pnDogovor.Controls.Add((Control) this.lbOrg);
      this.pnDogovor.Controls.Add((Control) this.mtbKumiDate);
      this.pnDogovor.Controls.Add((Control) this.mtbDate);
      this.pnDogovor.Controls.Add((Control) this.mtbDEnd);
      this.pnDogovor.Controls.Add((Control) this.lblDEnd);
      this.pnDogovor.Controls.Add((Control) this.mtbDBeg);
      this.pnDogovor.Controls.Add((Control) this.lblDBeg);
      this.pnDogovor.Controls.Add((Control) this.btnOrgInfo);
      this.pnDogovor.Controls.Add((Control) this.cmbOrganization);
      this.pnDogovor.Controls.Add((Control) this.cmbBuiltIn);
      this.pnDogovor.Controls.Add((Control) this.txbKumiNum);
      this.pnDogovor.Controls.Add((Control) this.dtpKumiDate);
      this.pnDogovor.Controls.Add((Control) this.lblBuiltIn);
      this.pnDogovor.Controls.Add((Control) this.lblKumiDate);
      this.pnDogovor.Controls.Add((Control) this.lblKumiNum);
      this.pnDogovor.Controls.Add((Control) this.dtpDate);
      this.pnDogovor.Controls.Add((Control) this.txbNum);
      this.pnDogovor.Controls.Add((Control) this.lblDate);
      this.pnDogovor.Controls.Add((Control) this.lblNum);
      this.pnDogovor.Controls.Add((Control) this.lblOrg);
      this.pnDogovor.Dock = DockStyle.Top;
      this.pnDogovor.Location = new Point(3, 3);
      this.pnDogovor.Name = "pnDogovor";
      this.pnDogovor.Size = new Size(1231, 441);
      this.pnDogovor.TabIndex = 0;
      this.btnTypeDelivery2.Image = (Image) componentResourceManager.GetObject("btnTypeDelivery2.Image");
      this.btnTypeDelivery2.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnTypeDelivery2.Location = new Point(945, 194);
      this.btnTypeDelivery2.Name = "btnTypeDelivery2";
      this.btnTypeDelivery2.Size = new Size(160, 30);
      this.btnTypeDelivery2.TabIndex = 39;
      this.btnTypeDelivery2.Text = "Способ доставки";
      this.btnTypeDelivery2.TextAlign = ContentAlignment.MiddleRight;
      this.btnTypeDelivery2.UseVisualStyleBackColor = true;
      this.btnTypeDelivery2.Click += new EventHandler(this.btnTypeDelivery_Click);
      this.cmbDocumentType.FormattingEnabled = true;
      this.cmbDocumentType.Location = new Point(868, 97);
      this.cmbDocumentType.Name = "cmbDocumentType";
      this.cmbDocumentType.Size = new Size(200, 24);
      this.cmbDocumentType.TabIndex = 38;
      this.cmbDocumentType.SelectedValueChanged += new EventHandler(this.cmbDocumentType_SelectedValueChanged);
      this.lblTypeDocument.AutoSize = true;
      this.lblTypeDocument.Location = new Point(756, 100);
      this.lblTypeDocument.Name = "lblTypeDocument";
      this.lblTypeDocument.Size = new Size(107, 16);
      this.lblTypeDocument.TabIndex = 37;
      this.lblTypeDocument.Text = "Тип документа";
      this.btnPinCodeAr.Image = (Image) componentResourceManager.GetObject("btnPinCodeAr.Image");
      this.btnPinCodeAr.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnPinCodeAr.Location = new Point(818, 193);
      this.btnPinCodeAr.Name = "btnPinCodeAr";
      this.btnPinCodeAr.Size = new Size(93, 30);
      this.btnPinCodeAr.TabIndex = 36;
      this.btnPinCodeAr.Text = "Пин-код";
      this.btnPinCodeAr.TextAlign = ContentAlignment.MiddleRight;
      this.btnPinCodeAr.UseVisualStyleBackColor = true;
      this.btnPinCodeAr.Click += new EventHandler(this.btnPinCode_Click);
      this.txbArNumberRoom.Location = new Point(223, 198);
      this.txbArNumberRoom.Name = "txbArNumberRoom";
      this.txbArNumberRoom.Size = new Size(76, 22);
      this.txbArNumberRoom.TabIndex = 34;
      this.txbArNumberRoom.TextChanged += new EventHandler(this.txbAdres_TextChanged);
      this.txbArNumberRoom.KeyDown += new KeyEventHandler(this.txbArNumberRoom_KeyDown);
      this.lblArNumberRoom.AutoSize = true;
      this.lblArNumberRoom.Location = new Point(161, 201);
      this.lblArNumberRoom.Margin = new Padding(4, 0, 4, 0);
      this.lblArNumberRoom.Name = "lblArNumberRoom";
      this.lblArNumberRoom.Size = new Size(60, 16);
      this.lblArNumberRoom.TabIndex = 35;
      this.lblArNumberRoom.Text = "№ комн.";
      this.txbArFloor.Location = new Point(524, 197);
      this.txbArFloor.Name = "txbArFloor";
      this.txbArFloor.Size = new Size(47, 22);
      this.txbArFloor.TabIndex = 11;
      this.txbArFloor.TextChanged += new EventHandler(this.txbAdres_TextChanged);
      this.txbArFloor.KeyDown += new KeyEventHandler(this.txbArFloor_KeyDown);
      this.lblFloor.AutoSize = true;
      this.lblFloor.Location = new Point(475, 200);
      this.lblFloor.Margin = new Padding(4, 0, 4, 0);
      this.lblFloor.Name = "lblFloor";
      this.lblFloor.Size = new Size(42, 16);
      this.lblFloor.TabIndex = 33;
      this.lblFloor.Text = "Этаж";
      this.txbArEntrance.Location = new Point(412, 197);
      this.txbArEntrance.Name = "txbArEntrance";
      this.txbArEntrance.Size = new Size(47, 22);
      this.txbArEntrance.TabIndex = 10;
      this.txbArEntrance.TextChanged += new EventHandler(this.txbAdres_TextChanged);
      this.txbArEntrance.KeyDown += new KeyEventHandler(this.txbArEntrance_KeyDown);
      this.lblArEntrance.AutoSize = true;
      this.lblArEntrance.Location = new Point(324, 200);
      this.lblArEntrance.Margin = new Padding(4, 0, 4, 0);
      this.lblArEntrance.Name = "lblArEntrance";
      this.lblArEntrance.Size = new Size(90, 16);
      this.lblArEntrance.TabIndex = 32;
      this.lblArEntrance.Text = "№ подъезда";
      this.lblArNote.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.lblArNote.AutoSize = true;
      this.lblArNote.Location = new Point(3, 371);
      this.lblArNote.Name = "lblArNote";
      this.lblArNote.Size = new Size(90, 16);
      this.lblArNote.TabIndex = 28;
      this.lblArNote.Text = "Примечания";
      this.txbArNote.Dock = DockStyle.Bottom;
      this.txbArNote.Location = new Point(0, 390);
      this.txbArNote.Multiline = true;
      this.txbArNote.Name = "txbArNote";
      this.txbArNote.Size = new Size(1227, 47);
      this.txbArNote.TabIndex = 29;
      this.txbArNote.TextChanged += new EventHandler(this.txbAdres_TextChanged);
      this.txbArPhone.Location = new Point(657, 197);
      this.txbArPhone.Name = "txbArPhone";
      this.txbArPhone.Size = new Size(135, 22);
      this.txbArPhone.TabIndex = 12;
      this.txbArPhone.TextChanged += new EventHandler(this.txbAdres_TextChanged);
      this.txbArPhone.KeyDown += new KeyEventHandler(this.txbArPhone_KeyDown);
      this.lblArPhone.AutoSize = true;
      this.lblArPhone.Location = new Point(582, 200);
      this.lblArPhone.Margin = new Padding(4, 0, 4, 0);
      this.lblArPhone.Name = "lblArPhone";
      this.lblArPhone.Size = new Size(68, 16);
      this.lblArPhone.TabIndex = 27;
      this.lblArPhone.Text = "Телефон";
      this.cmbArFlat.DropDownStyle = ComboBoxStyle.DropDownList;
      this.cmbArFlat.FormattingEnabled = true;
      this.cmbArFlat.Location = new Point(51, 198);
      this.cmbArFlat.Name = "cmbArFlat";
      this.cmbArFlat.Size = new Size(81, 24);
      this.cmbArFlat.TabIndex = 9;
      this.cmbArFlat.SelectionChangeCommitted += new EventHandler(this.cmbArFlat_SelectionChangeCommitted);
      this.cmbArFlat.KeyDown += new KeyEventHandler(this.cmbArFlat_KeyDown);
      this.lblArFlat.AutoSize = true;
      this.lblArFlat.Location = new Point(3, 201);
      this.lblArFlat.Margin = new Padding(4, 0, 4, 0);
      this.lblArFlat.Name = "lblArFlat";
      this.lblArFlat.Size = new Size(43, 16);
      this.lblArFlat.TabIndex = 25;
      this.lblArFlat.Text = "№ кв.";
      this.txbAdres.Location = new Point(82, 169);
      this.txbAdres.Name = "txbAdres";
      this.txbAdres.Size = new Size(610, 22);
      this.txbAdres.TabIndex = 8;
      this.txbAdres.TextChanged += new EventHandler(this.txbAdres_TextChanged);
      this.txbAdres.KeyDown += new KeyEventHandler(this.txbAdres_KeyDown);
      this.lblAdres.AutoSize = true;
      this.lblAdres.Location = new Point(3, 172);
      this.lblAdres.Margin = new Padding(4, 0, 4, 0);
      this.lblAdres.Name = "lblAdres";
      this.lblAdres.Size = new Size(78, 16);
      this.lblAdres.TabIndex = 23;
      this.lblAdres.Text = "Доп. адрес";
      this.txbRentPrior.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.txbRentPrior.BackColor = Color.White;
      this.txbRentPrior.Location = new Point(0, 250);
      this.txbRentPrior.Multiline = true;
      this.txbRentPrior.Name = "txbRentPrior";
      this.txbRentPrior.ReadOnly = true;
      this.txbRentPrior.Size = new Size(1227, 118);
      this.txbRentPrior.TabIndex = 21;
      this.lblRentPrior.AutoSize = true;
      this.lblRentPrior.Location = new Point(3, 231);
      this.lblRentPrior.Name = "lblRentPrior";
      this.lblRentPrior.Size = new Size(126, 16);
      this.lblRentPrior.TabIndex = 20;
      this.lblRentPrior.Text = "Формулы расчета";
      this.lbOrg.FormattingEnabled = true;
      this.lbOrg.ItemHeight = 16;
      this.lbOrg.Location = new Point(51, 250);
      this.lbOrg.Name = "lbOrg";
      this.lbOrg.Size = new Size(678, 100);
      this.lbOrg.TabIndex = 15;
      this.lbOrg.Visible = false;
      this.lbOrg.SelectedValueChanged += new EventHandler(this.listBox1_SelectedValueChanged);
      this.lbOrg.KeyUp += new KeyEventHandler(this.listBox1_KeyUp);
      this.lbOrg.MouseUp += new MouseEventHandler(this.lbOrg_MouseUp);
      this.mtbKumiDate.Location = new Point(650, 97);
      this.mtbKumiDate.Mask = "00/00/0000";
      this.mtbKumiDate.Name = "mtbKumiDate";
      this.mtbKumiDate.Size = new Size(100, 22);
      this.mtbKumiDate.TabIndex = 5;
      this.mtbKumiDate.ValidatingType = typeof (DateTime);
      this.mtbKumiDate.KeyDown += new KeyEventHandler(this.mtbKumiDate_KeyDown);
      this.mtbDate.Location = new Point(356, 57);
      this.mtbDate.Mask = "00/00/0000";
      this.mtbDate.Name = "mtbDate";
      this.mtbDate.Size = new Size(100, 22);
      this.mtbDate.TabIndex = 2;
      this.mtbDate.ValidatingType = typeof (DateTime);
      this.mtbDate.TextChanged += new EventHandler(this.txbNum_TextChanged);
      this.mtbDate.KeyDown += new KeyEventHandler(this.mtbDate_KeyDown);
      this.mtbDEnd.Location = new Point(547, 135);
      this.mtbDEnd.Mask = "00/00/0000";
      this.mtbDEnd.Name = "mtbDEnd";
      this.mtbDEnd.Size = new Size(100, 22);
      this.mtbDEnd.TabIndex = 7;
      this.mtbDEnd.ValidatingType = typeof (DateTime);
      this.mtbDEnd.TextChanged += new EventHandler(this.txbNum_TextChanged);
      this.mtbDEnd.KeyDown += new KeyEventHandler(this.mtbDEnd_KeyDown);
      this.lblDEnd.AutoSize = true;
      this.lblDEnd.Location = new Point(353, 138);
      this.lblDEnd.Name = "lblDEnd";
      this.lblDEnd.Size = new Size(177, 16);
      this.lblDEnd.TabIndex = 19;
      this.lblDEnd.Text = "Дата окончания действия";
      this.mtbDBeg.Location = new Point(197, 135);
      this.mtbDBeg.Mask = "00/00/0000";
      this.mtbDBeg.Name = "mtbDBeg";
      this.mtbDBeg.Size = new Size(100, 22);
      this.mtbDBeg.TabIndex = 6;
      this.mtbDBeg.ValidatingType = typeof (DateTime);
      this.mtbDBeg.TextChanged += new EventHandler(this.txbNum_TextChanged);
      this.mtbDBeg.KeyDown += new KeyEventHandler(this.mtbDBeg_KeyDown);
      this.lblDBeg.AutoSize = true;
      this.lblDBeg.Location = new Point(3, 138);
      this.lblDBeg.Name = "lblDBeg";
      this.lblDBeg.Size = new Size(155, 16);
      this.lblDBeg.TabIndex = 17;
      this.lblDBeg.Text = "Дата начала действия";
      this.btnOrgInfo.Location = new Point(803, 13);
      this.btnOrgInfo.Name = "btnOrgInfo";
      this.btnOrgInfo.Size = new Size(224, 30);
      this.btnOrgInfo.TabIndex = 16;
      this.btnOrgInfo.Text = "Информация об организации";
      this.btnOrgInfo.UseVisualStyleBackColor = true;
      this.btnOrgInfo.Click += new EventHandler(this.btnOrgInfo_Click);
      this.cmbOrganization.AutoCompleteSource = AutoCompleteSource.ListItems;
      this.cmbOrganization.FormattingEnabled = true;
      this.cmbOrganization.Location = new Point(119, 15);
      this.cmbOrganization.Name = "cmbOrganization";
      this.cmbOrganization.Size = new Size(678, 24);
      this.cmbOrganization.TabIndex = 0;
      this.cmbOrganization.SelectionChangeCommitted += new EventHandler(this.cmbO_SelectionChangeCommitted);
      this.cmbOrganization.TextChanged += new EventHandler(this.cmbOrg1_TextChanged);
      this.cmbOrganization.KeyDown += new KeyEventHandler(this.cmbOrganization_KeyDown);
      this.cmbOrganization.KeyUp += new KeyEventHandler(this.cmbOrganization_KeyUp);
      this.cmbBuiltIn.FormattingEnabled = true;
      this.cmbBuiltIn.Location = new Point(685, 57);
      this.cmbBuiltIn.Name = "cmbBuiltIn";
      this.cmbBuiltIn.Size = new Size(173, 24);
      this.cmbBuiltIn.TabIndex = 3;
      this.cmbBuiltIn.Visible = false;
      this.cmbBuiltIn.SelectionChangeCommitted += new EventHandler(this.txbNum_TextChanged);
      this.txbKumiNum.Location = new Point(272, 97);
      this.txbKumiNum.Name = "txbKumiNum";
      this.txbKumiNum.Size = new Size(100, 22);
      this.txbKumiNum.TabIndex = 4;
      this.txbKumiNum.TextChanged += new EventHandler(this.txbNum_TextChanged);
      this.txbKumiNum.KeyDown += new KeyEventHandler(this.txbKumiNum_KeyDown);
      this.dtpKumiDate.Location = new Point(931, 143);
      this.dtpKumiDate.Name = "dtpKumiDate";
      this.dtpKumiDate.Size = new Size(147, 22);
      this.dtpKumiDate.TabIndex = 9;
      this.dtpKumiDate.Visible = false;
      this.dtpKumiDate.ValueChanged += new EventHandler(this.txbNum_TextChanged);
      this.lblBuiltIn.AutoSize = true;
      this.lblBuiltIn.Location = new Point(475, 60);
      this.lblBuiltIn.Name = "lblBuiltIn";
      this.lblBuiltIn.Size = new Size(204, 16);
      this.lblBuiltIn.TabIndex = 8;
      this.lblBuiltIn.Text = "Тип встроенности помещения";
      this.lblBuiltIn.Visible = false;
      this.lblKumiDate.AutoSize = true;
      this.lblKumiDate.Location = new Point(405, 100);
      this.lblKumiDate.Name = "lblKumiDate";
      this.lblKumiDate.Size = new Size(239, 16);
      this.lblKumiDate.TabIndex = 7;
      this.lblKumiDate.Text = "Дата заключения договора с КУМИ";
      this.lblKumiNum.AutoSize = true;
      this.lblKumiNum.Location = new Point(3, 100);
      this.lblKumiNum.Name = "lblKumiNum";
      this.lblKumiNum.Size = new Size(263, 16);
      this.lblKumiNum.TabIndex = 6;
      this.lblKumiNum.Text = "Номер договора по регистрации КУМИ";
      this.dtpDate.Location = new Point(759, 143);
      this.dtpDate.Name = "dtpDate";
      this.dtpDate.Size = new Size(152, 22);
      this.dtpDate.TabIndex = 5;
      this.dtpDate.Visible = false;
      this.dtpDate.ValueChanged += new EventHandler(this.txbNum_TextChanged);
      this.txbNum.Location = new Point(125, 57);
      this.txbNum.Name = "txbNum";
      this.txbNum.Size = new Size(98, 22);
      this.txbNum.TabIndex = 1;
      this.txbNum.TextChanged += new EventHandler(this.txbNum_TextChanged);
      this.txbNum.KeyDown += new KeyEventHandler(this.txbNum_KeyDown);
      this.lblDate.AutoSize = true;
      this.lblDate.Location = new Point(229, 60);
      this.lblDate.Name = "lblDate";
      this.lblDate.Size = new Size((int) sbyte.MaxValue, 16);
      this.lblDate.TabIndex = 3;
      this.lblDate.Text = "Дата регистрации";
      this.lblNum.AutoSize = true;
      this.lblNum.Location = new Point(3, 60);
      this.lblNum.Name = "lblNum";
      this.lblNum.Size = new Size(116, 16);
      this.lblNum.TabIndex = 2;
      this.lblNum.Text = "Номер договора";
      this.lblOrg.AutoSize = true;
      this.lblOrg.Location = new Point(3, 18);
      this.lblOrg.Name = "lblOrg";
      this.lblOrg.Size = new Size(95, 16);
      this.lblOrg.TabIndex = 1;
      this.lblOrg.Text = "Организация";
      this.tpOptions.Controls.Add((Control) this.dgvParams);
      this.hp.SetHelpKeyword((Control) this.tpOptions, "kv43.html");
      this.hp.SetHelpNavigator((Control) this.tpOptions, HelpNavigator.Topic);
      this.tpOptions.Location = new Point(4, 46);
      this.tpOptions.Margin = new Padding(4);
      this.tpOptions.Name = "tpOptions";
      this.tpOptions.Padding = new Padding(4);
      this.hp.SetShowHelp((Control) this.tpOptions, true);
      this.tpOptions.Size = new Size(1237, 706);
      this.tpOptions.TabIndex = 1;
      this.tpOptions.Text = "Параметры";
      this.tpOptions.UseVisualStyleBackColor = true;
      this.dgvParams.BackgroundColor = Color.AliceBlue;
      this.dgvParams.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvParams.ContextMenuStrip = this.contextMenuStrip1;
      this.dgvParams.Dock = DockStyle.Fill;
      this.dgvParams.Location = new Point(4, 4);
      this.dgvParams.Name = "dgvParams";
      this.dgvParams.Size = new Size(1229, 698);
      this.dgvParams.TabIndex = 0;
      this.dgvParams.CellBeginEdit += new DataGridViewCellCancelEventHandler(this.dataGridView1_CellBeginEdit);
      this.dgvParams.CellEndEdit += new DataGridViewCellEventHandler(this.dgvParams_CellEndEdit);
      this.dgvParams.CellFormatting += new DataGridViewCellFormattingEventHandler(this.dataGridView1_CellFormatting);
      this.dgvParams.CellMouseDown += new DataGridViewCellMouseEventHandler(this.dataGridView1_CellMouseDown);
      this.dgvParams.CellValueChanged += new DataGridViewCellEventHandler(this.dataGridView1_CellValueChanged);
      this.dgvParams.ColumnWidthChanged += new DataGridViewColumnEventHandler(this.dataGridView1_ColumnWidthChanged);
      this.dgvParams.CurrentCellDirtyStateChanged += new EventHandler(this.dataGridView1_CurrentCellDirtyStateChanged);
      this.dgvParams.DataError += new DataGridViewDataErrorEventHandler(this.dataGridView1_DataError);
      this.dgvParams.KeyDown += new KeyEventHandler(this.dataGridView1_KeyDown);
      this.tpService.Controls.Add((Control) this.tcntrlService);
      this.hp.SetHelpKeyword((Control) this.tpService, "kv44.html");
      this.hp.SetHelpNavigator((Control) this.tpService, HelpNavigator.Topic);
      this.tpService.Location = new Point(4, 46);
      this.tpService.Margin = new Padding(4);
      this.tpService.Name = "tpService";
      this.tpService.Padding = new Padding(4);
      this.hp.SetShowHelp((Control) this.tpService, true);
      this.tpService.Size = new Size(1237, 706);
      this.tpService.TabIndex = 2;
      this.tpService.Text = "Услуги";
      this.tpService.UseVisualStyleBackColor = true;
      this.tcntrlService.Controls.Add((Control) this.tpLSService);
      this.tcntrlService.Controls.Add((Control) this.tpServiceParam);
      this.tcntrlService.Dock = DockStyle.Fill;
      this.tcntrlService.Location = new Point(4, 4);
      this.tcntrlService.Name = "tcntrlService";
      this.tcntrlService.SelectedIndex = 0;
      this.tcntrlService.Size = new Size(1229, 698);
      this.tcntrlService.TabIndex = 0;
      this.tcntrlService.SelectedIndexChanged += new EventHandler(this.tcntrlService_SelectedIndexChanged);
      this.tpLSService.Controls.Add((Control) this.dgvLsService);
      this.tpLSService.Controls.Add((Control) this.pnLsService);
      this.tpLSService.Controls.Add((Control) this.ucLsSupplier1);
      this.tpLSService.Location = new Point(4, 25);
      this.tpLSService.Name = "tpLSService";
      this.tpLSService.Padding = new Padding(3);
      this.tpLSService.Size = new Size(1221, 669);
      this.tpLSService.TabIndex = 0;
      this.tpLSService.Text = "Виды услуг";
      this.tpLSService.UseVisualStyleBackColor = true;
      this.dgvLsService.BackgroundColor = Color.AliceBlue;
      this.dgvLsService.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvLsService.Dock = DockStyle.Fill;
      this.dgvLsService.Location = new Point(3, 3);
      this.dgvLsService.Name = "dgvLsService";
      this.dgvLsService.Size = new Size(1215, 414);
      this.dgvLsService.TabIndex = 7;
      this.dgvLsService.CellBeginEdit += new DataGridViewCellCancelEventHandler(this.dgvLsService_CellBeginEdit);
      this.dgvLsService.CellEndEdit += new DataGridViewCellEventHandler(this.dgvLsService_CellEndEdit);
      this.dgvLsService.CellFormatting += new DataGridViewCellFormattingEventHandler(this.dgvLsService_CellFormatting);
      this.dgvLsService.CellMouseClick += new DataGridViewCellMouseEventHandler(this.dgvLsService_CellMouseClick);
      this.dgvLsService.CellMouseDown += new DataGridViewCellMouseEventHandler(this.dgvLsService_CellMouseDown);
      this.dgvLsService.CellValueChanged += new DataGridViewCellEventHandler(this.dgvLsService_CellValueChanged);
      this.dgvLsService.ColumnWidthChanged += new DataGridViewColumnEventHandler(this.dgvLsService_ColumnWidthChanged);
      this.dgvLsService.CurrentCellDirtyStateChanged += new EventHandler(this.dgvLsService_CurrentCellDirtyStateChanged);
      this.dgvLsService.DataError += new DataGridViewDataErrorEventHandler(this.dataGridView1_DataError);
      this.dgvLsService.KeyUp += new KeyEventHandler(this.dgvLsService_KeyUp);
      this.pnLsService.BackColor = Color.Transparent;
      this.pnLsService.Controls.Add((Control) this.btnPastTimeLsService);
      this.pnLsService.Controls.Add((Control) this.btnDelLsService);
      this.pnLsService.Controls.Add((Control) this.btnAddLsService);
      this.pnLsService.Controls.Add((Control) this.btnSaveLsService);
      this.pnLsService.Dock = DockStyle.Bottom;
      this.pnLsService.Location = new Point(3, 417);
      this.pnLsService.Name = "pnLsService";
      this.pnLsService.Size = new Size(1215, 36);
      this.pnLsService.TabIndex = 6;
      this.btnPastTimeLsService.Image = (Image) componentResourceManager.GetObject("btnPastTimeLsService.Image");
      this.btnPastTimeLsService.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnPastTimeLsService.Location = new Point(356, 3);
      this.btnPastTimeLsService.Name = "btnPastTimeLsService";
      this.btnPastTimeLsService.Size = new Size(152, 30);
      this.btnPastTimeLsService.TabIndex = 10;
      this.btnPastTimeLsService.Text = "Прошлое время";
      this.btnPastTimeLsService.TextAlign = ContentAlignment.MiddleRight;
      this.btnPastTimeLsService.UseVisualStyleBackColor = true;
      this.btnPastTimeLsService.Click += new EventHandler(this.btnPastTimeLsService_Click);
      this.btnDelLsService.Image = (Image) componentResourceManager.GetObject("btnDelLsService.Image");
      this.btnDelLsService.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnDelLsService.Location = new Point(123, 3);
      this.btnDelLsService.Name = "btnDelLsService";
      this.btnDelLsService.Size = new Size(108, 30);
      this.btnDelLsService.TabIndex = 6;
      this.btnDelLsService.Text = "Удалить";
      this.btnDelLsService.TextAlign = ContentAlignment.MiddleRight;
      this.btnDelLsService.UseVisualStyleBackColor = true;
      this.btnDelLsService.Click += new EventHandler(this.btnDelLsService_Click);
      this.btnAddLsService.Image = (Image) componentResourceManager.GetObject("btnAddLsService.Image");
      this.btnAddLsService.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnAddLsService.Location = new Point(6, 3);
      this.btnAddLsService.Name = "btnAddLsService";
      this.btnAddLsService.Size = new Size(111, 30);
      this.btnAddLsService.TabIndex = 5;
      this.btnAddLsService.Text = "Добавить";
      this.btnAddLsService.TextAlign = ContentAlignment.MiddleRight;
      this.btnAddLsService.UseVisualStyleBackColor = true;
      this.btnAddLsService.Click += new EventHandler(this.btnAddLsService_Click);
      this.btnSaveLsService.Image = (Image) componentResourceManager.GetObject("btnSaveLsService.Image");
      this.btnSaveLsService.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnSaveLsService.Location = new Point(237, 3);
      this.btnSaveLsService.Name = "btnSaveLsService";
      this.btnSaveLsService.Size = new Size(113, 30);
      this.btnSaveLsService.TabIndex = 4;
      this.btnSaveLsService.Text = "Сохранить";
      this.btnSaveLsService.TextAlign = ContentAlignment.MiddleRight;
      this.btnSaveLsService.UseVisualStyleBackColor = true;
      this.btnSaveLsService.Click += new EventHandler(this.btnSaveLsService_Click);
      this.ucLsSupplier1.CurrentPeriod = (Kvartplata.Classes.Period) null;
      this.ucLsSupplier1.Dock = DockStyle.Bottom;
      this.ucLsSupplier1.Font = new Font("Microsoft Sans Serif", 10f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.ucLsSupplier1.Location = new Point(3, 453);
      this.ucLsSupplier1.LsClient = (Kvartplata.Classes.LsClient) null;
      this.ucLsSupplier1.LsService = (LsService) null;
      this.ucLsSupplier1.Margin = new Padding(4);
      this.ucLsSupplier1.Name = "ucLsSupplier1";
      this.ucLsSupplier1.PastTime = false;
      this.ucLsSupplier1.Size = new Size(1215, 213);
      this.ucLsSupplier1.TabIndex = 5;
      this.tpServiceParam.Controls.Add((Control) this.dgvServiceParam);
      this.tpServiceParam.Controls.Add((Control) this.pnServiceParam);
      this.tpServiceParam.Location = new Point(4, 25);
      this.tpServiceParam.Name = "tpServiceParam";
      this.tpServiceParam.Padding = new Padding(3);
      this.tpServiceParam.Size = new Size(1221, 669);
      this.tpServiceParam.TabIndex = 1;
      this.tpServiceParam.Text = "Параметры по услугам";
      this.tpServiceParam.UseVisualStyleBackColor = true;
      this.dgvServiceParam.BackgroundColor = Color.AliceBlue;
      this.dgvServiceParam.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvServiceParam.ContextMenuStrip = this.contextMenuStrip1;
      this.dgvServiceParam.Dock = DockStyle.Fill;
      this.dgvServiceParam.Location = new Point(3, 43);
      this.dgvServiceParam.Name = "dgvServiceParam";
      this.dgvServiceParam.Size = new Size(1215, 623);
      this.dgvServiceParam.TabIndex = 4;
      this.dgvServiceParam.CellBeginEdit += new DataGridViewCellCancelEventHandler(this.dgvServiceParam_CellBeginEdit);
      this.dgvServiceParam.CellEndEdit += new DataGridViewCellEventHandler(this.dgvServiceParam_CellEndEdit);
      this.dgvServiceParam.CellFormatting += new DataGridViewCellFormattingEventHandler(this.dgvServiceParam_CellFormatting);
      this.dgvServiceParam.CellMouseDown += new DataGridViewCellMouseEventHandler(this.dgvLodgers_CellMouseDown);
      this.dgvServiceParam.ColumnWidthChanged += new DataGridViewColumnEventHandler(this.dgvServiceParam_ColumnWidthChanged);
      this.dgvServiceParam.CurrentCellDirtyStateChanged += new EventHandler(this.dgvServiceParam_CurrentCellDirtyStateChanged);
      this.dgvServiceParam.DataError += new DataGridViewDataErrorEventHandler(this.dataGridView1_DataError);
      this.pnServiceParam.Controls.Add((Control) this.lblService);
      this.pnServiceParam.Controls.Add((Control) this.cmbService);
      this.pnServiceParam.Dock = DockStyle.Top;
      this.pnServiceParam.Location = new Point(3, 3);
      this.pnServiceParam.Name = "pnServiceParam";
      this.pnServiceParam.Size = new Size(1215, 40);
      this.pnServiceParam.TabIndex = 2;
      this.lblService.AutoSize = true;
      this.lblService.Location = new Point(3, 9);
      this.lblService.Name = "lblService";
      this.lblService.Size = new Size(54, 16);
      this.lblService.TabIndex = 1;
      this.lblService.Text = "Услуга";
      this.cmbService.FormattingEnabled = true;
      this.cmbService.Location = new Point(63, 6);
      this.cmbService.Name = "cmbService";
      this.cmbService.Size = new Size(437, 24);
      this.cmbService.TabIndex = 0;
      this.cmbService.SelectionChangeCommitted += new EventHandler(this.cmbService_SelectionChangeCommitted);
      this.tpSaldo.Controls.Add((Control) this.tcntrlBalance);
      this.hp.SetHelpKeyword((Control) this.tpSaldo, "kv45.html");
      this.hp.SetHelpNavigator((Control) this.tpSaldo, HelpNavigator.Topic);
      this.tpSaldo.Location = new Point(4, 46);
      this.tpSaldo.Name = "tpSaldo";
      this.tpSaldo.Padding = new Padding(3);
      this.hp.SetShowHelp((Control) this.tpSaldo, true);
      this.tpSaldo.Size = new Size(1237, 706);
      this.tpSaldo.TabIndex = 3;
      this.tpSaldo.Text = "Сальдо по счету";
      this.tpSaldo.UseVisualStyleBackColor = true;
      this.tcntrlBalance.Controls.Add((Control) this.tpBalance);
      this.tcntrlBalance.Controls.Add((Control) this.tpBalancePeni);
      this.tcntrlBalance.Controls.Add((Control) this.tpSocSaldo);
      this.tcntrlBalance.Dock = DockStyle.Fill;
      this.tcntrlBalance.Location = new Point(3, 3);
      this.tcntrlBalance.Name = "tcntrlBalance";
      this.tcntrlBalance.SelectedIndex = 0;
      this.tcntrlBalance.Size = new Size(1231, 700);
      this.tcntrlBalance.TabIndex = 1;
      this.tcntrlBalance.SelectedIndexChanged += new EventHandler(this.tcntrlBalance_SelectedIndexChanged);
      this.tpBalance.Controls.Add((Control) this.dgvBalance);
      this.tpBalance.Controls.Add((Control) this.pnBalance);
      this.tpBalance.Controls.Add((Control) this.pnFilterReceiptType);
      this.tpBalance.Location = new Point(4, 25);
      this.tpBalance.Name = "tpBalance";
      this.tpBalance.Padding = new Padding(3);
      this.tpBalance.Size = new Size(1223, 671);
      this.tpBalance.TabIndex = 0;
      this.tpBalance.Text = "Основные начисления";
      this.tpBalance.UseVisualStyleBackColor = true;
      this.dgvBalance.AllowDrop = true;
      this.dgvBalance.BackgroundColor = Color.AliceBlue;
      this.dgvBalance.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvBalance.ContextMenuStrip = this.cmDetail;
      this.dgvBalance.Dock = DockStyle.Fill;
      this.dgvBalance.Location = new Point(191, 48);
      this.dgvBalance.Name = "dgvBalance";
      this.dgvBalance.RowHeadersVisible = false;
      this.dgvBalance.Size = new Size(1029, 620);
      this.dgvBalance.TabIndex = 2;
      this.dgvBalance.CellBeginEdit += new DataGridViewCellCancelEventHandler(this.dgvMainCounters_CellBeginEdit);
      this.dgvBalance.CellMouseDoubleClick += new DataGridViewCellMouseEventHandler(this.dgvBalance_CellMouseDoubleClick);
      this.dgvBalance.CellMouseDown += new DataGridViewCellMouseEventHandler(this.dgvBalance_CellMouseDown);
      this.dgvBalance.ColumnWidthChanged += new DataGridViewColumnEventHandler(this.dgvBalance_ColumnWidthChanged);
      this.dgvBalance.DataError += new DataGridViewDataErrorEventHandler(this.dataGridView1_DataError);
      this.cmDetail.Items.AddRange(new ToolStripItem[2]
      {
        (ToolStripItem) this.tsmiDetailCorrectRent,
        (ToolStripItem) this.tsmiDetailAllRent
      });
      this.cmDetail.Name = "cmDetail";
      this.cmDetail.Size = new Size(232, 48);
      this.tsmiDetailCorrectRent.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiDetailCorrectRent.Name = "tsmiDetailCorrectRent";
      this.tsmiDetailCorrectRent.Size = new Size(231, 22);
      this.tsmiDetailCorrectRent.Text = "Детализация перерасчета";
      this.tsmiDetailCorrectRent.Click += new EventHandler(this.TsmiDetailCorrectRent_Click);
      this.tsmiDetailAllRent.Font = new Font("Tahoma", 9.75f);
      this.tsmiDetailAllRent.Name = "tsmiDetailAllRent";
      this.tsmiDetailAllRent.Size = new Size(231, 22);
      this.tsmiDetailAllRent.Text = "Полная детализация";
      this.tsmiDetailAllRent.Click += new EventHandler(this.tsmiDetailAllRent_Click);
      this.pnBalance.BackColor = Color.Transparent;
      this.pnBalance.Controls.Add((Control) this.lblNDS);
      this.pnBalance.Controls.Add((Control) this.lblNDSText);
      this.pnBalance.Controls.Add((Control) this.lblComp);
      this.pnBalance.Controls.Add((Control) this.lblCompText);
      this.pnBalance.Controls.Add((Control) this.lblSubsText);
      this.pnBalance.Controls.Add((Control) this.lblSubs);
      this.pnBalance.Controls.Add((Control) this.lblRentMonth);
      this.pnBalance.Controls.Add((Control) this.lblRentMonthText);
      this.pnBalance.Controls.Add((Control) this.lblOverText);
      this.pnBalance.Controls.Add((Control) this.lblOverpay);
      this.pnBalance.Controls.Add((Control) this.btnMainCorrect);
      this.pnBalance.Controls.Add((Control) this.lblOutText);
      this.pnBalance.Controls.Add((Control) this.lblPayText);
      this.pnBalance.Controls.Add((Control) this.lblPastMSPText);
      this.pnBalance.Controls.Add((Control) this.lblMSPText);
      this.pnBalance.Controls.Add((Control) this.lblPastText);
      this.pnBalance.Controls.Add((Control) this.lblOut);
      this.pnBalance.Controls.Add((Control) this.lblRentText);
      this.pnBalance.Controls.Add((Control) this.lblInText);
      this.pnBalance.Controls.Add((Control) this.lblPayment);
      this.pnBalance.Controls.Add((Control) this.lblMSPPast);
      this.pnBalance.Controls.Add((Control) this.lblMSP);
      this.pnBalance.Controls.Add((Control) this.lblRentPast);
      this.pnBalance.Controls.Add((Control) this.lblRent);
      this.pnBalance.Controls.Add((Control) this.lblIn);
      this.pnBalance.Dock = DockStyle.Left;
      this.pnBalance.Location = new Point(3, 48);
      this.pnBalance.Name = "pnBalance";
      this.pnBalance.Size = new Size(188, 620);
      this.pnBalance.TabIndex = 1;
      this.lblNDS.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblNDS.Location = new Point(90, (int) byte.MaxValue);
      this.lblNDS.Name = "lblNDS";
      this.lblNDS.Size = new Size(90, 16);
      this.lblNDS.TabIndex = 26;
      this.lblNDS.Text = "NDS";
      this.lblNDS.TextAlign = ContentAlignment.TopRight;
      this.lblNDSText.AutoSize = true;
      this.lblNDSText.Location = new Point(3, (int) byte.MaxValue);
      this.lblNDSText.Name = "lblNDSText";
      this.lblNDSText.Size = new Size(36, 16);
      this.lblNDSText.TabIndex = 25;
      this.lblNDSText.Text = "НДС";
      this.lblComp.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblComp.Location = new Point(94, 110);
      this.lblComp.Name = "lblComp";
      this.lblComp.Size = new Size(86, 16);
      this.lblComp.TabIndex = 24;
      this.lblComp.Text = "label19";
      this.lblComp.TextAlign = ContentAlignment.TopRight;
      this.lblCompText.AutoSize = true;
      this.lblCompText.Location = new Point(3, 110);
      this.lblCompText.Name = "lblCompText";
      this.lblCompText.Size = new Size(95, 16);
      this.lblCompText.TabIndex = 23;
      this.lblCompText.Text = "Компенсация";
      this.lblSubsText.Location = new Point(3, 235);
      this.lblSubsText.Name = "lblSubsText";
      this.lblSubsText.Size = new Size(88, 16);
      this.lblSubsText.TabIndex = 22;
      this.lblSubsText.Text = "Субсидия";
      this.lblSubs.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblSubs.Location = new Point(91, 235);
      this.lblSubs.Name = "lblSubs";
      this.lblSubs.Size = new Size(90, 16);
      this.lblSubs.TabIndex = 21;
      this.lblSubs.Text = "label10";
      this.lblSubs.TextAlign = ContentAlignment.TopRight;
      this.lblRentMonth.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblRentMonth.Location = new Point(101, 130);
      this.lblRentMonth.Name = "lblRentMonth";
      this.lblRentMonth.Size = new Size(80, 16);
      this.lblRentMonth.TabIndex = 20;
      this.lblRentMonth.Text = "label8";
      this.lblRentMonth.TextAlign = ContentAlignment.MiddleRight;
      this.lblRentMonthText.AutoSize = true;
      this.lblRentMonthText.Location = new Point(3, 130);
      this.lblRentMonthText.Name = "lblRentMonthText";
      this.lblRentMonthText.Size = new Size(100, 16);
      this.lblRentMonthText.TabIndex = 19;
      this.lblRentMonthText.Text = "Итого начисл.";
      this.lblOverText.Location = new Point(3, 215);
      this.lblOverText.Name = "lblOverText";
      this.lblOverText.Size = new Size(88, 16);
      this.lblOverText.TabIndex = 18;
      this.lblOverText.Text = "Переплата";
      this.lblOverpay.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblOverpay.Location = new Point(91, 215);
      this.lblOverpay.Name = "lblOverpay";
      this.lblOverpay.Size = new Size(90, 16);
      this.lblOverpay.TabIndex = 17;
      this.lblOverpay.Text = "label10";
      this.lblOverpay.TextAlign = ContentAlignment.TopRight;
      this.btnMainCorrect.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.btnMainCorrect.Image = (Image) componentResourceManager.GetObject("btnMainCorrect.Image");
      this.btnMainCorrect.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnMainCorrect.Location = new Point(6, 573);
      this.btnMainCorrect.Name = "btnMainCorrect";
      this.btnMainCorrect.RightToLeft = RightToLeft.No;
      this.btnMainCorrect.Size = new Size(141, 30);
      this.btnMainCorrect.TabIndex = 16;
      this.btnMainCorrect.Tag = (object) "1";
      this.btnMainCorrect.Text = "Корректировки";
      this.btnMainCorrect.TextAlign = ContentAlignment.MiddleRight;
      this.btnMainCorrect.UseVisualStyleBackColor = true;
      this.btnMainCorrect.Click += new EventHandler(this.btnMainCorrect_Click);
      this.lblOutText.Location = new Point(3, 170);
      this.lblOutText.Name = "lblOutText";
      this.lblOutText.Size = new Size(88, 16);
      this.lblOutText.TabIndex = 14;
      this.lblOutText.Text = "Исходящее";
      this.lblPayText.Location = new Point(3, 150);
      this.lblPayText.Name = "lblPayText";
      this.lblPayText.Size = new Size(88, 16);
      this.lblPayText.TabIndex = 13;
      this.lblPayText.Text = "Оплачено";
      this.lblPastMSPText.Location = new Point(3, 90);
      this.lblPastMSPText.Name = "lblPastMSPText";
      this.lblPastMSPText.Size = new Size(96, 16);
      this.lblPastMSPText.TabIndex = 12;
      this.lblPastMSPText.Text = "Перер-т МСП";
      this.lblMSPText.Location = new Point(3, 70);
      this.lblMSPText.Name = "lblMSPText";
      this.lblMSPText.Size = new Size(88, 16);
      this.lblMSPText.TabIndex = 11;
      this.lblMSPText.Text = "МСП";
      this.lblPastText.Location = new Point(3, 50);
      this.lblPastText.Name = "lblPastText";
      this.lblPastText.Size = new Size(88, 16);
      this.lblPastText.TabIndex = 10;
      this.lblPastText.Text = "Перерасчет";
      this.lblOut.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblOut.Location = new Point(91, 170);
      this.lblOut.Name = "lblOut";
      this.lblOut.Size = new Size(90, 16);
      this.lblOut.TabIndex = 9;
      this.lblOut.Text = "label10";
      this.lblOut.TextAlign = ContentAlignment.TopRight;
      this.lblRentText.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.lblRentText.Location = new Point(3, 30);
      this.lblRentText.Name = "lblRentText";
      this.lblRentText.Size = new Size(88, 16);
      this.lblRentText.TabIndex = 8;
      this.lblRentText.Text = "Начислено";
      this.lblRentText.TextAlign = ContentAlignment.MiddleLeft;
      this.lblInText.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.lblInText.Location = new Point(3, 10);
      this.lblInText.Name = "lblInText";
      this.lblInText.Size = new Size(88, 16);
      this.lblInText.TabIndex = 7;
      this.lblInText.Text = "Входящее";
      this.lblInText.TextAlign = ContentAlignment.MiddleLeft;
      this.lblPayment.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblPayment.Location = new Point(91, 150);
      this.lblPayment.Name = "lblPayment";
      this.lblPayment.Size = new Size(90, 16);
      this.lblPayment.TabIndex = 6;
      this.lblPayment.Text = "label7";
      this.lblPayment.TextAlign = ContentAlignment.TopRight;
      this.lblMSPPast.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblMSPPast.Location = new Point(94, 90);
      this.lblMSPPast.Name = "lblMSPPast";
      this.lblMSPPast.Size = new Size(87, 16);
      this.lblMSPPast.TabIndex = 5;
      this.lblMSPPast.Text = "label6";
      this.lblMSPPast.TextAlign = ContentAlignment.TopRight;
      this.lblMSP.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblMSP.Location = new Point(91, 70);
      this.lblMSP.Name = "lblMSP";
      this.lblMSP.Size = new Size(90, 16);
      this.lblMSP.TabIndex = 4;
      this.lblMSP.Text = "label5";
      this.lblMSP.TextAlign = ContentAlignment.TopRight;
      this.lblRentPast.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblRentPast.Location = new Point(91, 50);
      this.lblRentPast.Name = "lblRentPast";
      this.lblRentPast.Size = new Size(90, 16);
      this.lblRentPast.TabIndex = 3;
      this.lblRentPast.Text = "label4";
      this.lblRentPast.TextAlign = ContentAlignment.TopRight;
      this.lblRent.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblRent.Location = new Point(90, 30);
      this.lblRent.Name = "lblRent";
      this.lblRent.Size = new Size(90, 16);
      this.lblRent.TabIndex = 2;
      this.lblRent.Text = "label3";
      this.lblRent.TextAlign = ContentAlignment.TopRight;
      this.lblIn.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblIn.Location = new Point(91, 10);
      this.lblIn.Name = "lblIn";
      this.lblIn.Size = new Size(90, 16);
      this.lblIn.TabIndex = 1;
      this.lblIn.Text = "label2";
      this.lblIn.TextAlign = ContentAlignment.TopRight;
      this.pnFilterReceiptType.Controls.Add((Control) this.cbReceiptType);
      this.pnFilterReceiptType.Controls.Add((Control) this.lbReceiptType);
      this.pnFilterReceiptType.Dock = DockStyle.Top;
      this.pnFilterReceiptType.Location = new Point(3, 3);
      this.pnFilterReceiptType.Name = "pnFilterReceiptType";
      this.pnFilterReceiptType.Size = new Size(1217, 45);
      this.pnFilterReceiptType.TabIndex = 3;
      this.cbReceiptType.FormattingEnabled = true;
      this.cbReceiptType.Location = new Point(131, 7);
      this.cbReceiptType.Name = "cbReceiptType";
      this.cbReceiptType.Size = new Size(303, 24);
      this.cbReceiptType.TabIndex = 5;
      this.cbReceiptType.SelectedIndexChanged += new EventHandler(this.cbReceiptType_SelectedIndexChanged);
      this.lbReceiptType.AutoSize = true;
      this.lbReceiptType.Location = new Point(7, 10);
      this.lbReceiptType.Name = "lbReceiptType";
      this.lbReceiptType.Size = new Size(106, 16);
      this.lbReceiptType.TabIndex = 4;
      this.lbReceiptType.Text = "Тип квитанции";
      this.tpBalancePeni.Controls.Add((Control) this.dgvPeni);
      this.tpBalancePeni.Controls.Add((Control) this.pnPeni);
      this.tpBalancePeni.Controls.Add((Control) this.pnFilterPeniReceiptType);
      this.tpBalancePeni.Location = new Point(4, 25);
      this.tpBalancePeni.Name = "tpBalancePeni";
      this.tpBalancePeni.Padding = new Padding(3);
      this.tpBalancePeni.Size = new Size(1223, 671);
      this.tpBalancePeni.TabIndex = 1;
      this.tpBalancePeni.Text = "Пени";
      this.tpBalancePeni.UseVisualStyleBackColor = true;
      this.dgvPeni.AllowDrop = true;
      this.dgvPeni.BackgroundColor = Color.AliceBlue;
      this.dgvPeni.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvPeni.Dock = DockStyle.Fill;
      this.dgvPeni.Location = new Point(191, 48);
      this.dgvPeni.Name = "dgvPeni";
      this.dgvPeni.RowHeadersVisible = false;
      this.dgvPeni.Size = new Size(1029, 620);
      this.dgvPeni.TabIndex = 4;
      this.dgvPeni.CellMouseDoubleClick += new DataGridViewCellMouseEventHandler(this.dgvPeni_CellMouseDoubleClick);
      this.dgvPeni.ColumnWidthChanged += new DataGridViewColumnEventHandler(this.dgvPeni_ColumnWidthChanged);
      this.dgvPeni.DataError += new DataGridViewDataErrorEventHandler(this.dataGridView1_DataError);
      this.pnPeni.BackColor = Color.Transparent;
      this.pnPeni.Controls.Add((Control) this.label16);
      this.pnPeni.Controls.Add((Control) this.lblRentFull);
      this.pnPeni.Controls.Add((Control) this.lblOverPeniText);
      this.pnPeni.Controls.Add((Control) this.lblOverPeni);
      this.pnPeni.Controls.Add((Control) this.btnCorrect);
      this.pnPeni.Controls.Add((Control) this.label1);
      this.pnPeni.Controls.Add((Control) this.label2);
      this.pnPeni.Controls.Add((Control) this.label10);
      this.pnPeni.Controls.Add((Control) this.lblOutPeni);
      this.pnPeni.Controls.Add((Control) this.label12);
      this.pnPeni.Controls.Add((Control) this.label13);
      this.pnPeni.Controls.Add((Control) this.lblPayPeni);
      this.pnPeni.Controls.Add((Control) this.lblCorrectPeni);
      this.pnPeni.Controls.Add((Control) this.lblRentPeni);
      this.pnPeni.Controls.Add((Control) this.lblInPeni);
      this.pnPeni.Dock = DockStyle.Left;
      this.pnPeni.Location = new Point(3, 48);
      this.pnPeni.Name = "pnPeni";
      this.pnPeni.Size = new Size(188, 620);
      this.pnPeni.TabIndex = 3;
      this.label16.Location = new Point(3, 120);
      this.label16.Name = "label16";
      this.label16.Size = new Size(96, 16);
      this.label16.TabIndex = 22;
      this.label16.Text = "Полные пени";
      this.lblRentFull.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblRentFull.Location = new Point(92, 120);
      this.lblRentFull.Name = "lblRentFull";
      this.lblRentFull.Size = new Size(90, 16);
      this.lblRentFull.TabIndex = 21;
      this.lblRentFull.Text = "label10";
      this.lblRentFull.TextAlign = ContentAlignment.TopRight;
      this.lblOverPeniText.Location = new Point(3, 140);
      this.lblOverPeniText.Name = "lblOverPeniText";
      this.lblOverPeniText.Size = new Size(88, 16);
      this.lblOverPeniText.TabIndex = 20;
      this.lblOverPeniText.Text = "Переплата";
      this.lblOverPeni.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblOverPeni.Location = new Point(91, 140);
      this.lblOverPeni.Name = "lblOverPeni";
      this.lblOverPeni.Size = new Size(90, 16);
      this.lblOverPeni.TabIndex = 19;
      this.lblOverPeni.Text = "label10";
      this.lblOverPeni.TextAlign = ContentAlignment.TopRight;
      this.btnCorrect.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.btnCorrect.Image = (Image) componentResourceManager.GetObject("btnCorrect.Image");
      this.btnCorrect.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnCorrect.Location = new Point(10, 578);
      this.btnCorrect.Name = "btnCorrect";
      this.btnCorrect.RightToLeft = RightToLeft.No;
      this.btnCorrect.Size = new Size(141, 30);
      this.btnCorrect.TabIndex = 15;
      this.btnCorrect.Text = "Корректировки";
      this.btnCorrect.TextAlign = ContentAlignment.MiddleRight;
      this.btnCorrect.UseVisualStyleBackColor = true;
      this.btnCorrect.Click += new EventHandler(this.btnCorrect_Click);
      this.label1.Location = new Point(3, 90);
      this.label1.Name = "label1";
      this.label1.Size = new Size(88, 16);
      this.label1.TabIndex = 14;
      this.label1.Text = "Исходящее";
      this.label2.Location = new Point(3, 70);
      this.label2.Name = "label2";
      this.label2.Size = new Size(88, 16);
      this.label2.TabIndex = 13;
      this.label2.Text = "Оплачено";
      this.label10.Location = new Point(3, 50);
      this.label10.Name = "label10";
      this.label10.Size = new Size(88, 16);
      this.label10.TabIndex = 10;
      this.label10.Text = "Коррект-ки";
      this.lblOutPeni.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblOutPeni.Location = new Point(91, 90);
      this.lblOutPeni.Name = "lblOutPeni";
      this.lblOutPeni.Size = new Size(90, 16);
      this.lblOutPeni.TabIndex = 9;
      this.lblOutPeni.Text = "label10";
      this.lblOutPeni.TextAlign = ContentAlignment.TopRight;
      this.label12.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.label12.Location = new Point(3, 30);
      this.label12.Name = "label12";
      this.label12.Size = new Size(88, 16);
      this.label12.TabIndex = 8;
      this.label12.Text = "Начислено";
      this.label12.TextAlign = ContentAlignment.MiddleLeft;
      this.label13.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.label13.Location = new Point(3, 10);
      this.label13.Name = "label13";
      this.label13.Size = new Size(88, 16);
      this.label13.TabIndex = 7;
      this.label13.Text = "Входящее";
      this.label13.TextAlign = ContentAlignment.MiddleLeft;
      this.lblPayPeni.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblPayPeni.Location = new Point(91, 70);
      this.lblPayPeni.Name = "lblPayPeni";
      this.lblPayPeni.Size = new Size(90, 16);
      this.lblPayPeni.TabIndex = 6;
      this.lblPayPeni.Text = "label7";
      this.lblPayPeni.TextAlign = ContentAlignment.TopRight;
      this.lblCorrectPeni.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblCorrectPeni.Location = new Point(91, 50);
      this.lblCorrectPeni.Name = "lblCorrectPeni";
      this.lblCorrectPeni.Size = new Size(90, 16);
      this.lblCorrectPeni.TabIndex = 3;
      this.lblCorrectPeni.Text = "label4";
      this.lblCorrectPeni.TextAlign = ContentAlignment.TopRight;
      this.lblRentPeni.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblRentPeni.Location = new Point(90, 30);
      this.lblRentPeni.Name = "lblRentPeni";
      this.lblRentPeni.Size = new Size(90, 16);
      this.lblRentPeni.TabIndex = 2;
      this.lblRentPeni.Text = "label3";
      this.lblRentPeni.TextAlign = ContentAlignment.TopRight;
      this.lblInPeni.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblInPeni.Location = new Point(91, 10);
      this.lblInPeni.Name = "lblInPeni";
      this.lblInPeni.Size = new Size(90, 16);
      this.lblInPeni.TabIndex = 1;
      this.lblInPeni.Text = "label2";
      this.lblInPeni.TextAlign = ContentAlignment.TopRight;
      this.pnFilterPeniReceiptType.Controls.Add((Control) this.cbPeniReceiptType);
      this.pnFilterPeniReceiptType.Controls.Add((Control) this.lblPeniReceiptType);
      this.pnFilterPeniReceiptType.Dock = DockStyle.Top;
      this.pnFilterPeniReceiptType.Location = new Point(3, 3);
      this.pnFilterPeniReceiptType.Name = "pnFilterPeniReceiptType";
      this.pnFilterPeniReceiptType.Size = new Size(1217, 45);
      this.pnFilterPeniReceiptType.TabIndex = 5;
      this.cbPeniReceiptType.FormattingEnabled = true;
      this.cbPeniReceiptType.Location = new Point(131, 7);
      this.cbPeniReceiptType.Name = "cbPeniReceiptType";
      this.cbPeniReceiptType.Size = new Size(303, 24);
      this.cbPeniReceiptType.TabIndex = 5;
      this.cbPeniReceiptType.SelectedIndexChanged += new EventHandler(this.cbPeniReceiptType_SelectedIndexChanged);
      this.lblPeniReceiptType.AutoSize = true;
      this.lblPeniReceiptType.Location = new Point(7, 10);
      this.lblPeniReceiptType.Name = "lblPeniReceiptType";
      this.lblPeniReceiptType.Size = new Size(106, 16);
      this.lblPeniReceiptType.TabIndex = 4;
      this.lblPeniReceiptType.Text = "Тип квитанции";
      this.tpSocSaldo.Controls.Add((Control) this.dgvSocSaldo);
      this.tpSocSaldo.Controls.Add((Control) this.pnSocSaldo);
      this.tpSocSaldo.Controls.Add((Control) this.pnUslSoc);
      this.tpSocSaldo.Location = new Point(4, 25);
      this.tpSocSaldo.Name = "tpSocSaldo";
      this.tpSocSaldo.Padding = new Padding(3);
      this.tpSocSaldo.Size = new Size(1223, 671);
      this.tpSocSaldo.TabIndex = 2;
      this.tpSocSaldo.Text = "Льготы";
      this.tpSocSaldo.UseVisualStyleBackColor = true;
      this.dgvSocSaldo.BackgroundColor = Color.AliceBlue;
      this.dgvSocSaldo.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvSocSaldo.ContextMenuStrip = this.cmDetail;
      this.dgvSocSaldo.Dock = DockStyle.Fill;
      this.dgvSocSaldo.Location = new Point(191, 44);
      this.dgvSocSaldo.Name = "dgvSocSaldo";
      this.dgvSocSaldo.RowHeadersVisible = false;
      this.dgvSocSaldo.Size = new Size(1029, 624);
      this.dgvSocSaldo.TabIndex = 2;
      this.dgvSocSaldo.ColumnWidthChanged += new DataGridViewColumnEventHandler(this.dgvSocSaldo_ColumnWidthChanged);
      this.dgvSocSaldo.DataError += new DataGridViewDataErrorEventHandler(this.dataGridView1_DataError);
      this.pnSocSaldo.Controls.Add((Control) this.btnMspCorrect);
      this.pnSocSaldo.Controls.Add((Control) this.label9);
      this.pnSocSaldo.Controls.Add((Control) this.label11);
      this.pnSocSaldo.Controls.Add((Control) this.label14);
      this.pnSocSaldo.Controls.Add((Control) this.label15);
      this.pnSocSaldo.Controls.Add((Control) this.lblOutSoc);
      this.pnSocSaldo.Controls.Add((Control) this.label17);
      this.pnSocSaldo.Controls.Add((Control) this.label18);
      this.pnSocSaldo.Controls.Add((Control) this.lblPaySoc);
      this.pnSocSaldo.Controls.Add((Control) this.lblCorrSoc);
      this.pnSocSaldo.Controls.Add((Control) this.lblPastSoc);
      this.pnSocSaldo.Controls.Add((Control) this.lblRentSoc);
      this.pnSocSaldo.Controls.Add((Control) this.lblInSoc);
      this.pnSocSaldo.Dock = DockStyle.Left;
      this.pnSocSaldo.Location = new Point(3, 44);
      this.pnSocSaldo.Name = "pnSocSaldo";
      this.pnSocSaldo.Size = new Size(188, 624);
      this.pnSocSaldo.TabIndex = 1;
      this.btnMspCorrect.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;
      this.btnMspCorrect.Image = (Image) componentResourceManager.GetObject("btnMspCorrect.Image");
      this.btnMspCorrect.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnMspCorrect.Location = new Point(10, 594);
      this.btnMspCorrect.Name = "btnMspCorrect";
      this.btnMspCorrect.RightToLeft = RightToLeft.No;
      this.btnMspCorrect.Size = new Size(141, 30);
      this.btnMspCorrect.TabIndex = 27;
      this.btnMspCorrect.Tag = (object) "2";
      this.btnMspCorrect.Text = "Корректировки";
      this.btnMspCorrect.TextAlign = ContentAlignment.MiddleRight;
      this.btnMspCorrect.UseVisualStyleBackColor = true;
      this.btnMspCorrect.Click += new EventHandler(this.btnMainCorrect_Click);
      this.label9.Location = new Point(3, 112);
      this.label9.Name = "label9";
      this.label9.Size = new Size(88, 16);
      this.label9.TabIndex = 26;
      this.label9.Text = "Исходящее";
      this.label11.Location = new Point(3, 92);
      this.label11.Name = "label11";
      this.label11.Size = new Size(92, 16);
      this.label11.TabIndex = 25;
      this.label11.Text = "К выплате";
      this.label14.Location = new Point(3, 72);
      this.label14.Name = "label14";
      this.label14.Size = new Size(88, 16);
      this.label14.TabIndex = 24;
      this.label14.Text = "Коррект-и";
      this.label15.Location = new Point(3, 52);
      this.label15.Name = "label15";
      this.label15.Size = new Size(88, 16);
      this.label15.TabIndex = 23;
      this.label15.Text = "Перерасчет";
      this.lblOutSoc.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblOutSoc.Location = new Point(91, 112);
      this.lblOutSoc.Name = "lblOutSoc";
      this.lblOutSoc.Size = new Size(90, 16);
      this.lblOutSoc.TabIndex = 22;
      this.lblOutSoc.Text = "label10";
      this.lblOutSoc.TextAlign = ContentAlignment.TopRight;
      this.label17.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.label17.Location = new Point(3, 32);
      this.label17.Name = "label17";
      this.label17.Size = new Size(88, 16);
      this.label17.TabIndex = 21;
      this.label17.Text = "Начислено";
      this.label17.TextAlign = ContentAlignment.MiddleLeft;
      this.label18.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.label18.Location = new Point(3, 12);
      this.label18.Name = "label18";
      this.label18.Size = new Size(88, 16);
      this.label18.TabIndex = 20;
      this.label18.Text = "Входящее";
      this.label18.TextAlign = ContentAlignment.MiddleLeft;
      this.lblPaySoc.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblPaySoc.Location = new Point(91, 92);
      this.lblPaySoc.Name = "lblPaySoc";
      this.lblPaySoc.Size = new Size(90, 16);
      this.lblPaySoc.TabIndex = 19;
      this.lblPaySoc.Text = "label7";
      this.lblPaySoc.TextAlign = ContentAlignment.TopRight;
      this.lblCorrSoc.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblCorrSoc.Location = new Point(91, 72);
      this.lblCorrSoc.Name = "lblCorrSoc";
      this.lblCorrSoc.Size = new Size(90, 16);
      this.lblCorrSoc.TabIndex = 18;
      this.lblCorrSoc.Text = "label5";
      this.lblCorrSoc.TextAlign = ContentAlignment.TopRight;
      this.lblPastSoc.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblPastSoc.Location = new Point(91, 52);
      this.lblPastSoc.Name = "lblPastSoc";
      this.lblPastSoc.Size = new Size(90, 16);
      this.lblPastSoc.TabIndex = 17;
      this.lblPastSoc.Text = "label4";
      this.lblPastSoc.TextAlign = ContentAlignment.TopRight;
      this.lblRentSoc.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblRentSoc.Location = new Point(90, 32);
      this.lblRentSoc.Name = "lblRentSoc";
      this.lblRentSoc.Size = new Size(90, 16);
      this.lblRentSoc.TabIndex = 16;
      this.lblRentSoc.Text = "label3";
      this.lblRentSoc.TextAlign = ContentAlignment.TopRight;
      this.lblInSoc.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblInSoc.Location = new Point(91, 12);
      this.lblInSoc.Name = "lblInSoc";
      this.lblInSoc.Size = new Size(90, 16);
      this.lblInSoc.TabIndex = 15;
      this.lblInSoc.Text = "label2";
      this.lblInSoc.TextAlign = ContentAlignment.TopRight;
      this.pnUslSoc.Controls.Add((Control) this.cbMSPReceiptType);
      this.pnUslSoc.Controls.Add((Control) this.lblMSPReceiptType);
      this.pnUslSoc.Controls.Add((Control) this.cmbPersonMSP);
      this.pnUslSoc.Controls.Add((Control) this.cmbPerson);
      this.pnUslSoc.Controls.Add((Control) this.lblPersonMSP);
      this.pnUslSoc.Controls.Add((Control) this.lblPerson);
      this.pnUslSoc.Dock = DockStyle.Top;
      this.pnUslSoc.Location = new Point(3, 3);
      this.pnUslSoc.Name = "pnUslSoc";
      this.pnUslSoc.Size = new Size(1217, 41);
      this.pnUslSoc.TabIndex = 0;
      this.cbMSPReceiptType.FormattingEnabled = true;
      this.cbMSPReceiptType.Location = new Point(880, 6);
      this.cbMSPReceiptType.Name = "cbMSPReceiptType";
      this.cbMSPReceiptType.Size = new Size(141, 24);
      this.cbMSPReceiptType.TabIndex = 7;
      this.cbMSPReceiptType.Visible = false;
      this.cbMSPReceiptType.SelectedIndexChanged += new EventHandler(this.cbMSPReceiptType_SelectedIndexChanged);
      this.lblMSPReceiptType.AutoSize = true;
      this.lblMSPReceiptType.Location = new Point(759, 9);
      this.lblMSPReceiptType.Name = "lblMSPReceiptType";
      this.lblMSPReceiptType.Size = new Size(106, 16);
      this.lblMSPReceiptType.TabIndex = 6;
      this.lblMSPReceiptType.Text = "Тип квитанции";
      this.lblMSPReceiptType.Visible = false;
      this.cmbPersonMSP.FormattingEnabled = true;
      this.cmbPersonMSP.Location = new Point(464, 6);
      this.cmbPersonMSP.Name = "cmbPersonMSP";
      this.cmbPersonMSP.Size = new Size(289, 24);
      this.cmbPersonMSP.TabIndex = 3;
      this.cmbPersonMSP.SelectionChangeCommitted += new EventHandler(this.cmbPersonMSP_SelectionChangeCommitted);
      this.cmbPerson.FormattingEnabled = true;
      this.cmbPerson.Location = new Point(140, 6);
      this.cmbPerson.Name = "cmbPerson";
      this.cmbPerson.Size = new Size(259, 24);
      this.cmbPerson.TabIndex = 2;
      this.cmbPerson.SelectionChangeCommitted += new EventHandler(this.cmbPerson_SelectionChangeCommitted);
      this.lblPersonMSP.AutoSize = true;
      this.lblPersonMSP.Location = new Point(405, 9);
      this.lblPersonMSP.Name = "lblPersonMSP";
      this.lblPersonMSP.Size = new Size(53, 16);
      this.lblPersonMSP.TabIndex = 1;
      this.lblPersonMSP.Text = "Льгота";
      this.lblPerson.AutoSize = true;
      this.lblPerson.Location = new Point(3, 9);
      this.lblPerson.Name = "lblPerson";
      this.lblPerson.Size = new Size(131, 16);
      this.lblPerson.TabIndex = 0;
      this.lblPerson.Text = "Льготополучатель";
      this.tpLodgers.Controls.Add((Control) this.dgvLodgers);
      this.tpLodgers.Controls.Add((Control) this.pnLodgers);
      this.hp.SetHelpKeyword((Control) this.tpLodgers, "kv46.html");
      this.hp.SetHelpNavigator((Control) this.tpLodgers, HelpNavigator.Topic);
      this.tpLodgers.Location = new Point(4, 46);
      this.tpLodgers.Name = "tpLodgers";
      this.tpLodgers.Padding = new Padding(3);
      this.hp.SetShowHelp((Control) this.tpLodgers, true);
      this.tpLodgers.Size = new Size(1237, 706);
      this.tpLodgers.TabIndex = 4;
      this.tpLodgers.Text = "Жильцы";
      this.tpLodgers.UseVisualStyleBackColor = true;
      this.dgvLodgers.BackgroundColor = Color.AliceBlue;
      this.dgvLodgers.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvLodgers.ContextMenuStrip = this.cmLodgers;
      this.dgvLodgers.Dock = DockStyle.Fill;
      this.dgvLodgers.Location = new Point(3, 3);
      this.dgvLodgers.Name = "dgvLodgers";
      this.dgvLodgers.Size = new Size(1231, 639);
      this.dgvLodgers.TabIndex = 1;
      this.dgvLodgers.CellBeginEdit += new DataGridViewCellCancelEventHandler(this.dgvLodgers_CellBeginEdit);
      this.dgvLodgers.CellEndEdit += new DataGridViewCellEventHandler(this.dgvLodgers_CellEndEdit);
      this.dgvLodgers.CellFormatting += new DataGridViewCellFormattingEventHandler(this.dgvLodgers_CellFormatting);
      this.dgvLodgers.CellMouseDown += new DataGridViewCellMouseEventHandler(this.dgvLodgers_CellMouseDown);
      this.dgvLodgers.ColumnWidthChanged += new DataGridViewColumnEventHandler(this.dgvLodgers_ColumnWidthChanged);
      this.dgvLodgers.DataError += new DataGridViewDataErrorEventHandler(this.dataGridView1_DataError);
      this.cmLodgers.Items.AddRange(new ToolStripItem[2]
      {
        (ToolStripItem) this.tsmiPutDownStatusOwner,
        (ToolStripItem) this.tsmiRemoveStatusOwner
      });
      this.cmLodgers.Name = "cmLodgers";
      this.cmLodgers.Size = new Size(274, 48);
      this.tsmiPutDownStatusOwner.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiPutDownStatusOwner.Name = "tsmiPutDownStatusOwner";
      this.tsmiPutDownStatusOwner.Size = new Size(273, 22);
      this.tsmiPutDownStatusOwner.Text = "Проставить статус \"Собственник\"";
      this.tsmiPutDownStatusOwner.Click += new EventHandler(this.TsmiPutDownStatusOwner_Click);
      this.tsmiRemoveStatusOwner.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiRemoveStatusOwner.Name = "tsmiRemoveStatusOwner";
      this.tsmiRemoveStatusOwner.Size = new Size(273, 22);
      this.tsmiRemoveStatusOwner.Text = "Снять статус \"Собственник\"";
      this.tsmiRemoveStatusOwner.Click += new EventHandler(this.TsmiRemoveStatusOwner_Click);
      this.pnLodgers.Controls.Add((Control) this.txtVrJil);
      this.pnLodgers.Controls.Add((Control) this.txtJil);
      this.pnLodgers.Controls.Add((Control) this.lblVrJil);
      this.pnLodgers.Controls.Add((Control) this.lblJil);
      this.pnLodgers.Controls.Add((Control) this.lblLodgers);
      this.pnLodgers.Dock = DockStyle.Bottom;
      this.pnLodgers.Location = new Point(3, 642);
      this.pnLodgers.Name = "pnLodgers";
      this.pnLodgers.Size = new Size(1231, 61);
      this.pnLodgers.TabIndex = 0;
      this.txtVrJil.Location = new Point(538, 28);
      this.txtVrJil.Name = "txtVrJil";
      this.txtVrJil.ReadOnly = true;
      this.txtVrJil.Size = new Size(100, 22);
      this.txtVrJil.TabIndex = 4;
      this.txtJil.Location = new Point(154, 28);
      this.txtJil.Name = "txtJil";
      this.txtJil.ReadOnly = true;
      this.txtJil.Size = new Size(100, 22);
      this.txtJil.TabIndex = 3;
      this.lblVrJil.AutoSize = true;
      this.lblVrJil.Location = new Point(312, 31);
      this.lblVrJil.Name = "lblVrJil";
      this.lblVrJil.Size = new Size(220, 16);
      this.lblVrJil.TabIndex = 2;
      this.lblVrJil.Text = "Количество временных жильцов";
      this.lblJil.AutoSize = true;
      this.lblJil.Location = new Point(3, 31);
      this.lblJil.Name = "lblJil";
      this.lblJil.Size = new Size(145, 16);
      this.lblJil.TabIndex = 1;
      this.lblJil.Text = "Количество жильцов";
      this.lblLodgers.AutoSize = true;
      this.lblLodgers.Dock = DockStyle.Top;
      this.lblLodgers.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblLodgers.Location = new Point(0, 0);
      this.lblLodgers.Name = "lblLodgers";
      this.lblLodgers.Size = new Size(343, 16);
      this.lblLodgers.TabIndex = 0;
      this.lblLodgers.Text = "Количество жильцов по данным бухгалтерии";
      this.tpOwners.Controls.Add((Control) this.dgvOwners);
      this.tpOwners.Controls.Add((Control) this.pnOwners);
      this.tpOwners.Controls.Add((Control) this.lblOwnerDoc);
      this.tpOwners.Controls.Add((Control) this.dgvOwnerDoc);
      this.hp.SetHelpKeyword((Control) this.tpOwners, "kv47.html");
      this.hp.SetHelpNavigator((Control) this.tpOwners, HelpNavigator.Topic);
      this.tpOwners.Location = new Point(4, 46);
      this.tpOwners.Name = "tpOwners";
      this.tpOwners.Padding = new Padding(3);
      this.hp.SetShowHelp((Control) this.tpOwners, true);
      this.tpOwners.Size = new Size(1237, 706);
      this.tpOwners.TabIndex = 6;
      this.tpOwners.Text = "Собственники/наниматели";
      this.tpOwners.UseVisualStyleBackColor = true;
      this.dgvOwners.BackgroundColor = Color.AliceBlue;
      this.dgvOwners.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvOwners.ContextMenuStrip = this.cmOwners;
      this.dgvOwners.Dock = DockStyle.Fill;
      this.dgvOwners.Location = new Point(3, 3);
      this.dgvOwners.Name = "dgvOwners";
      this.dgvOwners.Size = new Size(1231, 507);
      this.dgvOwners.TabIndex = 4;
      this.dgvOwners.CellBeginEdit += new DataGridViewCellCancelEventHandler(this.dgvOwners_CellBeginEdit);
      this.dgvOwners.CellClick += new DataGridViewCellEventHandler(this.dgvOwners_CellClick);
      this.dgvOwners.CellEndEdit += new DataGridViewCellEventHandler(this.dgvOwners_CellEndEdit);
      this.dgvOwners.CellFormatting += new DataGridViewCellFormattingEventHandler(this.dgvOwners_CellFormatting);
      this.dgvOwners.CellMouseDown += new DataGridViewCellMouseEventHandler(this.dgvLodgers_CellMouseDown);
      this.dgvOwners.ColumnWidthChanged += new DataGridViewColumnEventHandler(this.dgvOwners_ColumnWidthChanged);
      this.dgvOwners.DataError += new DataGridViewDataErrorEventHandler(this.dataGridView1_DataError);
      this.dgvOwners.KeyUp += new KeyEventHandler(this.dgvOwners_KeyUp);
      this.cmOwners.Items.AddRange(new ToolStripItem[1]
      {
        (ToolStripItem) this.tsmiSelectOwners
      });
      this.cmOwners.Name = "cmOwners";
      this.cmOwners.Size = new Size(237, 26);
      this.tsmiSelectOwners.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiSelectOwners.Name = "tsmiSelectOwners";
      this.tsmiSelectOwners.Size = new Size(236, 22);
      this.tsmiSelectOwners.Text = "Выбрать из числа жильцов";
      this.tsmiSelectOwners.Click += new EventHandler(this.TsmiSelectOwners_Click);
      this.pnOwners.Controls.Add((Control) this.btnDelOwner);
      this.pnOwners.Controls.Add((Control) this.btnAddOwner);
      this.pnOwners.Controls.Add((Control) this.btnSaveOwner);
      this.pnOwners.Dock = DockStyle.Bottom;
      this.pnOwners.Location = new Point(3, 510);
      this.pnOwners.Name = "pnOwners";
      this.pnOwners.Size = new Size(1231, 40);
      this.pnOwners.TabIndex = 3;
      this.btnDelOwner.Image = (Image) componentResourceManager.GetObject("btnDelOwner.Image");
      this.btnDelOwner.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnDelOwner.Location = new Point(124, 5);
      this.btnDelOwner.Name = "btnDelOwner";
      this.btnDelOwner.Size = new Size(108, 30);
      this.btnDelOwner.TabIndex = 23;
      this.btnDelOwner.Text = "Удалить";
      this.btnDelOwner.TextAlign = ContentAlignment.MiddleRight;
      this.btnDelOwner.UseVisualStyleBackColor = true;
      this.btnDelOwner.Click += new EventHandler(this.btnDelOwner_Click);
      this.btnAddOwner.Image = (Image) componentResourceManager.GetObject("btnAddOwner.Image");
      this.btnAddOwner.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnAddOwner.Location = new Point(7, 5);
      this.btnAddOwner.Name = "btnAddOwner";
      this.btnAddOwner.Size = new Size(111, 30);
      this.btnAddOwner.TabIndex = 22;
      this.btnAddOwner.Text = "Добавить";
      this.btnAddOwner.TextAlign = ContentAlignment.MiddleRight;
      this.btnAddOwner.UseVisualStyleBackColor = true;
      this.btnAddOwner.Click += new EventHandler(this.btnAddOwner_Click);
      this.btnSaveOwner.Enabled = false;
      this.btnSaveOwner.Image = (Image) componentResourceManager.GetObject("btnSaveOwner.Image");
      this.btnSaveOwner.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnSaveOwner.Location = new Point(238, 5);
      this.btnSaveOwner.Name = "btnSaveOwner";
      this.btnSaveOwner.Size = new Size(113, 30);
      this.btnSaveOwner.TabIndex = 21;
      this.btnSaveOwner.Text = "Сохранить";
      this.btnSaveOwner.TextAlign = ContentAlignment.MiddleRight;
      this.btnSaveOwner.UseVisualStyleBackColor = true;
      this.btnSaveOwner.Click += new EventHandler(this.btnSaveOwner_Click);
      this.lblOwnerDoc.Dock = DockStyle.Bottom;
      this.lblOwnerDoc.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblOwnerDoc.Location = new Point(3, 550);
      this.lblOwnerDoc.Name = "lblOwnerDoc";
      this.lblOwnerDoc.Size = new Size(1231, 26);
      this.lblOwnerDoc.TabIndex = 2;
      this.lblOwnerDoc.Text = "Документы на собственность";
      this.lblOwnerDoc.TextAlign = ContentAlignment.MiddleLeft;
      this.dgvOwnerDoc.BackgroundColor = Color.AliceBlue;
      this.dgvOwnerDoc.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvOwnerDoc.ContextMenuStrip = this.cmOwnerDoc;
      this.dgvOwnerDoc.Dock = DockStyle.Bottom;
      this.dgvOwnerDoc.Location = new Point(3, 576);
      this.dgvOwnerDoc.Name = "dgvOwnerDoc";
      this.dgvOwnerDoc.Size = new Size(1231, (int) sbyte.MaxValue);
      this.dgvOwnerDoc.TabIndex = 1;
      this.dgvOwnerDoc.CellBeginEdit += new DataGridViewCellCancelEventHandler(this.dgvOwnerDoc_CellBeginEdit);
      this.dgvOwnerDoc.CellFormatting += new DataGridViewCellFormattingEventHandler(this.dgvOwnerDoc_CellFormatting);
      this.dgvOwnerDoc.CellMouseDown += new DataGridViewCellMouseEventHandler(this.dgvOwnerDoc_CellMouseDown);
      this.dgvOwnerDoc.DataError += new DataGridViewDataErrorEventHandler(this.dataGridView1_DataError);
      this.cmOwnerDoc.Items.AddRange(new ToolStripItem[2]
      {
        (ToolStripItem) this.tsmiCopyRec,
        (ToolStripItem) this.tsmiInsertRecord
      });
      this.cmOwnerDoc.Name = "cmOwnerDoc";
      this.cmOwnerDoc.Size = new Size(187, 48);
      this.tsmiCopyRec.Name = "tsmiCopyRec";
      this.tsmiCopyRec.Size = new Size(186, 22);
      this.tsmiCopyRec.Text = "Скопировать запись";
      this.tsmiCopyRec.Click += new EventHandler(this.TsmiCopyRec_Click);
      this.tsmiInsertRecord.Name = "tsmiInsertRecord";
      this.tsmiInsertRecord.Size = new Size(186, 22);
      this.tsmiInsertRecord.Text = "Вставить запись";
      this.tsmiInsertRecord.Click += new EventHandler(this.TsmiInsertRecord_Click);
      this.tpQuality.Controls.Add((Control) this.dgvQuality);
      this.hp.SetHelpKeyword((Control) this.tpQuality, "kv48.html");
      this.hp.SetHelpNavigator((Control) this.tpQuality, HelpNavigator.Topic);
      this.tpQuality.Location = new Point(4, 46);
      this.tpQuality.Name = "tpQuality";
      this.tpQuality.Padding = new Padding(3);
      this.hp.SetShowHelp((Control) this.tpQuality, true);
      this.tpQuality.Size = new Size(1237, 706);
      this.tpQuality.TabIndex = 7;
      this.tpQuality.Text = "Качество";
      this.tpQuality.UseVisualStyleBackColor = true;
      this.dgvQuality.BackgroundColor = Color.AliceBlue;
      this.dgvQuality.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvQuality.ContextMenuStrip = this.contextMenuStrip1;
      this.dgvQuality.Dock = DockStyle.Fill;
      this.dgvQuality.Location = new Point(3, 3);
      this.dgvQuality.Name = "dgvQuality";
      this.dgvQuality.Size = new Size(1231, 700);
      this.dgvQuality.TabIndex = 0;
      this.dgvQuality.CellBeginEdit += new DataGridViewCellCancelEventHandler(this.dgvQuality_CellBeginEdit);
      this.dgvQuality.CellEndEdit += new DataGridViewCellEventHandler(this.dgvQuality_CellEndEdit);
      this.dgvQuality.CellMouseDown += new DataGridViewCellMouseEventHandler(this.dgvLodgers_CellMouseDown);
      this.dgvQuality.CurrentCellDirtyStateChanged += new EventHandler(this.dgvQuality_CurrentCellDirtyStateChanged);
      this.dgvQuality.DataError += new DataGridViewDataErrorEventHandler(this.dataGridView1_DataError);
      this.tpAbsence.Controls.Add((Control) this.dgvAbsence);
      this.hp.SetHelpKeyword((Control) this.tpAbsence, "kv49.html");
      this.hp.SetHelpNavigator((Control) this.tpAbsence, HelpNavigator.Topic);
      this.tpAbsence.Location = new Point(4, 46);
      this.tpAbsence.Name = "tpAbsence";
      this.tpAbsence.Padding = new Padding(3);
      this.hp.SetShowHelp((Control) this.tpAbsence, true);
      this.tpAbsence.Size = new Size(1237, 706);
      this.tpAbsence.TabIndex = 8;
      this.tpAbsence.Text = "Отсутствие";
      this.tpAbsence.UseVisualStyleBackColor = true;
      this.dgvAbsence.BackgroundColor = Color.AliceBlue;
      this.dgvAbsence.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvAbsence.ContextMenuStrip = this.cmOwnerDoc;
      this.dgvAbsence.Dock = DockStyle.Fill;
      this.dgvAbsence.Location = new Point(3, 3);
      this.dgvAbsence.Name = "dgvAbsence";
      this.dgvAbsence.RowHeadersWidth = 21;
      this.dgvAbsence.Size = new Size(1231, 700);
      this.dgvAbsence.TabIndex = 0;
      this.dgvAbsence.CellBeginEdit += new DataGridViewCellCancelEventHandler(this.dgvAbsence_CellBeginEdit);
      this.dgvAbsence.CellEndEdit += new DataGridViewCellEventHandler(this.dgvAbsence_CellEndEdit);
      this.dgvAbsence.CellMouseDown += new DataGridViewCellMouseEventHandler(this.dgvAbsence_CellMouseDown);
      this.dgvAbsence.ColumnWidthChanged += new DataGridViewColumnEventHandler(this.dgvAbsence_ColumnWidthChanged);
      this.dgvAbsence.DataError += new DataGridViewDataErrorEventHandler(this.dataGridView1_DataError);
      this.tpMSP.Controls.Add((Control) this.tcntrlMsp);
      this.tpMSP.Location = new Point(4, 46);
      this.tpMSP.Name = "tpMSP";
      this.tpMSP.Padding = new Padding(3);
      this.tpMSP.Size = new Size(1237, 706);
      this.tpMSP.TabIndex = 10;
      this.tpMSP.Text = "МСП";
      this.tpMSP.UseVisualStyleBackColor = true;
      this.tcntrlMsp.Controls.Add((Control) this.tpMSPRecipient);
      this.tcntrlMsp.Controls.Add((Control) this.tpFamily);
      this.tcntrlMsp.Controls.Add((Control) this.tpMspDocument);
      this.tcntrlMsp.Controls.Add((Control) this.tpPensDoc);
      this.tcntrlMsp.Dock = DockStyle.Fill;
      this.hp.SetHelpKeyword((Control) this.tcntrlMsp, "kv410.html");
      this.hp.SetHelpNavigator((Control) this.tcntrlMsp, HelpNavigator.Topic);
      this.tcntrlMsp.Location = new Point(3, 3);
      this.tcntrlMsp.Name = "tcntrlMsp";
      this.tcntrlMsp.SelectedIndex = 0;
      this.hp.SetShowHelp((Control) this.tcntrlMsp, true);
      this.tcntrlMsp.Size = new Size(1231, 700);
      this.tcntrlMsp.TabIndex = 1;
      this.tcntrlMsp.SelectedIndexChanged += new EventHandler(this.tcntrlMsp_SelectedIndexChanged);
      this.tpMSPRecipient.Controls.Add((Control) this.dgvMsp);
      this.hp.SetHelpKeyword((Control) this.tpMSPRecipient, "kv410.html");
      this.hp.SetHelpNavigator((Control) this.tpMSPRecipient, HelpNavigator.Topic);
      this.tpMSPRecipient.Location = new Point(4, 25);
      this.tpMSPRecipient.Name = "tpMSPRecipient";
      this.tpMSPRecipient.Padding = new Padding(3);
      this.hp.SetShowHelp((Control) this.tpMSPRecipient, true);
      this.tpMSPRecipient.Size = new Size(1223, 671);
      this.tpMSPRecipient.TabIndex = 0;
      this.tpMSPRecipient.Text = "Льготники";
      this.tpMSPRecipient.UseVisualStyleBackColor = true;
      this.dgvMsp.BackgroundColor = Color.AliceBlue;
      this.dgvMsp.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvMsp.ContextMenuStrip = this.cmCopyToPasttime;
      this.dgvMsp.Dock = DockStyle.Fill;
      this.dgvMsp.Location = new Point(3, 3);
      this.dgvMsp.Name = "dgvMsp";
      this.dgvMsp.Size = new Size(1217, 665);
      this.dgvMsp.TabIndex = 0;
      this.dgvMsp.CellBeginEdit += new DataGridViewCellCancelEventHandler(this.dgvMsp_CellBeginEdit);
      this.dgvMsp.CellEndEdit += new DataGridViewCellEventHandler(this.dgvMsp_CellEndEdit);
      this.dgvMsp.CellFormatting += new DataGridViewCellFormattingEventHandler(this.dgvMsp_CellFormatting);
      this.dgvMsp.CellMouseDown += new DataGridViewCellMouseEventHandler(this.dgvMsp_CellMouseDown);
      this.dgvMsp.ColumnWidthChanged += new DataGridViewColumnEventHandler(this.dgvMsp_ColumnWidthChanged);
      this.dgvMsp.CurrentCellDirtyStateChanged += new EventHandler(this.dgvMsp_CurrentCellDirtyStateChanged);
      this.dgvMsp.DataError += new DataGridViewDataErrorEventHandler(this.dataGridView1_DataError);
      this.cmCopyToPasttime.Items.AddRange(new ToolStripItem[1]
      {
        (ToolStripItem) this.tsmiCopyRecordInPastTime
      });
      this.cmCopyToPasttime.Name = "cmCopyToPasttime";
      this.cmCopyToPasttime.Size = new Size(288, 26);
      this.tsmiCopyRecordInPastTime.Name = "tsmiCopyRecordInPastTime";
      this.tsmiCopyRecordInPastTime.Size = new Size(287, 22);
      this.tsmiCopyRecordInPastTime.Text = "Скопировать запись в прошлое время";
      this.tsmiCopyRecordInPastTime.Click += new EventHandler(this.tsmiCopyRecordInPastTime_Click);
      this.tpFamily.Controls.Add((Control) this.dgvFrFamily);
      this.tpFamily.Controls.Add((Control) this.pnBtnFrFamily);
      this.tpFamily.Controls.Add((Control) this.pnLsFamily);
      this.tpFamily.Location = new Point(4, 25);
      this.tpFamily.Name = "tpFamily";
      this.tpFamily.Padding = new Padding(3);
      this.tpFamily.Size = new Size(1223, 671);
      this.tpFamily.TabIndex = 1;
      this.tpFamily.Text = "Семья";
      this.tpFamily.UseVisualStyleBackColor = true;
      this.dgvFrFamily.BackgroundColor = Color.AliceBlue;
      this.dgvFrFamily.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvFrFamily.Dock = DockStyle.Fill;
      this.dgvFrFamily.Location = new Point(243, 3);
      this.dgvFrFamily.Name = "dgvFrFamily";
      this.dgvFrFamily.Size = new Size(977, 631);
      this.dgvFrFamily.TabIndex = 3;
      this.dgvFrFamily.CellBeginEdit += new DataGridViewCellCancelEventHandler(this.dgvFrFamily_CellBeginEdit);
      this.dgvFrFamily.CellEndEdit += new DataGridViewCellEventHandler(this.dgvFrFamily_CellEndEdit);
      this.dgvFrFamily.CellFormatting += new DataGridViewCellFormattingEventHandler(this.dgvFrFamily_CellFormatting);
      this.dgvFrFamily.ColumnWidthChanged += new DataGridViewColumnEventHandler(this.dgvFrFamily_ColumnWidthChanged);
      this.dgvFrFamily.CurrentCellDirtyStateChanged += new EventHandler(this.dgvFrFamily_CurrentCellDirtyStateChanged);
      this.dgvFrFamily.DataError += new DataGridViewDataErrorEventHandler(this.dgvFrFamily_DataError);
      this.pnBtnFrFamily.Controls.Add((Control) this.btnDelFrFamily);
      this.pnBtnFrFamily.Controls.Add((Control) this.btnAddFrFamily);
      this.pnBtnFrFamily.Controls.Add((Control) this.btnSaveFrFamily);
      this.pnBtnFrFamily.Dock = DockStyle.Bottom;
      this.pnBtnFrFamily.Location = new Point(243, 634);
      this.pnBtnFrFamily.Name = "pnBtnFrFamily";
      this.pnBtnFrFamily.Size = new Size(977, 34);
      this.pnBtnFrFamily.TabIndex = 2;
      this.btnDelFrFamily.FlatStyle = FlatStyle.Popup;
      this.btnDelFrFamily.Image = (Image) componentResourceManager.GetObject("btnDelFrFamily.Image");
      this.btnDelFrFamily.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnDelFrFamily.Location = new Point(93, 3);
      this.btnDelFrFamily.Name = "btnDelFrFamily";
      this.btnDelFrFamily.Size = new Size(35, 30);
      this.btnDelFrFamily.TabIndex = 9;
      this.btnDelFrFamily.TextAlign = ContentAlignment.MiddleRight;
      this.btnDelFrFamily.UseVisualStyleBackColor = true;
      this.btnDelFrFamily.Click += new EventHandler(this.btnDelFrFamily_Click);
      this.btnAddFrFamily.FlatStyle = FlatStyle.Popup;
      this.btnAddFrFamily.Image = (Image) componentResourceManager.GetObject("btnAddFrFamily.Image");
      this.btnAddFrFamily.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnAddFrFamily.Location = new Point(52, 3);
      this.btnAddFrFamily.Name = "btnAddFrFamily";
      this.btnAddFrFamily.Size = new Size(35, 30);
      this.btnAddFrFamily.TabIndex = 8;
      this.btnAddFrFamily.TextAlign = ContentAlignment.MiddleRight;
      this.btnAddFrFamily.UseVisualStyleBackColor = true;
      this.btnAddFrFamily.Click += new EventHandler(this.btnAddFrFamily_Click);
      this.btnSaveFrFamily.FlatStyle = FlatStyle.Popup;
      this.btnSaveFrFamily.Image = (Image) componentResourceManager.GetObject("btnSaveFrFamily.Image");
      this.btnSaveFrFamily.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnSaveFrFamily.Location = new Point(134, 3);
      this.btnSaveFrFamily.Name = "btnSaveFrFamily";
      this.btnSaveFrFamily.Size = new Size(35, 30);
      this.btnSaveFrFamily.TabIndex = 7;
      this.btnSaveFrFamily.TextAlign = ContentAlignment.MiddleRight;
      this.btnSaveFrFamily.UseVisualStyleBackColor = true;
      this.btnSaveFrFamily.Click += new EventHandler(this.btnSaveFrFamily_Click);
      this.pnLsFamily.Controls.Add((Control) this.dgvLsFamily);
      this.pnLsFamily.Controls.Add((Control) this.pnBtnLsFamily);
      this.pnLsFamily.Dock = DockStyle.Left;
      this.pnLsFamily.Location = new Point(3, 3);
      this.pnLsFamily.Name = "pnLsFamily";
      this.pnLsFamily.Size = new Size(240, 665);
      this.pnLsFamily.TabIndex = 1;
      this.dgvLsFamily.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
      this.dgvLsFamily.BackgroundColor = Color.AliceBlue;
      this.dgvLsFamily.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvLsFamily.Dock = DockStyle.Fill;
      this.dgvLsFamily.Location = new Point(0, 0);
      this.dgvLsFamily.Name = "dgvLsFamily";
      this.dgvLsFamily.Size = new Size(240, 631);
      this.dgvLsFamily.TabIndex = 2;
      this.dgvLsFamily.CellBeginEdit += new DataGridViewCellCancelEventHandler(this.dgvLsFamily_CellBeginEdit);
      this.dgvLsFamily.CellMouseClick += new DataGridViewCellMouseEventHandler(this.dgvLsFamily_CellMouseClick);
      this.dgvLsFamily.DataError += new DataGridViewDataErrorEventHandler(this.dataGridView1_DataError);
      this.dgvLsFamily.KeyUp += new KeyEventHandler(this.dgvLsFamily_KeyUp);
      this.pnBtnLsFamily.Controls.Add((Control) this.btnDelLsFamily);
      this.pnBtnLsFamily.Controls.Add((Control) this.btnAddLsFamily);
      this.pnBtnLsFamily.Controls.Add((Control) this.btnSaveLsFamily);
      this.pnBtnLsFamily.Dock = DockStyle.Bottom;
      this.pnBtnLsFamily.Location = new Point(0, 631);
      this.pnBtnLsFamily.Name = "pnBtnLsFamily";
      this.pnBtnLsFamily.Size = new Size(240, 34);
      this.pnBtnLsFamily.TabIndex = 0;
      this.btnDelLsFamily.FlatStyle = FlatStyle.Popup;
      this.btnDelLsFamily.Image = (Image) componentResourceManager.GetObject("btnDelLsFamily.Image");
      this.btnDelLsFamily.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnDelLsFamily.Location = new Point(94, 3);
      this.btnDelLsFamily.Name = "btnDelLsFamily";
      this.btnDelLsFamily.Size = new Size(35, 30);
      this.btnDelLsFamily.TabIndex = 9;
      this.btnDelLsFamily.TextAlign = ContentAlignment.MiddleRight;
      this.btnDelLsFamily.UseVisualStyleBackColor = true;
      this.btnDelLsFamily.Click += new EventHandler(this.btnDelFamily_Click);
      this.btnAddLsFamily.FlatStyle = FlatStyle.Popup;
      this.btnAddLsFamily.Image = (Image) componentResourceManager.GetObject("btnAddLsFamily.Image");
      this.btnAddLsFamily.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnAddLsFamily.Location = new Point(53, 3);
      this.btnAddLsFamily.Name = "btnAddLsFamily";
      this.btnAddLsFamily.Size = new Size(35, 30);
      this.btnAddLsFamily.TabIndex = 8;
      this.btnAddLsFamily.TextAlign = ContentAlignment.MiddleRight;
      this.btnAddLsFamily.UseVisualStyleBackColor = true;
      this.btnAddLsFamily.Click += new EventHandler(this.btnAddFamily_Click);
      this.btnSaveLsFamily.FlatStyle = FlatStyle.Popup;
      this.btnSaveLsFamily.Image = (Image) componentResourceManager.GetObject("btnSaveLsFamily.Image");
      this.btnSaveLsFamily.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnSaveLsFamily.Location = new Point(135, 3);
      this.btnSaveLsFamily.Name = "btnSaveLsFamily";
      this.btnSaveLsFamily.Size = new Size(35, 30);
      this.btnSaveLsFamily.TabIndex = 7;
      this.btnSaveLsFamily.TextAlign = ContentAlignment.MiddleRight;
      this.btnSaveLsFamily.UseVisualStyleBackColor = true;
      this.btnSaveLsFamily.Click += new EventHandler(this.btnSaveFamily_Click);
      this.tpMspDocument.Controls.Add((Control) this.flwlpMspDocument);
      this.tpMspDocument.Controls.Add((Control) this.pnMSPDoc);
      this.tpMspDocument.Controls.Add((Control) this.dgvMspDocPers);
      this.tpMspDocument.Location = new Point(4, 25);
      this.tpMspDocument.Name = "tpMspDocument";
      this.tpMspDocument.Padding = new Padding(3);
      this.tpMspDocument.Size = new Size(1223, 671);
      this.tpMspDocument.TabIndex = 2;
      this.tpMspDocument.Text = "Документы на льготу";
      this.tpMspDocument.UseVisualStyleBackColor = true;
      this.flwlpMspDocument.AutoScroll = true;
      this.flwlpMspDocument.BackColor = Color.AliceBlue;
      this.flwlpMspDocument.Dock = DockStyle.Fill;
      this.flwlpMspDocument.Location = new Point(284, 3);
      this.flwlpMspDocument.Name = "flwlpMspDocument";
      this.flwlpMspDocument.Size = new Size(936, 665);
      this.flwlpMspDocument.TabIndex = 3;
      this.pnMSPDoc.BackColor = Color.LightGray;
      this.pnMSPDoc.Controls.Add((Control) this.btnDeletePersDoc);
      this.pnMSPDoc.Controls.Add((Control) this.btnAddPersDoc);
      this.pnMSPDoc.Dock = DockStyle.Left;
      this.pnMSPDoc.Location = new Point(243, 3);
      this.pnMSPDoc.Name = "pnMSPDoc";
      this.pnMSPDoc.Size = new Size(41, 665);
      this.pnMSPDoc.TabIndex = 2;
      this.btnDeletePersDoc.Image = (Image) componentResourceManager.GetObject("btnDeletePersDoc.Image");
      this.btnDeletePersDoc.Location = new Point(5, 120);
      this.btnDeletePersDoc.Name = "btnDeletePersDoc";
      this.btnDeletePersDoc.Size = new Size(33, 32);
      this.btnDeletePersDoc.TabIndex = 5;
      this.btnDeletePersDoc.UseVisualStyleBackColor = true;
      this.btnDeletePersDoc.Click += new EventHandler(this.btnDeletePersDoc_Click);
      this.btnAddPersDoc.Image = (Image) componentResourceManager.GetObject("btnAddPersDoc.Image");
      this.btnAddPersDoc.Location = new Point(5, 81);
      this.btnAddPersDoc.Name = "btnAddPersDoc";
      this.btnAddPersDoc.Size = new Size(33, 33);
      this.btnAddPersDoc.TabIndex = 4;
      this.btnAddPersDoc.UseVisualStyleBackColor = true;
      this.btnAddPersDoc.Click += new EventHandler(this.btnAddPersDoc_Click);
      this.dgvMspDocPers.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
      this.dgvMspDocPers.BackgroundColor = Color.AliceBlue;
      this.dgvMspDocPers.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvMspDocPers.Dock = DockStyle.Left;
      this.dgvMspDocPers.Location = new Point(3, 3);
      this.dgvMspDocPers.Name = "dgvMspDocPers";
      this.dgvMspDocPers.Size = new Size(240, 665);
      this.dgvMspDocPers.TabIndex = 1;
      this.dgvMspDocPers.CellMouseClick += new DataGridViewCellMouseEventHandler(this.dgvMspDocPers_CellMouseClick);
      this.dgvMspDocPers.DataError += new DataGridViewDataErrorEventHandler(this.dataGridView1_DataError);
      this.tpPensDoc.Controls.Add((Control) this.flpnPensDoc);
      this.tpPensDoc.Controls.Add((Control) this.flpnPFR);
      this.tpPensDoc.Controls.Add((Control) this.pnPensDoc);
      this.tpPensDoc.Controls.Add((Control) this.dgvPensDocPers);
      this.tpPensDoc.Location = new Point(4, 25);
      this.tpPensDoc.Name = "tpPensDoc";
      this.tpPensDoc.Padding = new Padding(3);
      this.tpPensDoc.Size = new Size(1223, 671);
      this.tpPensDoc.TabIndex = 3;
      this.tpPensDoc.Text = "Пенсионные документы";
      this.tpPensDoc.UseVisualStyleBackColor = true;
      this.flpnPensDoc.AutoScroll = true;
      this.flpnPensDoc.BackColor = Color.AliceBlue;
      this.flpnPensDoc.BorderStyle = BorderStyle.Fixed3D;
      this.flpnPensDoc.Dock = DockStyle.Fill;
      this.flpnPensDoc.Location = new Point(284, 3);
      this.flpnPensDoc.Name = "flpnPensDoc";
      this.flpnPensDoc.Size = new Size(936, 565);
      this.flpnPensDoc.TabIndex = 7;
      this.flpnPFR.AutoScroll = true;
      this.flpnPFR.BackColor = Color.AliceBlue;
      this.flpnPFR.BorderStyle = BorderStyle.Fixed3D;
      this.flpnPFR.Dock = DockStyle.Bottom;
      this.flpnPFR.Location = new Point(284, 568);
      this.flpnPFR.Name = "flpnPFR";
      this.flpnPFR.Size = new Size(936, 100);
      this.flpnPFR.TabIndex = 6;
      this.pnPensDoc.BackColor = Color.LightGray;
      this.pnPensDoc.Controls.Add((Control) this.btnDelPensDoc);
      this.pnPensDoc.Controls.Add((Control) this.btnAddPensDoc);
      this.pnPensDoc.Dock = DockStyle.Left;
      this.pnPensDoc.Location = new Point(243, 3);
      this.pnPensDoc.Name = "pnPensDoc";
      this.pnPensDoc.Size = new Size(41, 665);
      this.pnPensDoc.TabIndex = 5;
      this.btnDelPensDoc.Image = (Image) componentResourceManager.GetObject("btnDelPensDoc.Image");
      this.btnDelPensDoc.Location = new Point(5, 120);
      this.btnDelPensDoc.Name = "btnDelPensDoc";
      this.btnDelPensDoc.Size = new Size(33, 32);
      this.btnDelPensDoc.TabIndex = 5;
      this.btnDelPensDoc.UseVisualStyleBackColor = true;
      this.btnDelPensDoc.Click += new EventHandler(this.btnDeletePensDoc_Click);
      this.btnAddPensDoc.Image = (Image) componentResourceManager.GetObject("btnAddPensDoc.Image");
      this.btnAddPensDoc.Location = new Point(5, 81);
      this.btnAddPensDoc.Name = "btnAddPensDoc";
      this.btnAddPensDoc.Size = new Size(33, 33);
      this.btnAddPensDoc.TabIndex = 4;
      this.btnAddPensDoc.UseVisualStyleBackColor = true;
      this.btnAddPensDoc.Click += new EventHandler(this.btmAddPensDoc_Click);
      this.dgvPensDocPers.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
      this.dgvPensDocPers.BackgroundColor = Color.AliceBlue;
      this.dgvPensDocPers.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvPensDocPers.Dock = DockStyle.Left;
      this.dgvPensDocPers.Location = new Point(3, 3);
      this.dgvPensDocPers.Name = "dgvPensDocPers";
      this.dgvPensDocPers.Size = new Size(240, 665);
      this.dgvPensDocPers.TabIndex = 4;
      this.dgvPensDocPers.CellMouseClick += new DataGridViewCellMouseEventHandler(this.dgvPensDocPers_CellMouseClick);
      this.dgvPensDocPers.DataError += new DataGridViewDataErrorEventHandler(this.dataGridView1_DataError);
      this.tpCounters.Controls.Add((Control) this.tcntrlCounters);
      this.tpCounters.Location = new Point(4, 46);
      this.tpCounters.Name = "tpCounters";
      this.tpCounters.Padding = new Padding(3);
      this.tpCounters.Size = new Size(1237, 706);
      this.tpCounters.TabIndex = 9;
      this.tpCounters.Text = "Счетчики";
      this.tpCounters.UseVisualStyleBackColor = true;
      this.tcntrlCounters.Controls.Add((Control) this.tpEvidence);
      this.tcntrlCounters.Controls.Add((Control) this.tpNumCounters);
      this.tcntrlCounters.Controls.Add((Control) this.tpAudit);
      this.tcntrlCounters.Controls.Add((Control) this.tpSeal);
      this.tcntrlCounters.Controls.Add((Control) this.tpDetailEvidence);
      this.tcntrlCounters.Controls.Add((Control) this.tpWorkDistribute);
      this.tcntrlCounters.Dock = DockStyle.Fill;
      this.hp.SetHelpKeyword((Control) this.tcntrlCounters, "kv411.html");
      this.hp.SetHelpNavigator((Control) this.tcntrlCounters, HelpNavigator.Topic);
      this.tcntrlCounters.Location = new Point(3, 3);
      this.tcntrlCounters.Name = "tcntrlCounters";
      this.tcntrlCounters.SelectedIndex = 0;
      this.hp.SetShowHelp((Control) this.tcntrlCounters, true);
      this.tcntrlCounters.Size = new Size(1231, 700);
      this.tcntrlCounters.TabIndex = 1;
      this.tcntrlCounters.SelectedIndexChanged += new EventHandler(this.tcntrlCounters_SelectedIndexChanged);
      this.tpEvidence.Controls.Add((Control) this.dgvEvidence);
      this.tpEvidence.Controls.Add((Control) this.pnPeriod);
      this.tpEvidence.Controls.Add((Control) this.pnEvidence);
      this.tpEvidence.Location = new Point(4, 25);
      this.tpEvidence.Name = "tpEvidence";
      this.tpEvidence.Padding = new Padding(3);
      this.tpEvidence.Size = new Size(1223, 671);
      this.tpEvidence.TabIndex = 1;
      this.tpEvidence.Text = "Показания";
      this.tpEvidence.UseVisualStyleBackColor = true;
      this.dgvEvidence.BackgroundColor = Color.AliceBlue;
      this.dgvEvidence.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvEvidence.Dock = DockStyle.Fill;
      this.dgvEvidence.Location = new Point(3, 43);
      this.dgvEvidence.Name = "dgvEvidence";
      this.dgvEvidence.Size = new Size(1217, 585);
      this.dgvEvidence.TabIndex = 3;
      this.dgvEvidence.CellBeginEdit += new DataGridViewCellCancelEventHandler(this.dgvEvidence_CellBeginEdit);
      this.dgvEvidence.CellEndEdit += new DataGridViewCellEventHandler(this.dgvEvidence_CellEndEdit);
      this.dgvEvidence.CellFormatting += new DataGridViewCellFormattingEventHandler(this.dgvEvidence_CellFormatting);
      this.dgvEvidence.CellLeave += new DataGridViewCellEventHandler(this.dgvEvidence_CellLeave);
      this.dgvEvidence.CellValidating += new DataGridViewCellValidatingEventHandler(this.dgvEvidence_CellValidating);
      this.dgvEvidence.ColumnWidthChanged += new DataGridViewColumnEventHandler(this.dgvEvidence_ColumnWidthChanged);
      this.dgvEvidence.CurrentCellDirtyStateChanged += new EventHandler(this.dgvEvidence_CurrentCellDirtyStateChanged);
      this.dgvEvidence.DataError += new DataGridViewDataErrorEventHandler(this.dataGridView1_DataError);
      this.pnPeriod.Controls.Add((Control) this.lblFiltrService);
      this.pnPeriod.Controls.Add((Control) this.cmbFiltrService);
      this.pnPeriod.Controls.Add((Control) this.cmbPeriod);
      this.pnPeriod.Controls.Add((Control) this.lblPeriod);
      this.pnPeriod.Dock = DockStyle.Top;
      this.pnPeriod.Location = new Point(3, 3);
      this.pnPeriod.Name = "pnPeriod";
      this.pnPeriod.Size = new Size(1217, 40);
      this.pnPeriod.TabIndex = 2;
      this.lblFiltrService.AutoSize = true;
      this.lblFiltrService.Location = new Point(256, 12);
      this.lblFiltrService.Name = "lblFiltrService";
      this.lblFiltrService.Size = new Size(54, 16);
      this.lblFiltrService.TabIndex = 11;
      this.lblFiltrService.Text = "Услуга";
      this.cmbFiltrService.FormattingEnabled = true;
      this.cmbFiltrService.Location = new Point(316, 9);
      this.cmbFiltrService.Name = "cmbFiltrService";
      this.cmbFiltrService.Size = new Size(224, 24);
      this.cmbFiltrService.TabIndex = 10;
      this.cmbFiltrService.SelectionChangeCommitted += new EventHandler(this.cmbPeriod_SelectionChangeCommitted);
      this.cmbPeriod.FormatString = "MMMM   yyyy";
      this.cmbPeriod.FormattingEnabled = true;
      this.cmbPeriod.Location = new Point(71, 9);
      this.cmbPeriod.Name = "cmbPeriod";
      this.cmbPeriod.Size = new Size(137, 24);
      this.cmbPeriod.TabIndex = 9;
      this.cmbPeriod.SelectionChangeCommitted += new EventHandler(this.cmbPeriod_SelectionChangeCommitted);
      this.lblPeriod.AutoSize = true;
      this.lblPeriod.Location = new Point(7, 12);
      this.lblPeriod.Name = "lblPeriod";
      this.lblPeriod.Size = new Size(58, 16);
      this.lblPeriod.TabIndex = 8;
      this.lblPeriod.Text = "Период";
      this.pnEvidence.Controls.Add((Control) this.btnLoad);
      this.pnEvidence.Controls.Add((Control) this.btnEdit);
      this.pnEvidence.Dock = DockStyle.Bottom;
      this.pnEvidence.Location = new Point(3, 628);
      this.pnEvidence.Name = "pnEvidence";
      this.pnEvidence.Size = new Size(1217, 40);
      this.pnEvidence.TabIndex = 1;
      this.btnLoad.Image = (Image) Resources.DateTime;
      this.btnLoad.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnLoad.Location = new Point(159, 3);
      this.btnLoad.Name = "btnLoad";
      this.btnLoad.Size = new Size(142, 31);
      this.btnLoad.TabIndex = 22;
      this.btnLoad.Text = "Взять счетчики";
      this.btnLoad.TextAlign = ContentAlignment.MiddleRight;
      this.btnLoad.UseVisualStyleBackColor = true;
      this.btnLoad.Visible = false;
      this.btnLoad.Click += new EventHandler(this.btnGetCounters_Click);
      this.btnEdit.Image = (Image) Resources.edit;
      this.btnEdit.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnEdit.Location = new Point(10, 4);
      this.btnEdit.Name = "btnEdit";
      this.btnEdit.Size = new Size(143, 30);
      this.btnEdit.TabIndex = 21;
      this.btnEdit.Text = "Редактировать ";
      this.btnEdit.TextAlign = ContentAlignment.MiddleRight;
      this.btnEdit.UseVisualStyleBackColor = true;
      this.btnEdit.Click += new EventHandler(this.btnEdit_Click);
      this.tpNumCounters.Controls.Add((Control) this.dgvCounters);
      this.tpNumCounters.Controls.Add((Control) this.pnCounter);
      this.tpNumCounters.Controls.Add((Control) this.dgvMainCounters);
      this.tpNumCounters.Location = new Point(4, 25);
      this.tpNumCounters.Name = "tpNumCounters";
      this.tpNumCounters.Padding = new Padding(3);
      this.tpNumCounters.Size = new Size(1223, 671);
      this.tpNumCounters.TabIndex = 0;
      this.tpNumCounters.Text = "Счетчики";
      this.tpNumCounters.UseVisualStyleBackColor = true;
      this.dgvCounters.BackgroundColor = Color.AliceBlue;
      this.dgvCounters.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvCounters.ContextMenuStrip = this.cmsCounters;
      this.dgvCounters.Dock = DockStyle.Fill;
      this.dgvCounters.Location = new Point(3, 3);
      this.dgvCounters.Name = "dgvCounters";
      this.dgvCounters.Size = new Size(1217, 349);
      this.dgvCounters.TabIndex = 7;
      this.dgvCounters.CellBeginEdit += new DataGridViewCellCancelEventHandler(this.dgvCounters_CellBeginEdit);
      this.dgvCounters.CellEndEdit += new DataGridViewCellEventHandler(this.dgvCounters_CellEndEdit);
      this.dgvCounters.CellFormatting += new DataGridViewCellFormattingEventHandler(this.dgvCounters_CellFormatting);
      this.dgvCounters.CellMouseDown += new DataGridViewCellMouseEventHandler(this.dgvCounters_CellMouseDown);
      this.dgvCounters.ColumnWidthChanged += new DataGridViewColumnEventHandler(this.dgvCounters_ColumnWidthChanged);
      this.dgvCounters.DataError += new DataGridViewDataErrorEventHandler(this.dataGridView1_DataError);
      this.dgvCounters.EditingControlShowing += new DataGridViewEditingControlShowingEventHandler(this.dgvCounters_EditingControlShowing);
      this.cmsCounters.Items.AddRange(new ToolStripItem[1]
      {
        (ToolStripItem) this.miCopy
      });
      this.cmsCounters.Name = "cmsCounters";
      this.cmsCounters.Size = new Size(337, 26);
      this.cmsCounters.Tag = (object) "1";
      this.miCopy.Font = new Font("Segoe UI", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.miCopy.Image = (Image) Resources.add_var;
      this.miCopy.Name = "miCopy";
      this.miCopy.Size = new Size(336, 22);
      this.miCopy.Tag = (object) "1";
      this.miCopy.Text = "Скопировать запись в выбранные объекты";
      this.miCopy.Click += new EventHandler(this.miCopy_Click);
      this.pnCounter.BackColor = Color.Transparent;
      this.pnCounter.Controls.Add((Control) this.btnDelCounter);
      this.pnCounter.Controls.Add((Control) this.chbCounterArchive);
      this.pnCounter.Controls.Add((Control) this.lblMainCounters);
      this.pnCounter.Controls.Add((Control) this.btnAddCounter);
      this.pnCounter.Controls.Add((Control) this.btnSaveCounter);
      this.pnCounter.Controls.Add((Control) this.btnArchive);
      this.pnCounter.Dock = DockStyle.Bottom;
      this.pnCounter.Location = new Point(3, 352);
      this.pnCounter.Name = "pnCounter";
      this.pnCounter.Size = new Size(1217, 70);
      this.pnCounter.TabIndex = 6;
      this.btnDelCounter.Image = (Image) componentResourceManager.GetObject("btnDelCounter.Image");
      this.btnDelCounter.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnDelCounter.Location = new Point(120, 6);
      this.btnDelCounter.Name = "btnDelCounter";
      this.btnDelCounter.Size = new Size(96, 30);
      this.btnDelCounter.TabIndex = 23;
      this.btnDelCounter.Text = "Удалить";
      this.btnDelCounter.TextAlign = ContentAlignment.MiddleRight;
      this.btnDelCounter.UseVisualStyleBackColor = true;
      this.btnDelCounter.Click += new EventHandler(this.btnDelCounter_Click);
      this.chbCounterArchive.AutoSize = true;
      this.chbCounterArchive.Location = new Point(408, 44);
      this.chbCounterArchive.Name = "chbCounterArchive";
      this.chbCounterArchive.Size = new Size(66, 20);
      this.chbCounterArchive.TabIndex = 8;
      this.chbCounterArchive.Text = "Архив";
      this.chbCounterArchive.UseVisualStyleBackColor = true;
      this.chbCounterArchive.CheckedChanged += new EventHandler(this.cbArchive_CheckedChanged);
      this.lblMainCounters.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblMainCounters.Location = new Point(7, 38);
      this.lblMainCounters.Name = "lblMainCounters";
      this.lblMainCounters.Size = new Size(370, 30);
      this.lblMainCounters.TabIndex = 3;
      this.lblMainCounters.Text = "Счетчики, к которым привязан лицевой";
      this.lblMainCounters.TextAlign = ContentAlignment.MiddleLeft;
      this.btnAddCounter.Image = (Image) componentResourceManager.GetObject("btnAddCounter.Image");
      this.btnAddCounter.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnAddCounter.Location = new Point(10, 5);
      this.btnAddCounter.Name = "btnAddCounter";
      this.btnAddCounter.Size = new Size(104, 30);
      this.btnAddCounter.TabIndex = 22;
      this.btnAddCounter.Text = "Добавить";
      this.btnAddCounter.TextAlign = ContentAlignment.MiddleRight;
      this.btnAddCounter.UseVisualStyleBackColor = true;
      this.btnAddCounter.Click += new EventHandler(this.btnAddCounter_Click);
      this.btnSaveCounter.Image = (Image) componentResourceManager.GetObject("btnSaveCounter.Image");
      this.btnSaveCounter.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnSaveCounter.Location = new Point(222, 5);
      this.btnSaveCounter.Name = "btnSaveCounter";
      this.btnSaveCounter.Size = new Size(105, 30);
      this.btnSaveCounter.TabIndex = 21;
      this.btnSaveCounter.Text = "Сохранить";
      this.btnSaveCounter.TextAlign = ContentAlignment.MiddleRight;
      this.btnSaveCounter.UseVisualStyleBackColor = true;
      this.btnSaveCounter.Click += new EventHandler(this.btnSaveCounter_Click);
      this.btnArchive.Image = (Image) componentResourceManager.GetObject("btnArchive.Image");
      this.btnArchive.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnArchive.Location = new Point(333, 5);
      this.btnArchive.Name = "btnArchive";
      this.btnArchive.Size = new Size(141, 30);
      this.btnArchive.TabIndex = 0;
      this.btnArchive.Text = "Занести в архив";
      this.btnArchive.TextAlign = ContentAlignment.MiddleRight;
      this.btnArchive.UseVisualStyleBackColor = true;
      this.btnArchive.Click += new EventHandler(this.btnArchive_Click);
      this.dgvMainCounters.BackgroundColor = Color.AliceBlue;
      this.dgvMainCounters.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvMainCounters.ContextMenuStrip = this.contextMenuStrip1;
      this.dgvMainCounters.Dock = DockStyle.Bottom;
      this.dgvMainCounters.Location = new Point(3, 422);
      this.dgvMainCounters.Name = "dgvMainCounters";
      this.dgvMainCounters.Size = new Size(1217, 246);
      this.dgvMainCounters.TabIndex = 2;
      this.dgvMainCounters.CellBeginEdit += new DataGridViewCellCancelEventHandler(this.dgvMainCounters_CellBeginEdit);
      this.dgvMainCounters.CellEndEdit += new DataGridViewCellEventHandler(this.dgvMainCounters_CellEndEdit);
      this.dgvMainCounters.CellFormatting += new DataGridViewCellFormattingEventHandler(this.dgvMainCounters_CellFormatting);
      this.dgvMainCounters.CellMouseDown += new DataGridViewCellMouseEventHandler(this.dgvMainCounters_CellMouseDown);
      this.dgvMainCounters.DataError += new DataGridViewDataErrorEventHandler(this.dataGridView1_DataError);
      this.tpAudit.Controls.Add((Control) this.dgvAudit);
      this.tpAudit.Location = new Point(4, 25);
      this.tpAudit.Name = "tpAudit";
      this.tpAudit.Padding = new Padding(3);
      this.tpAudit.Size = new Size(1223, 671);
      this.tpAudit.TabIndex = 2;
      this.tpAudit.Text = "Поверки";
      this.tpAudit.UseVisualStyleBackColor = true;
      this.dgvAudit.BackgroundColor = Color.AliceBlue;
      this.dgvAudit.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvAudit.Dock = DockStyle.Fill;
      this.dgvAudit.Location = new Point(3, 3);
      this.dgvAudit.Name = "dgvAudit";
      this.dgvAudit.Size = new Size(1217, 665);
      this.dgvAudit.TabIndex = 0;
      this.dgvAudit.CellBeginEdit += new DataGridViewCellCancelEventHandler(this.dgvAudit_CellBeginEdit);
      this.dgvAudit.CellClick += new DataGridViewCellEventHandler(this.dgvAudit_CellClick);
      this.dgvAudit.CellEndEdit += new DataGridViewCellEventHandler(this.dgvAudit_CellEndEdit);
      this.dgvAudit.CellFormatting += new DataGridViewCellFormattingEventHandler(this.dgvAudit_CellFormatting);
      this.dgvAudit.ColumnWidthChanged += new DataGridViewColumnEventHandler(this.dgvAudit_ColumnWidthChanged);
      this.dgvAudit.DataError += new DataGridViewDataErrorEventHandler(this.dataGridView1_DataError);
      this.tpSeal.Controls.Add((Control) this.dgvSeal);
      this.tpSeal.Location = new Point(4, 25);
      this.tpSeal.Name = "tpSeal";
      this.tpSeal.Padding = new Padding(3);
      this.tpSeal.Size = new Size(1223, 671);
      this.tpSeal.TabIndex = 3;
      this.tpSeal.Text = "Пломбирование";
      this.tpSeal.UseVisualStyleBackColor = true;
      this.dgvSeal.BackgroundColor = Color.AliceBlue;
      this.dgvSeal.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvSeal.Dock = DockStyle.Fill;
      this.dgvSeal.Location = new Point(3, 3);
      this.dgvSeal.Name = "dgvSeal";
      this.dgvSeal.Size = new Size(1217, 665);
      this.dgvSeal.TabIndex = 0;
      this.dgvSeal.CellBeginEdit += new DataGridViewCellCancelEventHandler(this.dgvSeal_CellBeginEdit);
      this.dgvSeal.CellEndEdit += new DataGridViewCellEventHandler(this.dgvSeal_CellEndEdit);
      this.dgvSeal.CellFormatting += new DataGridViewCellFormattingEventHandler(this.dgvSeal_CellFormatting);
      this.dgvSeal.ColumnWidthChanged += new DataGridViewColumnEventHandler(this.dgvSeal_ColumnWidthChanged);
      this.dgvSeal.DataError += new DataGridViewDataErrorEventHandler(this.dataGridView1_DataError);
      this.tpDetailEvidence.Controls.Add((Control) this.dgvDetailEvidence);
      this.tpDetailEvidence.Controls.Add((Control) this.pnDetailPeriod);
      this.tpDetailEvidence.Location = new Point(4, 25);
      this.tpDetailEvidence.Name = "tpDetailEvidence";
      this.tpDetailEvidence.Padding = new Padding(3);
      this.tpDetailEvidence.Size = new Size(1223, 671);
      this.tpDetailEvidence.TabIndex = 4;
      this.tpDetailEvidence.Text = "Детализация показаний";
      this.tpDetailEvidence.UseVisualStyleBackColor = true;
      this.dgvDetailEvidence.BackgroundColor = Color.AliceBlue;
      this.dgvDetailEvidence.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvDetailEvidence.Dock = DockStyle.Fill;
      this.dgvDetailEvidence.Location = new Point(3, 43);
      this.dgvDetailEvidence.Name = "dgvDetailEvidence";
      this.dgvDetailEvidence.ReadOnly = true;
      this.dgvDetailEvidence.Size = new Size(1217, 625);
      this.dgvDetailEvidence.TabIndex = 1;
      this.dgvDetailEvidence.CellFormatting += new DataGridViewCellFormattingEventHandler(this.dgvDetailEvidence_CellFormatting);
      this.dgvDetailEvidence.ColumnWidthChanged += new DataGridViewColumnEventHandler(this.dgvDetailEvidence_ColumnWidthChanged);
      this.dgvDetailEvidence.DataError += new DataGridViewDataErrorEventHandler(this.dataGridView1_DataError);
      this.pnDetailPeriod.Controls.Add((Control) this.lblFiltrDetailService);
      this.pnDetailPeriod.Controls.Add((Control) this.cmbFiltrDetailService);
      this.pnDetailPeriod.Controls.Add((Control) this.cmbDetailPeriod);
      this.pnDetailPeriod.Controls.Add((Control) this.lblDetailPeriod);
      this.pnDetailPeriod.Dock = DockStyle.Top;
      this.pnDetailPeriod.Location = new Point(3, 3);
      this.pnDetailPeriod.Name = "pnDetailPeriod";
      this.pnDetailPeriod.Size = new Size(1217, 40);
      this.pnDetailPeriod.TabIndex = 0;
      this.lblFiltrDetailService.AutoSize = true;
      this.lblFiltrDetailService.Location = new Point(259, 10);
      this.lblFiltrDetailService.Name = "lblFiltrDetailService";
      this.lblFiltrDetailService.Size = new Size(54, 16);
      this.lblFiltrDetailService.TabIndex = 13;
      this.lblFiltrDetailService.Text = "Услуга";
      this.cmbFiltrDetailService.FormattingEnabled = true;
      this.cmbFiltrDetailService.Location = new Point(319, 7);
      this.cmbFiltrDetailService.Name = "cmbFiltrDetailService";
      this.cmbFiltrDetailService.Size = new Size(224, 24);
      this.cmbFiltrDetailService.TabIndex = 12;
      this.cmbFiltrDetailService.SelectionChangeCommitted += new EventHandler(this.cmbDetailPeriod_SelectionChangeCommitted);
      this.cmbDetailPeriod.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.cmbDetailPeriod.ForeColor = SystemColors.WindowText;
      this.cmbDetailPeriod.FormatString = "MMMM   yyyy";
      this.cmbDetailPeriod.FormattingEnabled = true;
      this.cmbDetailPeriod.Location = new Point(69, 7);
      this.cmbDetailPeriod.Name = "cmbDetailPeriod";
      this.cmbDetailPeriod.Size = new Size(137, 24);
      this.cmbDetailPeriod.TabIndex = 11;
      this.cmbDetailPeriod.SelectionChangeCommitted += new EventHandler(this.cmbDetailPeriod_SelectionChangeCommitted);
      this.lblDetailPeriod.AutoSize = true;
      this.lblDetailPeriod.Location = new Point(7, 10);
      this.lblDetailPeriod.Name = "lblDetailPeriod";
      this.lblDetailPeriod.Size = new Size(58, 16);
      this.lblDetailPeriod.TabIndex = 10;
      this.lblDetailPeriod.Text = "Период";
      this.tpWorkDistribute.Location = new Point(4, 25);
      this.tpWorkDistribute.Name = "tpWorkDistribute";
      this.tpWorkDistribute.Padding = new Padding(3);
      this.tpWorkDistribute.Size = new Size(1223, 671);
      this.tpWorkDistribute.TabIndex = 5;
      this.tpWorkDistribute.Text = "Коллективные приборы учета";
      this.tpWorkDistribute.UseVisualStyleBackColor = true;
      this.tpMessage.Controls.Add((Control) this.dgvMessage);
      this.tpMessage.Location = new Point(4, 46);
      this.tpMessage.Name = "tpMessage";
      this.tpMessage.Padding = new Padding(3);
      this.tpMessage.Size = new Size(1237, 706);
      this.tpMessage.TabIndex = 11;
      this.tpMessage.Text = "Сообщения";
      this.tpMessage.UseVisualStyleBackColor = true;
      this.dgvMessage.BackgroundColor = Color.AliceBlue;
      this.dgvMessage.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvMessage.ContextMenuStrip = this.contextMenuStrip1;
      this.dgvMessage.Dock = DockStyle.Fill;
      this.dgvMessage.Location = new Point(3, 3);
      this.dgvMessage.Name = "dgvMessage";
      this.dgvMessage.Size = new Size(1231, 700);
      this.dgvMessage.TabIndex = 0;
      this.dgvMessage.CellBeginEdit += new DataGridViewCellCancelEventHandler(this.dgvMessage_CellBeginEdit);
      this.dgvMessage.CellEndEdit += new DataGridViewCellEventHandler(this.dgvMessage_CellEndEdit);
      this.dgvMessage.CellFormatting += new DataGridViewCellFormattingEventHandler(this.dgvMessage_CellFormatting);
      this.dgvMessage.CellMouseDown += new DataGridViewCellMouseEventHandler(this.dgvMessage_CellMouseDown);
      this.dgvMessage.ColumnWidthChanged += new DataGridViewColumnEventHandler(this.dgvMessage_ColumnWidthChanged);
      this.dgvMessage.DataError += new DataGridViewDataErrorEventHandler(this.dataGridView1_DataError);
      this.tpUZP.Controls.Add((Control) this.dgvPersonsWork);
      this.tpUZP.Controls.Add((Control) this.pnPersonsWork);
      this.tpUZP.Controls.Add((Control) this.lblContract);
      this.tpUZP.Controls.Add((Control) this.dgvBond);
      this.tpUZP.Location = new Point(4, 46);
      this.tpUZP.Name = "tpUZP";
      this.tpUZP.Padding = new Padding(3);
      this.tpUZP.Size = new Size(1237, 706);
      this.tpUZP.TabIndex = 13;
      this.tpUZP.Text = "УЗП";
      this.tpUZP.UseVisualStyleBackColor = true;
      this.dgvPersonsWork.BackgroundColor = Color.AliceBlue;
      this.dgvPersonsWork.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvPersonsWork.Dock = DockStyle.Fill;
      this.dgvPersonsWork.Location = new Point(3, 3);
      this.dgvPersonsWork.Name = "dgvPersonsWork";
      this.dgvPersonsWork.Size = new Size(1231, 388);
      this.dgvPersonsWork.TabIndex = 0;
      this.dgvPersonsWork.CellBeginEdit += new DataGridViewCellCancelEventHandler(this.dgvPersonsWork_CellBeginEdit);
      this.dgvPersonsWork.CellEndEdit += new DataGridViewCellEventHandler(this.dgvPersonsWork_CellEndEdit);
      this.dgvPersonsWork.CellFormatting += new DataGridViewCellFormattingEventHandler(this.dgvLodgers_CellFormatting);
      this.dgvPersonsWork.ColumnWidthChanged += new DataGridViewColumnEventHandler(this.dgvPersonsWork_ColumnWidthChanged);
      this.dgvPersonsWork.CurrentCellDirtyStateChanged += new EventHandler(this.dgvPersonsWork_CurrentCellDirtyStateChanged);
      this.dgvPersonsWork.DataError += new DataGridViewDataErrorEventHandler(this.dataGridView1_DataError);
      this.pnPersonsWork.Controls.Add((Control) this.btnAgreement);
      this.pnPersonsWork.Controls.Add((Control) this.btnDelPerson);
      this.pnPersonsWork.Controls.Add((Control) this.btnAddPerson);
      this.pnPersonsWork.Controls.Add((Control) this.btnSavePerson);
      this.pnPersonsWork.Dock = DockStyle.Bottom;
      this.pnPersonsWork.Location = new Point(3, 391);
      this.pnPersonsWork.Name = "pnPersonsWork";
      this.pnPersonsWork.Size = new Size(1231, 44);
      this.pnPersonsWork.TabIndex = 1;
      this.btnAgreement.Location = new Point(367, 6);
      this.btnAgreement.Name = "btnAgreement";
      this.btnAgreement.Size = new Size(107, 30);
      this.btnAgreement.TabIndex = 27;
      this.btnAgreement.Text = "Соглашение";
      this.btnAgreement.UseVisualStyleBackColor = true;
      this.btnAgreement.Click += new EventHandler(this.btnAgreement_Click);
      this.btnDelPerson.Image = (Image) componentResourceManager.GetObject("btnDelPerson.Image");
      this.btnDelPerson.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnDelPerson.Location = new Point(134, 6);
      this.btnDelPerson.Name = "btnDelPerson";
      this.btnDelPerson.Size = new Size(108, 30);
      this.btnDelPerson.TabIndex = 26;
      this.btnDelPerson.Text = "Удалить";
      this.btnDelPerson.TextAlign = ContentAlignment.MiddleRight;
      this.btnDelPerson.UseVisualStyleBackColor = true;
      this.btnDelPerson.Click += new EventHandler(this.btnDelPerson_Click);
      this.btnAddPerson.Image = (Image) componentResourceManager.GetObject("btnAddPerson.Image");
      this.btnAddPerson.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnAddPerson.Location = new Point(17, 6);
      this.btnAddPerson.Name = "btnAddPerson";
      this.btnAddPerson.Size = new Size(111, 30);
      this.btnAddPerson.TabIndex = 25;
      this.btnAddPerson.Text = "Добавить";
      this.btnAddPerson.TextAlign = ContentAlignment.MiddleRight;
      this.btnAddPerson.UseVisualStyleBackColor = true;
      this.btnAddPerson.Click += new EventHandler(this.btnAddPerson_Click);
      this.btnSavePerson.Enabled = false;
      this.btnSavePerson.Image = (Image) componentResourceManager.GetObject("btnSavePerson.Image");
      this.btnSavePerson.ImageAlign = ContentAlignment.MiddleLeft;
      this.btnSavePerson.Location = new Point(248, 6);
      this.btnSavePerson.Name = "btnSavePerson";
      this.btnSavePerson.Size = new Size(113, 30);
      this.btnSavePerson.TabIndex = 24;
      this.btnSavePerson.Text = "Сохранить";
      this.btnSavePerson.TextAlign = ContentAlignment.MiddleRight;
      this.btnSavePerson.UseVisualStyleBackColor = true;
      this.btnSavePerson.Click += new EventHandler(this.btnSavePerson_Click);
      this.lblContract.Dock = DockStyle.Bottom;
      this.lblContract.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 204);
      this.lblContract.Location = new Point(3, 435);
      this.lblContract.Name = "lblContract";
      this.lblContract.Size = new Size(1231, 21);
      this.lblContract.TabIndex = 2;
      this.lblContract.Text = "Информация о договорах";
      this.lblContract.TextAlign = ContentAlignment.MiddleLeft;
      this.dgvBond.BackgroundColor = Color.AliceBlue;
      this.dgvBond.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvBond.Dock = DockStyle.Bottom;
      this.dgvBond.Location = new Point(3, 456);
      this.dgvBond.Name = "dgvBond";
      this.dgvBond.Size = new Size(1231, 247);
      this.dgvBond.TabIndex = 3;
      this.dgvBond.CellBeginEdit += new DataGridViewCellCancelEventHandler(this.dgvBond_CellBeginEdit);
      this.dgvBond.CellEndEdit += new DataGridViewCellEventHandler(this.dgvBond_CellEndEdit);
      this.dgvBond.CellFormatting += new DataGridViewCellFormattingEventHandler(this.dgvBond_CellFormatting);
      this.dgvBond.ColumnWidthChanged += new DataGridViewColumnEventHandler(this.dgvBond_ColumnWidthChanged);
      this.dgvBond.CurrentCellDirtyStateChanged += new EventHandler(this.dgvBond_CurrentCellDirtyStateChanged);
      this.tpRentMSP.Controls.Add((Control) this.dgvParamForeign);
      this.tpRentMSP.Location = new Point(4, 46);
      this.tpRentMSP.Name = "tpRentMSP";
      this.tpRentMSP.Padding = new Padding(3);
      this.tpRentMSP.Size = new Size(1237, 706);
      this.tpRentMSP.TabIndex = 14;
      this.tpRentMSP.Text = "Расчет льгот";
      this.tpRentMSP.UseVisualStyleBackColor = true;
      this.dgvParamForeign.BackgroundColor = Color.AliceBlue;
      this.dgvParamForeign.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvParamForeign.Dock = DockStyle.Fill;
      this.dgvParamForeign.Location = new Point(3, 3);
      this.dgvParamForeign.Name = "dgvParamForeign";
      this.dgvParamForeign.Size = new Size(1231, 700);
      this.dgvParamForeign.TabIndex = 0;
      this.dgvParamForeign.CellFormatting += new DataGridViewCellFormattingEventHandler(this.dgvParamForeign_CellFormatting);
      this.dgvParamForeign.ColumnWidthChanged += new DataGridViewColumnEventHandler(this.dgvParamForeign_ColumnWidthChanged);
      this.tpPayWork.Controls.Add((Control) this.panWDDataGrid);
      this.tpPayWork.Controls.Add((Control) this.pnWDButtons);
      this.tpPayWork.Controls.Add((Control) this.pnWDFilters);
      this.tpPayWork.Location = new Point(4, 46);
      this.tpPayWork.Name = "tpPayWork";
      this.tpPayWork.Size = new Size(1237, 706);
      this.tpPayWork.TabIndex = 15;
      this.tpPayWork.Text = "Оплата выполненных работ";
      this.tpPayWork.UseVisualStyleBackColor = true;
      this.panWDDataGrid.Controls.Add((Control) this.splitContainerWD);
      this.panWDDataGrid.Dock = DockStyle.Fill;
      this.panWDDataGrid.Location = new Point(0, 40);
      this.panWDDataGrid.Name = "panWDDataGrid";
      this.panWDDataGrid.Size = new Size(1237, 604);
      this.panWDDataGrid.TabIndex = 8;
      this.splitContainerWD.Dock = DockStyle.Fill;
      this.splitContainerWD.Location = new Point(0, 0);
      this.splitContainerWD.Name = "splitContainerWD";
      this.splitContainerWD.Orientation = Orientation.Horizontal;
      this.splitContainerWD.Panel1.Controls.Add((Control) this.dgvWorkDistribute);
      this.splitContainerWD.Panel2.Controls.Add((Control) this.dgvWorkPayRent);
      this.splitContainerWD.Size = new Size(1237, 604);
      this.splitContainerWD.SplitterDistance = 343;
      this.splitContainerWD.TabIndex = 8;
      this.dgvWorkDistribute.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
      this.dgvWorkDistribute.BackgroundColor = Color.AliceBlue;
      this.dgvWorkDistribute.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvWorkDistribute.Columns.AddRange((DataGridViewColumn) this.Period, (DataGridViewColumn) this.Service, (DataGridViewColumn) this.Recipient, (DataGridViewColumn) this.Performer, (DataGridViewColumn) this.rents, (DataGridViewColumn) this.ParamValue, (DataGridViewColumn) this.Scheme, (DataGridViewColumn) this.MonthCnt, (DataGridViewColumn) this.Rate, (DataGridViewColumn) this.Comission, (DataGridViewColumn) this.RentCorrect, (DataGridViewColumn) this.RentPercentCorrect, (DataGridViewColumn) this.UName, (DataGridViewColumn) this.DEdit);
      this.dgvWorkDistribute.Dock = DockStyle.Fill;
      this.dgvWorkDistribute.Location = new Point(0, 0);
      this.dgvWorkDistribute.Name = "dgvWorkDistribute";
      this.dgvWorkDistribute.Size = new Size(1237, 343);
      this.dgvWorkDistribute.TabIndex = 6;
      this.dgvWorkDistribute.CellClick += new DataGridViewCellEventHandler(this.dgvWorkDistribute_CellClick);
      this.dgvWorkDistribute.CellFormatting += new DataGridViewCellFormattingEventHandler(this.dgvWorkDistribute_CellFormatting);
      this.dgvWorkDistribute.CellValueChanged += new DataGridViewCellEventHandler(this.dgvWorkDistribute_CellValueChanged);
      this.dgvWorkDistribute.EditingControlShowing += new DataGridViewEditingControlShowingEventHandler(this.dgvWorkDistribute_EditingControlShowing);
      this.Period.HeaderText = "Период";
      this.Period.Name = "Period";
      this.Period.ReadOnly = true;
      this.Period.Resizable = DataGridViewTriState.True;
      this.Period.SortMode = DataGridViewColumnSortMode.Automatic;
      this.Service.HeaderText = "Услуга";
      this.Service.Name = "Service";
      this.Service.ReadOnly = true;
      this.Service.Resizable = DataGridViewTriState.True;
      this.Recipient.HeaderText = "Получатель";
      this.Recipient.Name = "Recipient";
      this.Recipient.ReadOnly = true;
      this.Performer.HeaderText = "Исполнитель";
      this.Performer.Name = "Performer";
      this.Performer.ReadOnly = true;
      this.rents.DataPropertyName = "Rent";
      this.rents.HeaderText = "Сумма";
      this.rents.Name = "rents";
      this.rents.ReadOnly = true;
      this.ParamValue.DataPropertyName = "ParamValue";
      this.ParamValue.HeaderText = "Параметр";
      this.ParamValue.Name = "ParamValue";
      this.ParamValue.ReadOnly = true;
      this.Scheme.DataPropertyName = "Scheme";
      this.Scheme.HeaderText = "Схема";
      this.Scheme.Name = "Scheme";
      this.MonthCnt.DataPropertyName = "MonthCnt";
      this.MonthCnt.HeaderText = "Кол-во месяцев";
      this.MonthCnt.Name = "MonthCnt";
      this.Rate.DataPropertyName = "Rate";
      gridViewCellStyle1.Format = "N2";
      gridViewCellStyle1.NullValue = (object) null;
      this.Rate.DefaultCellStyle = gridViewCellStyle1;
      this.Rate.HeaderText = "Процент";
      this.Rate.Name = "Rate";
      this.Comission.DataPropertyName = "Comission";
      this.Comission.HeaderText = "Комиссия";
      this.Comission.Name = "Comission";
      this.RentCorrect.DataPropertyName = "RentCorrect";
      this.RentCorrect.HeaderText = "Корректировка начислений";
      this.RentCorrect.Name = "RentCorrect";
      this.RentPercentCorrect.DataPropertyName = "RentPercentCorrect";
      this.RentPercentCorrect.HeaderText = "Корректировка начислений процентов";
      this.RentPercentCorrect.Name = "RentPercentCorrect";
      this.UName.DataPropertyName = "UName";
      this.UName.HeaderText = "Пользователь";
      this.UName.Name = "UName";
      this.UName.ReadOnly = true;
      this.DEdit.DataPropertyName = "DEdit";
      this.DEdit.HeaderText = "Дата";
      this.DEdit.Name = "DEdit";
      this.DEdit.ReadOnly = true;
      this.dgvWorkPayRent.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
      this.dgvWorkPayRent.BackgroundColor = Color.AliceBlue;
      this.dgvWorkPayRent.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.dgvWorkPayRent.Columns.AddRange((DataGridViewColumn) this.PeriodPR, (DataGridViewColumn) this.RecipientPR, (DataGridViewColumn) this.PerformerPR, (DataGridViewColumn) this.BalanceIn, (DataGridViewColumn) this.RentPercent, (DataGridViewColumn) this.RentDept, (DataGridViewColumn) this.RentPR, (DataGridViewColumn) this.BalanceOut, (DataGridViewColumn) this.RentComission, (DataGridViewColumn) this.Pay, (DataGridViewColumn) this.PayDept, (DataGridViewColumn) this.PayPersent, (DataGridViewColumn) this.PayComission);
      this.dgvWorkPayRent.Dock = DockStyle.Fill;
      this.dgvWorkPayRent.Location = new Point(0, 0);
      this.dgvWorkPayRent.Name = "dgvWorkPayRent";
      this.dgvWorkPayRent.ReadOnly = true;
      this.dgvWorkPayRent.Size = new Size(1237, 257);
      this.dgvWorkPayRent.TabIndex = 7;
      this.PeriodPR.HeaderText = "Период";
      this.PeriodPR.Name = "PeriodPR";
      this.PeriodPR.ReadOnly = true;
      this.PeriodPR.Resizable = DataGridViewTriState.True;
      this.PeriodPR.SortMode = DataGridViewColumnSortMode.Automatic;
      this.RecipientPR.HeaderText = "Получатель";
      this.RecipientPR.Name = "RecipientPR";
      this.RecipientPR.ReadOnly = true;
      this.PerformerPR.HeaderText = "Исполнитель";
      this.PerformerPR.Name = "PerformerPR";
      this.PerformerPR.ReadOnly = true;
      this.BalanceIn.DataPropertyName = "BalanceIn";
      this.BalanceIn.HeaderText = "Задолженность на начало периода";
      this.BalanceIn.Name = "BalanceIn";
      this.BalanceIn.ReadOnly = true;
      this.RentPercent.DataPropertyName = "RentPercent";
      this.RentPercent.HeaderText = "Сумма %";
      this.RentPercent.Name = "RentPercent";
      this.RentPercent.ReadOnly = true;
      this.RentDept.DataPropertyName = "RentDept";
      this.RentDept.HeaderText = "Сумма основного долга";
      this.RentDept.Name = "RentDept";
      this.RentDept.ReadOnly = true;
      this.RentPR.DataPropertyName = "Rent";
      this.RentPR.HeaderText = "Ежемесячный платеж";
      this.RentPR.Name = "RentPR";
      this.RentPR.ReadOnly = true;
      this.BalanceOut.DataPropertyName = "BalanceOut";
      this.BalanceOut.HeaderText = "Задолженность на конец периода";
      this.BalanceOut.Name = "BalanceOut";
      this.BalanceOut.ReadOnly = true;
      this.RentComission.DataPropertyName = "RentComission";
      this.RentComission.HeaderText = "Сумма комиссии";
      this.RentComission.Name = "RentComission";
      this.RentComission.ReadOnly = true;
      this.Pay.DataPropertyName = "Pay";
      this.Pay.HeaderText = "Оплата";
      this.Pay.Name = "Pay";
      this.Pay.ReadOnly = true;
      this.PayDept.DataPropertyName = "PayDept";
      this.PayDept.HeaderText = "Оплата долга";
      this.PayDept.Name = "PayDept";
      this.PayDept.ReadOnly = true;
      this.PayPersent.DataPropertyName = "PayPercent";
      this.PayPersent.HeaderText = "Оплата %";
      this.PayPersent.Name = "PayPersent";
      this.PayPersent.ReadOnly = true;
      this.PayComission.DataPropertyName = "PayComission";
      this.PayComission.HeaderText = "Оплата комиссии";
      this.PayComission.Name = "PayComission";
      this.PayComission.ReadOnly = true;
      this.pnWDButtons.Dock = DockStyle.Bottom;
      this.pnWDButtons.Location = new Point(0, 644);
      this.pnWDButtons.Name = "pnWDButtons";
      this.pnWDButtons.Size = new Size(1237, 62);
      this.pnWDButtons.TabIndex = 5;
      this.pnWDFilters.Controls.Add((Control) this.lblWDService);
      this.pnWDFilters.Controls.Add((Control) this.cmbWDServiceFilter);
      this.pnWDFilters.Controls.Add((Control) this.cmbWDPeriod);
      this.pnWDFilters.Controls.Add((Control) this.lblWDPeriod);
      this.pnWDFilters.Dock = DockStyle.Top;
      this.pnWDFilters.Location = new Point(0, 0);
      this.pnWDFilters.Name = "pnWDFilters";
      this.pnWDFilters.Size = new Size(1237, 40);
      this.pnWDFilters.TabIndex = 3;
      this.lblWDService.AutoSize = true;
      this.lblWDService.Location = new Point(256, 12);
      this.lblWDService.Name = "lblWDService";
      this.lblWDService.Size = new Size(54, 16);
      this.lblWDService.TabIndex = 11;
      this.lblWDService.Text = "Услуга";
      this.cmbWDServiceFilter.FormattingEnabled = true;
      this.cmbWDServiceFilter.Location = new Point(316, 9);
      this.cmbWDServiceFilter.Name = "cmbWDServiceFilter";
      this.cmbWDServiceFilter.Size = new Size(224, 24);
      this.cmbWDServiceFilter.TabIndex = 10;
      this.cmbWDServiceFilter.SelectionChangeCommitted += new EventHandler(this.cmbWDServiceFilter_SelectionChangeCommitted);
      this.cmbWDPeriod.FormatString = "MMMM   yyyy";
      this.cmbWDPeriod.FormattingEnabled = true;
      this.cmbWDPeriod.Location = new Point(71, 9);
      this.cmbWDPeriod.Name = "cmbWDPeriod";
      this.cmbWDPeriod.Size = new Size(137, 24);
      this.cmbWDPeriod.TabIndex = 9;
      this.cmbWDPeriod.SelectionChangeCommitted += new EventHandler(this.cmbWDPeriod_SelectionChangeCommitted);
      this.lblWDPeriod.AutoSize = true;
      this.lblWDPeriod.Location = new Point(7, 12);
      this.lblWDPeriod.Name = "lblWDPeriod";
      this.lblWDPeriod.Size = new Size(58, 16);
      this.lblWDPeriod.TabIndex = 8;
      this.lblWDPeriod.Text = "Период";
      this.cmLsService.Items.AddRange(new ToolStripItem[2]
      {
        (ToolStripItem) this.tsmiLsService,
        (ToolStripItem) this.tsmiLsSupplier
      });
      this.cmLsService.Name = "cmLsService";
      this.cmLsService.Size = new Size(148, 48);
      this.tsmiLsService.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiLsService.Name = "tsmiLsService";
      this.tsmiLsService.Size = new Size(147, 22);
      this.tsmiLsService.Text = "Услуги";
      this.tsmiLsService.Click += new EventHandler(this.tsmiLsService_Click);
      this.tsmiLsSupplier.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiLsSupplier.Name = "tsmiLsSupplier";
      this.tsmiLsSupplier.Size = new Size(147, 22);
      this.tsmiLsSupplier.Text = "Поставщики";
      this.tsmiLsSupplier.Click += new EventHandler(this.tsmiLsSupplier_Click);
      this.cmBalance.Items.AddRange(new ToolStripItem[2]
      {
        (ToolStripItem) this.tsmiHandChangesCharges,
        (ToolStripItem) this.tsmiHandChangesBenefits
      });
      this.cmBalance.Name = "cmBalance";
      this.cmBalance.Size = new Size(259, 48);
      this.tsmiHandChangesCharges.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiHandChangesCharges.Name = "tsmiHandChangesCharges";
      this.tsmiHandChangesCharges.Size = new Size(258, 22);
      this.tsmiHandChangesCharges.Text = "Ручные изменения начислений";
      this.tsmiHandChangesCharges.Click += new EventHandler(this.TsmiHandChangesCharges_Click);
      this.tsmiHandChangesBenefits.Font = new Font("Tahoma", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.tsmiHandChangesBenefits.Name = "tsmiHandChangesBenefits";
      this.tsmiHandChangesBenefits.Size = new Size(258, 22);
      this.tsmiHandChangesBenefits.Text = "Ручные изменения льгот";
      this.tsmiHandChangesBenefits.Click += new EventHandler(this.TsmiHandChangesBenefits_Click);
      this.tmr.Interval = 1000;
      this.tmr.Tick += new EventHandler(this.tmr_Tick);
      this.tmrLsService.Interval = 1000;
      this.tmrLsService.Tick += new EventHandler(this.tmrLsService_Tick);
      this.hp.HelpNamespace = "Help.chm";
      this.tmrEvidence.Interval = 1000;
      this.tmrEvidence.Tick += new EventHandler(this.tmrEvidence_Tick);
      this.cmsEntrance.Name = "cmsEntrance";
      this.cmsEntrance.Size = new Size(61, 4);
      this.cmsEntrance.Text = "Проставить";
      this.reportPolicy.ReportResourceString = componentResourceManager.GetString("reportPolicy.ReportResourceString");
      this.tmrArError.Interval = 1000;
      this.tmrArError.Tick += new EventHandler(this.tmrArError_Tick);
      this.dataGridViewTextBoxColumn1.DataPropertyName = "Rent";
      this.dataGridViewTextBoxColumn1.HeaderText = "Услуга";
      this.dataGridViewTextBoxColumn1.Name = "dataGridViewTextBoxColumn1";
      this.dataGridViewTextBoxColumn1.ReadOnly = true;
      this.dataGridViewTextBoxColumn1.Resizable = DataGridViewTriState.True;
      this.dataGridViewTextBoxColumn1.SortMode = DataGridViewColumnSortMode.NotSortable;
      this.dataGridViewTextBoxColumn1.Width = 68;
      this.dataGridViewTextBoxColumn2.DataPropertyName = "Rent";
      this.dataGridViewTextBoxColumn2.HeaderText = "Сумма";
      this.dataGridViewTextBoxColumn2.Name = "dataGridViewTextBoxColumn2";
      this.dataGridViewTextBoxColumn2.ReadOnly = true;
      this.dataGridViewTextBoxColumn2.Width = 66;
      this.dataGridViewTextBoxColumn3.DataPropertyName = "ParamValue";
      this.dataGridViewTextBoxColumn3.HeaderText = "Параметр";
      this.dataGridViewTextBoxColumn3.Name = "dataGridViewTextBoxColumn3";
      this.dataGridViewTextBoxColumn3.ReadOnly = true;
      this.dataGridViewTextBoxColumn3.Width = 83;
      this.dataGridViewTextBoxColumn4.DataPropertyName = "Scheme";
      this.dataGridViewTextBoxColumn4.HeaderText = "Схема";
      this.dataGridViewTextBoxColumn4.Name = "dataGridViewTextBoxColumn4";
      this.dataGridViewTextBoxColumn4.ReadOnly = true;
      this.dataGridViewTextBoxColumn4.Width = 64;
      this.dataGridViewTextBoxColumn5.DataPropertyName = "MonthCnt";
      gridViewCellStyle2.Format = "N2";
      gridViewCellStyle2.NullValue = (object) null;
      this.dataGridViewTextBoxColumn5.DefaultCellStyle = gridViewCellStyle2;
      this.dataGridViewTextBoxColumn5.HeaderText = "Кол-во месяцев";
      this.dataGridViewTextBoxColumn5.Name = "dataGridViewTextBoxColumn5";
      this.dataGridViewTextBoxColumn5.ReadOnly = true;
      this.dataGridViewTextBoxColumn5.Width = 104;
      this.dataGridViewTextBoxColumn6.DataPropertyName = "Rate";
      this.dataGridViewTextBoxColumn6.HeaderText = "Процент";
      this.dataGridViewTextBoxColumn6.Name = "dataGridViewTextBoxColumn6";
      this.dataGridViewTextBoxColumn6.ReadOnly = true;
      this.dataGridViewTextBoxColumn6.Width = 75;
      this.dataGridViewTextBoxColumn7.DataPropertyName = "Comission";
      this.dataGridViewTextBoxColumn7.HeaderText = "Комиссия";
      this.dataGridViewTextBoxColumn7.Name = "dataGridViewTextBoxColumn7";
      this.dataGridViewTextBoxColumn7.ReadOnly = true;
      this.dataGridViewTextBoxColumn7.Width = 83;
      this.dataGridViewTextBoxColumn8.DataPropertyName = "ClientId";
      this.dataGridViewTextBoxColumn8.HeaderText = "Column1";
      this.dataGridViewTextBoxColumn8.Name = "dataGridViewTextBoxColumn8";
      this.dataGridViewTextBoxColumn8.ReadOnly = true;
      this.dataGridViewTextBoxColumn8.Width = 85;
      this.dataGridViewTextBoxColumn9.DataPropertyName = "PayPersent";
      this.dataGridViewTextBoxColumn9.HeaderText = "RentDept";
      this.dataGridViewTextBoxColumn9.Name = "dataGridViewTextBoxColumn9";
      this.dataGridViewTextBoxColumn9.ReadOnly = true;
      this.dataGridViewTextBoxColumn9.Width = 79;
      this.dataGridViewTextBoxColumn10.DataPropertyName = "PayComission";
      this.dataGridViewTextBoxColumn10.HeaderText = "RentComission";
      this.dataGridViewTextBoxColumn10.Name = "dataGridViewTextBoxColumn10";
      this.dataGridViewTextBoxColumn10.ReadOnly = true;
      this.dataGridViewTextBoxColumn10.Width = 79;
      this.dataGridViewTextBoxColumn11.DataPropertyName = "Rent";
      this.dataGridViewTextBoxColumn11.HeaderText = "Сумма";
      this.dataGridViewTextBoxColumn11.Name = "dataGridViewTextBoxColumn11";
      this.dataGridViewTextBoxColumn11.ReadOnly = true;
      this.dataGridViewTextBoxColumn11.Width = 85;
      this.dataGridViewTextBoxColumn12.DataPropertyName = "ParamValue";
      this.dataGridViewTextBoxColumn12.HeaderText = "Параметр";
      this.dataGridViewTextBoxColumn12.Name = "dataGridViewTextBoxColumn12";
      this.dataGridViewTextBoxColumn12.ReadOnly = true;
      this.dataGridViewTextBoxColumn12.Width = 85;
      this.dataGridViewTextBoxColumn13.DataPropertyName = "Scheme";
      this.dataGridViewTextBoxColumn13.HeaderText = "Схема";
      this.dataGridViewTextBoxColumn13.Name = "dataGridViewTextBoxColumn13";
      this.dataGridViewTextBoxColumn13.ReadOnly = true;
      this.dataGridViewTextBoxColumn13.Width = 86;
      this.dataGridViewTextBoxColumn14.DataPropertyName = "MonthCnt";
      this.dataGridViewTextBoxColumn14.HeaderText = "Кол-во месяцев";
      this.dataGridViewTextBoxColumn14.Name = "dataGridViewTextBoxColumn14";
      this.dataGridViewTextBoxColumn14.ReadOnly = true;
      this.dataGridViewTextBoxColumn14.Width = 85;
      this.dataGridViewTextBoxColumn15.DataPropertyName = "Rate";
      gridViewCellStyle3.Format = "N2";
      gridViewCellStyle3.NullValue = (object) null;
      this.dataGridViewTextBoxColumn15.DefaultCellStyle = gridViewCellStyle3;
      this.dataGridViewTextBoxColumn15.HeaderText = "Процент";
      this.dataGridViewTextBoxColumn15.Name = "dataGridViewTextBoxColumn15";
      this.dataGridViewTextBoxColumn15.ReadOnly = true;
      this.dataGridViewTextBoxColumn15.Width = 86;
      this.dataGridViewTextBoxColumn16.DataPropertyName = "Comission";
      this.dataGridViewTextBoxColumn16.HeaderText = "Комиссия";
      this.dataGridViewTextBoxColumn16.Name = "dataGridViewTextBoxColumn16";
      this.dataGridViewTextBoxColumn16.ReadOnly = true;
      this.dataGridViewTextBoxColumn16.Width = 85;
      this.dataGridViewTextBoxColumn17.DataPropertyName = "UName";
      this.dataGridViewTextBoxColumn17.HeaderText = "Пользователь";
      this.dataGridViewTextBoxColumn17.Name = "dataGridViewTextBoxColumn17";
      this.dataGridViewTextBoxColumn17.ReadOnly = true;
      this.dataGridViewTextBoxColumn17.Width = 86;
      this.dataGridViewTextBoxColumn18.DataPropertyName = "DEdit";
      this.dataGridViewTextBoxColumn18.HeaderText = "Дата";
      this.dataGridViewTextBoxColumn18.Name = "dataGridViewTextBoxColumn18";
      this.dataGridViewTextBoxColumn18.ReadOnly = true;
      this.dataGridViewTextBoxColumn18.Width = 85;
      this.dataGridViewTextBoxColumn19.DataPropertyName = "UName";
      this.dataGridViewTextBoxColumn19.HeaderText = "Пользователь";
      this.dataGridViewTextBoxColumn19.Name = "dataGridViewTextBoxColumn19";
      this.dataGridViewTextBoxColumn19.ReadOnly = true;
      this.dataGridViewTextBoxColumn19.Width = 73;
      this.dataGridViewTextBoxColumn20.DataPropertyName = "DEdit";
      this.dataGridViewTextBoxColumn20.HeaderText = "Дата";
      this.dataGridViewTextBoxColumn20.Name = "dataGridViewTextBoxColumn20";
      this.dataGridViewTextBoxColumn20.ReadOnly = true;
      this.dataGridViewTextBoxColumn20.Width = 73;
      this.AutoScaleDimensions = new SizeF(8f, 16f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.CancelButton = (IButtonControl) this.btnExit;
      this.ClientSize = new Size(1365, 894);
      this.Controls.Add((Control) this.tcntrl);
      this.Controls.Add((Control) this.pnUp);
      this.Controls.Add((Control) this.ts);
      this.Controls.Add((Control) this.pnButton);
      this.Font = new Font("Microsoft Sans Serif", 10f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.hp.SetHelpKeyword((Control) this, "kv41.html");
      this.hp.SetHelpNavigator((Control) this, HelpNavigator.Topic);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.KeyPreview = true;
      this.Margin = new Padding(4);
      this.Name = "FrmClientCard";
      this.hp.SetShowHelp((Control) this, true);
      this.Text = "Карточка лицевого счета";
      this.FormClosing += new FormClosingEventHandler(this.FrmClientCard_FormClosing);
      this.Load += new EventHandler(this.FrmClientCard_Load);
      this.Shown += new EventHandler(this.FrmClientCard_Shown);
      this.KeyDown += new KeyEventHandler(this.FrmClientCard_KeyDown);
      this.contextMenuStrip1.ResumeLayout(false);
      this.pnButton.ResumeLayout(false);
      this.ts.ResumeLayout(false);
      this.ts.PerformLayout();
      this.cmsFind.ResumeLayout(false);
      this.pnUp.ResumeLayout(false);
      this.pnUp.PerformLayout();
      this.tcntrl.ResumeLayout(false);
      this.tpTitul.ResumeLayout(false);
      ((ISupportInitialize) this.dgvSupplierClient).EndInit();
      this.pnInfoLsClinent.ResumeLayout(false);
      this.pnInfoLsClinent.PerformLayout();
      this.pnRemark.ResumeLayout(false);
      this.pnRemark.PerformLayout();
      this.pnInfo.ResumeLayout(false);
      this.pnInfo.PerformLayout();
      this.pnNumers.ResumeLayout(false);
      this.pnNumers.PerformLayout();
      this.pnFIO.ResumeLayout(false);
      this.pnFIO.PerformLayout();
      this.tpArenda.ResumeLayout(false);
      this.pnBill.ResumeLayout(false);
      this.splitContainer1.Panel1.ResumeLayout(false);
      this.splitContainer1.Panel2.ResumeLayout(false);
      this.splitContainer1.ResumeLayout(false);
      ((ISupportInitialize) this.dgvBill).EndInit();
      ((ISupportInitialize) this.dvgArendaLS).EndInit();
      this.pnDogovor.ResumeLayout(false);
      this.pnDogovor.PerformLayout();
      this.tpOptions.ResumeLayout(false);
      ((ISupportInitialize) this.dgvParams).EndInit();
      this.tpService.ResumeLayout(false);
      this.tcntrlService.ResumeLayout(false);
      this.tpLSService.ResumeLayout(false);
      ((ISupportInitialize) this.dgvLsService).EndInit();
      this.pnLsService.ResumeLayout(false);
      this.tpServiceParam.ResumeLayout(false);
      ((ISupportInitialize) this.dgvServiceParam).EndInit();
      this.pnServiceParam.ResumeLayout(false);
      this.pnServiceParam.PerformLayout();
      this.tpSaldo.ResumeLayout(false);
      this.tcntrlBalance.ResumeLayout(false);
      this.tpBalance.ResumeLayout(false);
      ((ISupportInitialize) this.dgvBalance).EndInit();
      this.cmDetail.ResumeLayout(false);
      this.pnBalance.ResumeLayout(false);
      this.pnBalance.PerformLayout();
      this.pnFilterReceiptType.ResumeLayout(false);
      this.pnFilterReceiptType.PerformLayout();
      this.tpBalancePeni.ResumeLayout(false);
      ((ISupportInitialize) this.dgvPeni).EndInit();
      this.pnPeni.ResumeLayout(false);
      this.pnFilterPeniReceiptType.ResumeLayout(false);
      this.pnFilterPeniReceiptType.PerformLayout();
      this.tpSocSaldo.ResumeLayout(false);
      ((ISupportInitialize) this.dgvSocSaldo).EndInit();
      this.pnSocSaldo.ResumeLayout(false);
      this.pnUslSoc.ResumeLayout(false);
      this.pnUslSoc.PerformLayout();
      this.tpLodgers.ResumeLayout(false);
      ((ISupportInitialize) this.dgvLodgers).EndInit();
      this.cmLodgers.ResumeLayout(false);
      this.pnLodgers.ResumeLayout(false);
      this.pnLodgers.PerformLayout();
      this.tpOwners.ResumeLayout(false);
      ((ISupportInitialize) this.dgvOwners).EndInit();
      this.cmOwners.ResumeLayout(false);
      this.pnOwners.ResumeLayout(false);
      ((ISupportInitialize) this.dgvOwnerDoc).EndInit();
      this.cmOwnerDoc.ResumeLayout(false);
      this.tpQuality.ResumeLayout(false);
      ((ISupportInitialize) this.dgvQuality).EndInit();
      this.tpAbsence.ResumeLayout(false);
      ((ISupportInitialize) this.dgvAbsence).EndInit();
      this.tpMSP.ResumeLayout(false);
      this.tcntrlMsp.ResumeLayout(false);
      this.tpMSPRecipient.ResumeLayout(false);
      ((ISupportInitialize) this.dgvMsp).EndInit();
      this.cmCopyToPasttime.ResumeLayout(false);
      this.tpFamily.ResumeLayout(false);
      ((ISupportInitialize) this.dgvFrFamily).EndInit();
      this.pnBtnFrFamily.ResumeLayout(false);
      this.pnLsFamily.ResumeLayout(false);
      ((ISupportInitialize) this.dgvLsFamily).EndInit();
      this.pnBtnLsFamily.ResumeLayout(false);
      this.tpMspDocument.ResumeLayout(false);
      this.pnMSPDoc.ResumeLayout(false);
      ((ISupportInitialize) this.dgvMspDocPers).EndInit();
      this.tpPensDoc.ResumeLayout(false);
      this.pnPensDoc.ResumeLayout(false);
      ((ISupportInitialize) this.dgvPensDocPers).EndInit();
      this.tpCounters.ResumeLayout(false);
      this.tcntrlCounters.ResumeLayout(false);
      this.tpEvidence.ResumeLayout(false);
      ((ISupportInitialize) this.dgvEvidence).EndInit();
      this.pnPeriod.ResumeLayout(false);
      this.pnPeriod.PerformLayout();
      this.pnEvidence.ResumeLayout(false);
      this.tpNumCounters.ResumeLayout(false);
      ((ISupportInitialize) this.dgvCounters).EndInit();
      this.cmsCounters.ResumeLayout(false);
      this.pnCounter.ResumeLayout(false);
      this.pnCounter.PerformLayout();
      ((ISupportInitialize) this.dgvMainCounters).EndInit();
      this.tpAudit.ResumeLayout(false);
      ((ISupportInitialize) this.dgvAudit).EndInit();
      this.tpSeal.ResumeLayout(false);
      ((ISupportInitialize) this.dgvSeal).EndInit();
      this.tpDetailEvidence.ResumeLayout(false);
      ((ISupportInitialize) this.dgvDetailEvidence).EndInit();
      this.pnDetailPeriod.ResumeLayout(false);
      this.pnDetailPeriod.PerformLayout();
      this.tpMessage.ResumeLayout(false);
      ((ISupportInitialize) this.dgvMessage).EndInit();
      this.tpUZP.ResumeLayout(false);
      ((ISupportInitialize) this.dgvPersonsWork).EndInit();
      this.pnPersonsWork.ResumeLayout(false);
      ((ISupportInitialize) this.dgvBond).EndInit();
      this.tpRentMSP.ResumeLayout(false);
      ((ISupportInitialize) this.dgvParamForeign).EndInit();
      this.tpPayWork.ResumeLayout(false);
      this.panWDDataGrid.ResumeLayout(false);
      this.splitContainerWD.Panel1.ResumeLayout(false);
      this.splitContainerWD.Panel2.ResumeLayout(false);
      this.splitContainerWD.ResumeLayout(false);
      ((ISupportInitialize) this.dgvWorkDistribute).EndInit();
      ((ISupportInitialize) this.dgvWorkPayRent).EndInit();
      this.pnWDFilters.ResumeLayout(false);
      this.pnWDFilters.PerformLayout();
      this.cmLsService.ResumeLayout(false);
      this.cmBalance.ResumeLayout(false);
      this.reportPolicy.EndInit();
      this.ResumeLayout(false);
    }
  }
}
